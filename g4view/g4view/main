// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file g4view.license for terms.

#ifndef g4view_g4view_main
#define g4view_g4view_main

#include "version"

#ifdef _WIN32
#include <windows.h>
#undef ABSOLUTE
#undef RELATIVE
#endif

#include "insh"

#include <exlib/geant4/output>
#include <exlib/geant4/opener>
#include <exlib/geant4/physics_list>
#include <exlib/uzres>

#include <exlib/insh/app>
#include <exlib/insh/g4>
#include <exlib/insh/g4exas>

#include <inlib/insh/ishell_args_class_cmd>

#include <G4VUserDetectorConstruction.hh>

#define UNFOLD_RES_FILE(a__zip,a__env,a__tmp_prefix,a__dir) \
  if(!exlib::unfold(a_out,a_doc_dir,a_res_dir,a_tmp_dir,m_tmp_dirs,a__zip,exlib::geant4::s_##a__env(),a__tmp_prefix,a__dir)) return;

#define CHECK_ENV(a__name) \
  if(!inlib::is_env(#a__name)) {\
    a_out << "g4view::main: env variable " << #a__name << " not defined." << std::endl;\
    return;\
  }
  
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

namespace g4view {

class detector : public G4VUserDetectorConstruction {
  INLIB_CLASS_STRING(vacuum)
  INLIB_CLASS_STRING(g4view_world)
public:
  virtual G4VPhysicalVolume* Construct() {
    G4double a,z,density;
    G4Material* vacuum =
      new G4Material(s_vacuum(),z=1.,a=1.01*CLHEP::g/CLHEP::mole,
                     density=CLHEP::universe_mean_density,kStateGas,2.73*CLHEP::kelvin,3.e-18*CLHEP::hep_pascal);

    G4Tubs* solid = new G4Tubs(s_g4view_world(),0,10,10,0,2*inlib::pi());
    G4LogicalVolume* vol = new G4LogicalVolume(solid,vacuum,s_g4view_world());

    G4VPhysicalVolume* world = new G4PVPlacement(0,G4ThreeVector(),vol,s_g4view_world(),0,false,0);

    // vaccum, solid, vol, world are owned by :
    //    GetMaterialTable, G4[Solid,LogicalVolume,PhysicalVolume]Store

    return world;
  }
public:
  detector(){}
  virtual ~detector(){}
public:
  detector(const detector& a_from):G4VUserDetectorConstruction(a_from){}
  detector& operator=(const detector&){return *this;}
};

class main: public exlib::geant4::output, public exlib::geant4::viewer {
  typedef exlib::geant4::output parent_output;
  typedef exlib::geant4::viewer parent_viewer;
//public:  
//  INLIB_SCLASS(g4view::main)
//  virtual void* cast(const std::string& a_class) const {
//    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
//    return parent_viewer::cast(a_class);
//  }
public:
  static const std::string& s_version() {
    static const std::string s_v(G4VIEW_VERSION);
    return s_v;
  }
  static const std::string& s_args_help() {
    static const std::string s_v;
    return s_v;
  }
protected:  
  INLIB_CLASS_STRING(g4view_)
protected: //insh  
  EXLIB_INSH_APP_HEADER(main)
  static void insh_app_version(inlib::ishell& a_insh,const std::vector<std::string>&) {
    a_insh.out(G4VIEW_VERSION);
  }
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_doc_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent_output(a_out,false)
  ,parent_viewer("g4view",G4VIEW_VERSION,
		 a_out,a_gl_mgr,a_ttf,a_selection,
		 a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,m_run_manager(0)
  {
    //////////////////////////////////////
    /// insh: ////////////////////////////
    //////////////////////////////////////
    insh_app_add_cmds();
    EXLIB_INSH_G4_ADDS(parent_viewer::m_main_insh,*this)
    
    INLIB_INSH_ADD_ISHELL_ARGS_GEANT4_OUTPUT_CMD(insh(),*this,g4_output,
      exlib::insh_g4_output,
"g4_output: g4_output enable/disable\n\
  Enable, disable Geant4 output.\n\
  Example:\n\
    g4_output enable\n\
    g4_apply_command '/control/verbose 2'\n\
    g4_apply_command '/run/verbose 2'\n\
    g4_beam_on\n\
    g4_output disable\n\
    g4_beam_on\n\
")

    EXLIB_INSH_G4EXAS_ADDS(parent_viewer::m_main_insh,*this)

    INLIB_INSH_ADD_ISHELL_ARGS_CMD(insh(),app_version,
      insh_app_version,
      "app_version: app_version\n  Print the application version.\n")
      
    INLIB_INSH_ADD_ISHELL_ARGS_CMD(insh(),app_primary_generator_set,
      insh_app_primary_generator_set,
"app_primary_generator_set: app_primary_generator_set\n\
")

    INLIB_INSH_ADD_ISHELL_ARGS_CMD(insh(),app_primary_generator_get,
      insh_app_primary_generator_get,
"app_primary_generator_get: app_primary_generator_get\n\
")
    //////////////////////////////////////
    //////////////////////////////////////
    //////////////////////////////////////
      
    m_opener.add_ext(".gdml");
    m_opener.add_opener(inlib::file::s_format_gdml(),new exlib::geant4::opener());
    m_opener.add_ext(".mac");
    m_opener.add_opener(inlib::file::s_format_mac(),new exlib::geant4::mac_opener());

    //////////////////////////////////////
    /// Geant4 : /////////////////////////
    //////////////////////////////////////
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=1030
    UNFOLD_RES_FILE("g4ndl_4_5.zip",G4NEUTRONHPDATA,s_g4view_(),"G4NDL4.5");
    UNFOLD_RES_FILE("g4emlow_6_50.zip",G4LEDATA,s_g4view_(),"G4EMLOW6.50");
    UNFOLD_RES_FILE("photonevaporation_4_3_2.zip",G4LEVELGAMMADATA,s_g4view_(),"PhotonEvaporation4.3.2");
    UNFOLD_RES_FILE("g4ensdfstate_2_1.zip",G4ENSDFSTATEDATA,s_g4view_(),"G4ENSDFSTATE2.1");
    UNFOLD_RES_FILE("g4saiddata_1_1.zip",G4SAIDXSDATA,s_g4view_(),"G4SAIDDATA1.1");
    CHECK_ENV(G4NEUTRONHPDATA)
    CHECK_ENV(G4LEDATA)
    CHECK_ENV(G4LEVELGAMMADATA)
    CHECK_ENV(G4ENSDFSTATEDATA)
    CHECK_ENV(G4SAIDXSDATA)
#else
  //UNFOLD_RES_FILE("g4emlow_6_23.zip",G4LEDATA,s_g4view_(),"G4EMLOW6.23");
    UNFOLD_RES_FILE("g4emlow_6_50.zip",G4LEDATA,s_g4view_(),"G4EMLOW6.50");
    CHECK_ENV(G4LEDATA)
#endif

#ifdef EXLIB_HAS_PYTHIA8
   {std::string svers(PYTHIA_VERSION); //should be guessed from Pythia itself.
    std::string file = "pythia_"+svers+"_xmldoc.zip";
    std::string sdir = "pythia_"+svers+inlib::sep()+"xmldoc";
    UNFOLD_RES_FILE(file,PYTHIA8DATA,s_g4view_(),sdir);}
    CHECK_ENV(PYTHIA8DATA)
#endif

    m_run_manager = new G4RunManager;

    // mandatory user initialization classes :
    m_run_manager->SetUserInitialization(new detector());
    m_run_manager->SetUserInitialization(new exlib::geant4::physics_list());

    // mandatory user action class :
   {primary_generator* gen = new primary_generator(a_out);
    gen->set_sigma_angle(90*CLHEP::degree);
    m_run_manager->SetUserAction(gen);}

    m_run_manager->Initialize(); // initialize Geant4 kernel

  }
  virtual ~main() {
    G4GeometryManager::GetInstance()->OpenGeometry();
    exlib::geant4::clean_geom_stores();
    delete m_run_manager;
    clear_tmp();
  }
protected:
  main(const main& a_from)
  :parent_output(a_from.out(),true)
  ,parent_viewer(a_from)
  ,m_run_manager(0)
  {}
private:
  main& operator=(const main&) {return *this;}
protected:  
  G4RunManager* m_run_manager;
};

#undef CHECK_ENV
#undef UNFOLD_RES_FILE

}

#endif
