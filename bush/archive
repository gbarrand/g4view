# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# to be sourced from another build script.

# NOTE : on a UNIX build lib${libname}.a and not ${libname}.a

if [ "${libname}" = "" ] ; then
  echo "bush/archive : variable libname not defined."
  exit
fi

if [ "${build_path}" = "" ] ; then
  echo "bush/archive : build_path not defined."
  exit
fi

if [ ! -d ${build_path} ] ; then
  echo "bush/archive : ${build_path} does not exist."
  exit
fi

if [ "${ar_cmd}" = "" ] ; then
  echo "bush/archive : ar_cmd not defined."
  exit
fi

#if [ "${objs}" = "" ] ; then
#  /bin/rm -f tmp_0
#  find ${build_path} -name '*.o' -print > tmp_0
#  for file in $(cat tmp_0) ; do objs="${objs} ${file}"; done
#  /bin/rm -f tmp_0
#fi

if [ "${objs}" = "" ] ; then
  echo "bush/archive : no objs."
else

  file_a="${build_path}/lib${libname}.a"
  /bin/rm -f ${file_a}

  if [ ${build_verbose} = yes ] ; then
    echo "bush/archive : do archive ${file_a} ..."
  fi

  if [ ${build_visual} = "yes" ] ; then

    /bin/rm -f tmp_0
    #find ${build_path} -name '*.o' -print > tmp_0
    for file in ${objs} ; do echo ${file} >> tmp_0; done

    lib.exe /nologo /out:${file_a} @tmp_0

    /bin/rm -f tmp_0

  else

    ${ar_cmd} -cr ${file_a} ${objs}

    # Android plugin wants ranlib on the .a :
    ${ranlib_cmd} ${file_a}

  fi

  if [ ${build_shlib} = "yes" ] ; then
    if [ "${build_sdk_ios}" = "yes" ] ; then
      if [ ${build_verbose} = yes ] ; then
        echo "bush/archive : sdk_ios : ${libname} : we do not build shared lib."
      fi

    elif [ "${build_sdk_ios_gnu}" = "yes" ] ; then
      if [ ${build_verbose} = yes ] ; then
        echo "bush/archive : sdk_ios_gnu : ${libname} : we do not build shared lib."
      fi

    elif [ "${build_sdk_iossim}" = "yes" ] ; then
      if [ ${build_verbose} = yes ] ; then
        echo "bush/archive : sdk_iossim : ${libname} : we do not build shared lib."
      fi

    elif [ ${build_visual} = "yes" ] ; then
      #echo "bush/archive : visual : ${libname} : can't build shared lib."
      echo dummy > /dev/null

      file_o="${build_path}/${libname}.o"
      file_symbs="${build_path}/${libname}.symbs"
      file_def="${build_path}/${libname}.def"
      file_lib="${build_path}/${libname}.lib"
      file_exp="${build_path}/${libname}.exp"

      file_sh="${build_path}/${libname}.dll"

      # Build the obuild_windef.exe utility program :
      /bin/rm -f ./cl_exe_tmp
      eval cl.exe /nologo /MD /O2 /W3 /wd4996 /Fewindef.exe ${bush_home}/visual/windef.c > ./cl_exe_tmp
      use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi

      # Building the .def file :
      /bin/rm -f ./dumpbin_exe_tmp
      eval dumpbin.exe /symbols /out:${file_symbs} ${file_a} > ./dumpbin_exe_tmp
      use_status=$?;if [ ${use_status} != 0 ] ; then cat ./dumpbin_exe_tmp;/bin/rm -f ./dumpbin_exe_tmp;exit ${use_status}; fi
      /bin/rm -f ./dumpbin_exe_tmp

      ./windef.exe ${libname} < ${file_symbs} > ${file_def}

      # Building the linking library :
      # It produces a .exp file.
      /bin/rm -f ./lib_exe_tmp
      eval lib.exe /nologo /out:${file_lib} /def:${file_def} > ./lib_exe_tmp
      use_status=$?;if [ ${use_status} != 0 ] ; then cat ./lib_exe_tmp;/bin/rm -f ./lib_exe_tmp;exit ${use_status}; fi
      /bin/rm -f ./lib_exe_tmp

      # Bulding the runtime library (dll) :
      if [ "${MSVCDir}" != "" ] ;  then
        # Visual Studio 2003
        vc_linker_path="`cygpath \"${MSVCDir}\"/bin`"
        archive_linker="\"${vc_linker_path}\"/link.exe"
      else
        if [ "${VCINSTALLDIR}" != "" ] ;  then
          # Visual Studio >= 9.0
          vc_linker_path="`cygpath \"${VCINSTALLDIR}\"/bin`"
          archive_linker="\"${vc_linker_path}\"/link.exe"
        else
          echo "bush/archive : Env variables MSVCDir and VCINSTALLDIR not defined."
          echo "bush/archive : You have to setup Visual."
          exit
         fi  
      fi  

      if [ ${build_debug} = "yes" ] ; then
        archive_linker="${archive_linker} /nologo /DEBUG:FULL" 
      fi

      eval ${archive_linker} /nologo /dll /out:${file_sh} ${file_exp} ${file_a} ${libs}

      /bin/rm -f ${file_o} ${file_symbs} ${file_def} ${file_exp} windef.exe
      /bin/rm -f windef.obj windef.exe.manifest

    elif [ ${build_sdk_android} = "yes" ] ; then
      if [ ${build_verbose} = yes ] ; then
        echo "bush/archive : android : ${libname} : we do not build shared lib."
      fi

    else # Mac, Linux :
      file_sh="${build_path}/lib${libname}.${shex}"
      /bin/rm -f ${file_sh}
      if [ ${build_verbose} = yes ] ; then
        echo "bush/archive : do shlib ${file_sh} ..."
      fi
      /bin/rm -f ${file_sh}
      eval ${cpp_shlib_builder} -o ${file_sh} ${objs}
    fi
  fi

fi
