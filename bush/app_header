# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# to be sourced in <app>/mgr/build scripts.

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

if [ "${bush_home}" = "" ] ; then
  echo "bush/app_header : bush_home variable not set."
  exit
fi

#//////////////////////////////////////////////////////
#/// args : ///////////////////////////////////////////
#//////////////////////////////////////////////////////
build_offscreen=no
build_x11=no
build_sdl2=no
build_no_gl=no
build_cocoa=no
build_macos_metal=no
build_cocoa_gnu=no
build_ios=no
build_ios_gnu=no
build_iossim=no
build_android=no
build_wasm=no
build_wx=no
build_no_screen=no
build_no_data_client=no
build_app_dev=no
build_app_use=
build_enforce_vbo=no

build_install=no

header_args=
for arg in ${build_args} ; do
  case ${arg} in
     -offscreen)          build_offscreen=yes;;
     -x11)            build_x11=yes;;
     -X11)            build_x11=yes;;
     -X11_no_gl)      build_x11=yes;build_no_gl=yes;;
     -x11_no_gl)      build_x11=yes;build_no_gl=yes;;
     -cocoa)          build_cocoa=yes;;
     -cocoa_gnu)      build_cocoa_gnu=yes;;
     -macos_metal)    build_macos_metal=yes;;
     -ios)            build_ios=yes;;
     -ios_gnu)        build_ios_gnu=yes;;
     -iossim)         build_iossim=yes;;
     -android)        build_android=yes;;
     -wasm)           build_wasm=yes;;
     -wx)             build_wx=yes;;
     -sdl2)           build_sdl2=yes;;
     -SDL2)           build_sdl2=yes;;
     -no_gl)          build_no_gl=yes;;
     -no_screen)      build_no_screen=yes;;
     -no_data_client) build_no_data_client=yes;;
     -app_dev)        build_app_dev=yes;;
     -install)        build_install=yes;;
     -vbo)            build_enforce_vbo=yes;;
     -app_use_*)      build_app_use="${build_app_use} ${arg}";;

     -*)              header_args="${header_args} ${arg}";;
      *)              header_args="${header_args} ${arg}";;
  esac
done

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

# guess preferred screen handling :
if [ ${build_no_screen} = "yes" ] ; then
  # Then let inlib/mgr/build_* choose the config and compiler.
  # This option does not induce a "build distrib".
  echo dummy > /dev/null

elif [ ${build_offscreen} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null

elif [ ${build_x11} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null
elif [ ${build_sdl2} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null
elif [ ${build_cocoa} = "yes" ] ; then
  header_args="${header_args} -sdk_mac"
elif [ ${build_cocoa_gnu} = "yes" ] ; then
  header_args="${header_args} -sdk_mac_gnu"
elif [ ${build_macos_metal} = "yes" ] ; then
  header_args="${header_args} -sdk_mac"
elif [ ${build_ios} = "yes" ] ; then
  header_args="${header_args} -sdk_ios"
elif [ ${build_ios_gnu} = "yes" ] ; then
  header_args="${header_args} -sdk_ios_gnu"
elif [ ${build_iossim} = "yes" ] ; then
  header_args="${header_args} -sdk_iossim"

elif [ ${build_android} = "yes" ] ; then
  header_args="${header_args} -sdk_android"

elif [ ${build_wasm} = "yes" ] ; then
  header_args="${header_args} -emcc"

elif [ ${build_wx} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null

else
  if [ `uname` = "Darwin" ] ; then
    build_cocoa=yes

    ${bush_home}/check_app clang++
    build_status=$?;
    if [ ${build_status} = 0 ] ; then
      header_args="${header_args} -sdk_mac"
    else
      header_args="${header_args} -sdk_mac_gnu"
    fi
    
  elif [ `uname` = "Linux" ] ; then
    build_x11=yes
    # take default compiler : clang on Mac, gnu on Linux.
  fi
fi

if [ "${ourex_home}" = "" ] ; then ourex_home=${bush_home}/../inexlib/ourex;fi

build_args="${header_args}"
. ${bush_home}/ourex_args

. ${bush_home}/header_app

#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////
if [ "`uname | grep CYGWIN`" != "" ] ; then
  if [ ${build_gnu} = "yes" ] ; then
    build_x11=yes
  fi
fi

if [ "${app}" = "" ] ; then
  echo "bush/app_header : app variable not set."
  exit
fi

if [ ${build_no_gl} = "yes" -o ${build_offscreen} = "yes" ] ; then
  build_inlib_gl=yes
  # pass -inlib_gl to ourex/[CoinGL,HEPVis]/build :
  rm_inlib_gl="`echo ${ourex_args} | sed -e 's:-inlib_gl::g'`"
  if [ "${rm_inlib_gl}" = "`echo ${ourex_args}`" ] ; then  # NOTE : echo ${ourex_args} remove a trailing space.
    ourex_args="${ourex_args} -inlib_gl"
  fi
fi


if [ ${build_no_gl} = "yes" ] ; then
  cppflags="${cppflags} -DEXLIB_NO_GL"
fi

if [ ${build_inlib_gl} = "yes" ] ; then
  cppflags="${cppflags} -DEXLIB_INLIB_GL"
fi

#if [ "${build_no_data_client}" = "no" ] ; then
#  cppflags="${cppflags} -DAPP_USE_DATA_CLIENT"
#fi

if [ "${exlib_home}" = "" ] ; then
  exlib_home=${bush_home}/../inexlib/exlib
fi

if [ "${inlib_home}" = "" ] ; then
  inlib_home=${bush_home}/../inexlib/inlib
fi

if [ "`uname | grep CYGWIN`" != "" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    cppflags="${cppflags} -bigobj"
    app_lower="`echo ${app} | tr '[:upper:]' '[:lower:]'`"
    if [ ${app} != ${app_lower} ] ; then
      cppflags="${cppflags} -I../${app}"  # to bypass "../<app>/main" not found on CYGWIN if the app name contains uppercase chars.
    fi
  else
    cppflags="${cppflags} -Wa,-mbig-obj"
  fi
fi
