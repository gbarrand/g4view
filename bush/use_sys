# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# source from a build script. It must come after use_cc, use_cpp.

# pgex : plugin suffix.

if [ `uname` = Darwin ] ; then
  #NOTE : on my MacBookPro :
  #         "uname -p" returns i386
  #         "uname -m" returns x86_64
  lib=lib
  pgex=bundle
else
  if [ `uname -p` = x86_64 ] ; then
    lib=lib64
  else
    lib=lib
  fi
  pgex=so
fi
if [ ${build_sdk_android} = "yes" ] ; then
  pgex=so
fi
if [ ${build_visual} = "yes" ] ; then
  pgex=dll
fi

# extension of "things" to copy if using shared libs :
if [ ${build_visual} = "yes" ] ; then
  cplib=
  cpex=dll
else
  if [ `uname` = Darwin ] ; then
    cplib=lib
    cpex=dylib
  else
    cplib=lib
    cpex=so
  fi
fi

if [ "${cc_compiler}" = "" ] ; then
  echo "bush/use_sys : use_sys must be after use_cc and/or use_cpp".
  exit
fi

#////////////////////////////////////////////////////////////////
#/// options to build shared lib : //////////////////////////////
#////////////////////////////////////////////////////////////////

# shex : shared lib suffix.
# WARNING : someone must not confuse a shared lib and a plugin.
#           Just in case, we remember that a plugin is some
#           kind of program without a main which is targeted
#           to be dynamically loaded with dlopen. Being a kind
#           of program it must be fully linked. A shared lib must
#           be seen as a kind of advanced archive, and as such
#           don't have to be linked.

arex=a
ar_flags=
ranlib_flags=

shopts=
if [ ${build_sdk_android} = "yes" ] ; then
  shex=so
  shopts="${shopts} -shared"

  ar_cmd="${ndk_ar_cmd}"
  ranlib_cmd="${ndk_ranlib_cmd}"

elif [ ${build_emcc} = "yes" ] ; then
  #shex=so
  #shopts="${shopts} -shared"

  ar_cmd="emar"
  ranlib_cmd="emranlib"

elif [ "`uname | grep CYGWIN`" != "" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    shex=lib
  else
    shex=dll.a
  fi
  ar_cmd=ar
  ranlib_cmd=ranlib

elif [ `uname` = Darwin ] ; then
  shex=dylib
  shopts="${shopts} -dynamiclib -twolevel_namespace"
  shopts="${shopts} -undefined dynamic_lookup -dynamic -single_module"

  ar_cmd=ar
  ranlib_cmd=ranlib

  ar_flags="${ar_flags} -S"  # -S so that ar does not do ranlib.
  ranlib_flags="${ranlib_flags} -no_warning_for_no_symbols"

else
  shex=so
  shopts="${shopts} -shared"

  ar_cmd=ar
  ranlib_cmd=ranlib
fi

cc_shlib_builder="${cc_compiler} ${shopts}"
cpp_shlib_builder="${cpp_compiler} ${shopts}"

if [ "`uname | grep CYGWIN`" != "" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    pgpy=pyd
  else
    pgpy=dll
  fi
else
  pgpy=so
fi

#////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
linker_flags=
if [ ${build_visual} = "no" ] ; then
  if [ ${build_m32} = yes ] ; then linker_flags="${linker_flags} -m32"; fi
fi

#if [ ${build_visual} = "yes" ] ; then
#  ccflags="${ccflags} /I${bush_home}/visual"
#  cppflags="${cppflags} /I${bush_home}/Windows"
#fi

if [ `uname` = "Linux" ] ; then
  is_ubuntu=no
  if [ -f /etc/os-release ] ; then
    NAME="`grep NAME /etc/os-release`"
    if [ "`echo ${NAME} | sed -e 's:Ubuntu::g'`" != "${NAME}" ] ; then is_ubuntu=yes;fi
  fi
  if [ ${is_ubuntu} = yes ] ; then
    # if "--as-needed" (now the default on ubuntu), an app linking shared libs doing OpenGL
    # but doing no GL in its main will not link.
    if [ ${build_visual} = "no" ] ; then
      linker_flags="${linker_flags} -Wl,--no-as-needed"
      pgflags="${pgflags} -Wl,--no-as-needed"  # for exa for OnXXt.so plugin.
    fi
  fi
fi

#////////////////////////////////////////////////////////////////
#/// parallel : /////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
parallel_exe=
if [ `uname` = Darwin ] ; then
  if [ -x /opt/local/bin/parallel ] ; then
    parallel_exe=/opt/local/bin/parallel
  fi
elif [ `uname` = Linux ] ; then
  if [ -x /usr/bin/parallel ] ; then #ostacku
    parallel_exe=/usr/bin/parallel
  elif [ "`uname -n`" = barrand-centos7.lal.in2p3.fr -o "`uname -n`" = barrand-centos7 ] ; then
    if [ -x /usr/local/parallel/20120122/bin/parallel ] ; then
      LC_ALL=en_US.UTF-8;export LC_ALL
      parallel_exe=/usr/local/parallel/20120122/bin/parallel
    fi
  fi
fi

#////////////////////////////////////////////////////////////////
#/// CYGWIN, WSL : //////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
c_drive=
if [ "`uname | grep CYGWIN`" != "" ] ;       then c_drive=/cygdrive/c; fi
if [ "`uname -r | grep Microsoft`" != "" ] ; then c_drive=/mnt/c; fi
