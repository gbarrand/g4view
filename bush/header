# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# to be sourced from an <app>/mgr/build scripts.

build_gnu=no
build_intel=no
build_clang=no
build_cling_clang=no
build_visual=no
build_sdk_mac=no
build_sdk_mac_gnu=no
build_sdk_ios=no
build_sdk_ios_gnu=no
build_sdk_iossim=no
build_sdk_android=no

build_m32=no

build_cxx11=no
build_debug=no
build_set_x=no
build_verbose=no
build_mem=no	
build_mem_atexit=no	
build_rmo=no
build_rma=no
build_clean=no
build_parallel=no

build_compile=yes
build_archive=yes
build_app=yes
build_plugin=yes
build_distrib=yes

build_compile_main_only=no
build_compile_only=no
build_archive_only=no
build_app_only=no
build_distrib_only=no
build_plugin_only=no
build_link_only=no
build_no_distrib=no

build_shlib=yes
build_use_shlib=no
build_inlib_gl=no

build_use_not_our=
build_D=
build_use_our_stl=no
build_g4flags=no

build_bin_dir=
build_app_distrib_dir=	
build_ourex_bin_dir=
build_bin_dir_suffix=

build_args_file=

#echo "bush/header : build_args : ${build_args}"

save_dir="`pwd`"
package="`basename ${save_dir}`"
if [ ${package} = mgr ] ; then
  package="`dirname ${save_dir}`"
  package="`basename ${package}`"
fi

for arg in ${build_args} ; do
  case ${arg} in
    # WARNING : if adding args here, look also for the ourex_args section in bush/ourex_args.

    -gnu)         build_gnu=yes;;
    -intel)       build_intel=yes;;
    -clang)       build_clang=yes;;
    -cling_clang) build_cling_clang=yes;;
    -visual)      build_visual=yes;;
    -sdk_mac)     build_sdk_mac=yes;;
    -sdk_mac_gnu) build_sdk_mac_gnu=yes;;
    -sdk_ios)     build_sdk_ios=yes;;
    -sdk_ios_gnu) build_sdk_ios_gnu=yes;;
    -sdk_iossim)  build_sdk_iossim=yes;;
    -sdk_android) build_sdk_android=yes;;

    -c++11)        build_cxx11=yes;;
    -g)            build_debug=yes;;
    -debug)        build_debug=yes;;
    -x)            build_set_x=yes;;
    -v)            build_verbose=yes;;

    -a_only)       build_shlib=no;;
    -m32)          build_m32=yes;;
    -bin_*)        build_bin_dir=${arg};;
    -ourex_bin_*)  build_ourex_bin_dir=${arg};;   # See bush/use/ourex_use. Used in wall/mgr/build.
    -bdir_suffix*) build_bin_dir_suffix=${arg};;
    -app_distrib_dir_*)  build_app_distrib_dir=${arg};;

    -clean)        build_clean=yes;;
    -parallel)     build_parallel=yes;;

    -rmo)          build_rmo=yes;;
    -rma)          build_rma=yes;;

    -compile_only)      build_compile_only=yes;;
    -archive_only)      build_archive_only=yes;;
    -plugin_only)       build_plugin_only=yes;;
    -app_only)          build_app_only=yes;;
    -distrib_only)      build_distrib_only=yes;;
    -no_distrib)        build_no_distrib=yes;;
    -link_only)         build_link_only=yes;;
    -compile_main_only) build_compile_main_only=yes;;

    -sys_*)        build_use_not_our="${build_use_not_our} ${arg}";;
    -D_*)          build_D="${build_D} ${arg}";;

    -mem)          build_mem=yes;;
    -mem_atexit)   build_mem_atexit=yes;;

    -g4flags)      build_g4flags=yes;;
    -use_shlib)    build_use_shlib=yes;;
    -inlib_stl)    build_use_our_stl=yes;;
    -inlib_gl)     build_inlib_gl=yes;;

    -*) echo "bush/header : unknown option : $arg for ${package}." ; exit ;;

#    *) echo "bush/header : unknown option : $arg for ${package}." ; exit ;;
     *) if [ "${build_args_file}" != "" ] ; then
          echo "bush/header : only one arg file supported."
          exit
        else
          build_args_file="${arg}"
        fi
        ;;
  esac
done

if [ ${build_verbose} = yes ] ; then
  echo "bush/header : args : \"${build_all_args}\"."   
fi

if [ ${build_set_x} = "yes" ] ; then set -x; fi

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

. ${bush_home}/guess_compiler

. ${bush_home}/use_cc
. ${bush_home}/use_cpp
. ${bush_home}/use_sys # after the two uppers.

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

/bin/rm -f c_tmp cc_tmp cxx_tmp cpp_tmp C_tmp m_tmp mm_tmp

cfiles=
ccfiles=
cxxfiles=
cppfiles=
C_files=
mfiles=
mmfiles=

objs=
libs=
dylibs=

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

# WARNING : build_dir is used as a relative path.
#           Then if "/aa/bb", it is going to be used
#           as "./aa/bb" in a local directory.

if [ "${build_bin_dir}" != "" ] ; then
  build_dir="`echo ${build_bin_dir} | sed -e 's:\-bin_:bin_:g'`"
else
  build_dir="bin_${config_name}"
  if [ ${build_m32} = yes ] ; then build_dir="${build_dir}_m32"; fi
fi

if [ "${build_bin_dir_suffix}" != "" ] ; then
  # exa -bdir_suffix=_11
  build_bin_dir_suffix=`echo ${build_bin_dir_suffix} | sed 's:.*\=::'`
  build_dir="${build_dir}${build_bin_dir_suffix}"
fi

if [ "${build_app_distrib_dir}" != "" ] ; then
  build_app_distrib_dir="`echo ${build_app_distrib_dir} | sed -e 's:\-app_distrib_dir_::g'`"
fi

if [ ${build_debug} = "yes" ] ; then
if [ ${build_visual} = "yes" ] ; then
  if [ "`echo ${build_dir} | sed -e 's:_debug::g'`" == "${build_dir}" ] ; then
    echo "bush/header : enforcing _debug suffix in build_dir."
    build_dir="${build_dir}_debug"
  fi
fi
fi

build_path="./${build_dir}"

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

build_do_compile=yes

if [ ${build_compile_main_only} = "yes" ] ; then
  build_app=yes

  build_do_compile=no
  build_compile=no
  build_archive=no
  build_plugin=no
  build_distrib=no
fi

if [ ${build_compile_only} = "yes" ] ; then
  build_app=no
  build_archive=no
  build_plugin=no
  build_distrib=no
fi

if [ ${build_app_only} = "yes" ] ; then
  build_app=yes

  build_compile=no
  build_archive=no
  build_plugin=no
  build_distrib=no
fi

if [ ${build_archive_only} = "yes" ] ; then
  build_archive=yes

  build_compile=yes
  build_do_compile=no

  build_app=no
  build_plugin=no
  build_distrib=no
fi

if [ ${build_plugin_only} = "yes" ] ; then
  build_plugin=yes

  build_compile=yes
  build_do_compile=no

  build_app=no
  build_distrib=no
fi

if [ ${build_distrib_only} = "yes" ] ; then
  build_distrib=yes

  build_compile=no
  build_do_compile=no
  build_archive=no
  build_app=no
  build_plugin=no
fi

if [ ${build_link_only} = "yes" ] ; then
  build_app=yes

  build_compile=yes
  build_do_compile=no

  build_distrib=no
  build_archive=no
  build_plugin=no
fi

if [ ${build_clean} = "yes" -o ${build_rmo} = "yes" -o ${build_rma} = "yes" ] ; then
  build_compile=no
  build_archive=no
  build_app=no
  build_distrib=no
fi

if [ ${build_no_distrib} = "yes" ] ; then build_distrib=no; fi

#//////////////////////////////////////////////////////
#/// -sys_<pack> : ////////////////////////////////////
#//////////////////////////////////////////////////////
for build_item in ${build_use_not_our} ; do
  build_item="`echo ${build_item} | sed -e 's:\-sys_::g'`"
  var="build_use_not_our_${build_item}"
  eval ${var}=yes
done

