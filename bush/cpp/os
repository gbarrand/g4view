// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file bush.license for terms.

#ifndef bush_cpp_os
#define bush_cpp_os

//NOTE : we avoid to have std includes here to be sure
//       that in the below ifdef things come only from the compiler.

namespace bush {

inline const char* os() {

#if defined(__APPLE__)

#include <TargetConditionals.h>
#if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR || TARGET_OS_EMBEDDED
  static const char s[] = "iOS";
#else
  static const char s[] = "Darwin";
#endif

#elif defined(_WIN32) || (defined(__CYGWIN__) && defined(__GNUC__))
  static const char s[] = "Windows";
#elif defined(ANDROID)
  static const char s[] = "Android";
#elif defined(__linux)
  static const char s[] = "Linux";
#elif defined(__alpha)
  static const char s[] = "OSF1";
#else
  static const char s[] = "unknown";
#endif
  return s;
}

inline const char* processor() {

#if defined(__GNUC__)

#if defined(__ppc__)
  static const char s[] = "ppc";
#elif defined(__ppc64__)
  static const char s[] = "ppc64";
#elif defined(__i386__)
  static const char s[] = "i386";
#elif defined(__x86_64__)
  static const char s[] = "x86_64";
#elif defined(__ia64__)
  static const char s[] = "ia64";
#else
  static const char s[] = "unknown";
#endif

#elif defined(_MSC_VER)

#if defined(_M_IX86)
  static const char s[] = "ix86";
#elif defined(_M_X64)
  static const char s[] = "x64";
#else
  static const char s[] = "unknown";
#endif

#elif defined(__alpha)
  static const char s[] = "alpha";

#else
  static const char s[] = "unknown";
#endif
  return s;
}

inline const char* compiler_name() {

#if defined(__clang__)
  static const char s[] = "clang";
#elif defined(__GNUC__)
  static const char s[] = "gcc";
#elif defined(_MSC_VER)
  static const char s[] = "cl";
#elif defined(__alpha)
  static const char s[] = "cxx";
#else
  static const char s[] = "unknown";
#endif
  return s;
}

}

#include "tosu" //does not bring any std include.

namespace bush {

inline void compiler(char a_s[128]) {
  char* pos = a_s;
  unsigned int l;
  toss(compiler_name(),pos,l);pos += l;

#if defined(__clang__)
  *pos = '_';pos++;
  tosu<unsigned int>(__clang_major__,pos,l);pos += l;  
  tosu<unsigned int>(__clang_minor__,pos,l);pos += l;
  tosu<unsigned int>(__clang_patchlevel__,pos,l);pos += l;
#elif defined(__GNUC__)
  *pos = '_';pos++;
  tosu<unsigned int>(__GNUC__,pos,l);pos += l;  
  tosu<unsigned int>(__GNUC_MINOR__,pos,l);pos += l;
  tosu<unsigned int>(__GNUC_PATCHLEVEL__,pos,l);pos += l;
#elif defined(_MSC_VER)
  *pos = '_';pos++;
  tosu<unsigned int>(_MSC_VER,pos,l);pos += l;  
  //_mfc_
  //tosu<unsigned int>(_MFC_VER,pos,l);pos += l;
#elif defined(__alpha)
#else
#endif
  *pos = 0;
}

}

#endif
