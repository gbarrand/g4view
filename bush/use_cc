# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

cc_compiler=cc_not_defined

ccflags=
mflags=
cc_linker_flags=

if [ ${build_gnu} = "yes" ] ; then
  config_name=gnu
  if [ `uname` = Darwin ] ; then
    osx_vers="`sw_vers -productVersion`"
    if [ "`echo ${osx_vers} | sed -e 's:10.6::g'`" != "${osx_vers}" ] ; then # old screenwall macs.
      cc_compiler=/opt/local/bin/gcc-mp-4.8
      cc_linker=/opt/local/bin/gcc-mp-4.8
    elif [ "`echo ${osx_vers} | sed -e 's:10.9::g'`" != "${osx_vers}" ] ; then
      cc_compiler=/opt/local/bin/gcc-mp-4.8
      cc_linker=/opt/local/bin/gcc-mp-4.8
    elif [ "`echo ${osx_vers} | sed -e 's:10.12::g'`" != "${osx_vers}" ] ; then
      cc_compiler=/opt/local/bin/gcc-mp-5
      cc_linker=/opt/local/bin/gcc-mp-5
    else
      echo 'bush/use_cc : gcc not found under /opt/local/bin.'
      exit
    fi
  else
    cc_compiler=gcc
    cc_linker=gcc
  fi

elif [ ${build_intel} = "yes" ] ; then
  config_name=intel
  cc_compiler=icc
  cc_linker=icc

elif [ ${build_clang} = "yes" ] ; then
  config_name=clang
  
  found=no
  items="clang clang-3.9 clang-3.5 clang-3.4 clang-3.3"
  for item in ${items} ; do
    ${bush_home}/check_app ${item}
    use_status=$?;
    if [ ${use_status} = 0 ] ; then
      cc_compiler=${item}
      cc_linker=${item}
      found=yes
      break
    fi
  done

  if [ ${found} = no ] ; then
    echo "${items} not found."
    exit
  fi

elif [ ${build_sdk_mac} = "yes" -o ${build_sdk_mac_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk macosx -configuration Release build

  if [ ${build_sdk_mac} = "yes" ] ; then
    config_name=sdk_mac
    cc_compiler=clang
    cc_linker=clang
  else
    config_name=sdk_mac_gnu
    cc_compiler=gcc
    cc_linker=gcc
  fi

  osx_vers="`sw_vers -productVersion`"
  if [ "`echo ${osx_vers} | sed -e 's:10.6::g'`" != "${osx_vers}" ] ; then # old screenwall macs.
    macosx_sdk="/Developer/SDKs/MacOSX10.6.sdk"
    if [ ! -d "${macosx_sdk}" ] ; then
      echo "bush/use_cc : MacOSX.sdk sdk not found at ${macosx_sdk}."
      exit
    fi
  else
    macosx_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
  fi

 #macosx_target=10.6  # old screenwall macs.
  macosx_target=10.5  # old mac

  ccflags="${ccflags} -isysroot ${macosx_sdk}"
  ccflags="${ccflags} -mmacosx-version-min=${macosx_target}"

  cc_linker_flags="${cc_linker_flags} -isysroot ${macosx_sdk}"

  if [ `uname -p` = x86_64 ] ; then
    ccflags="${ccflags} -arch x86_64"
    cc_linker_flags="${cc_linker_flags} -arch x86_64"
  fi

  #LANG=en_US.US-ASCII
  #export LANG

  MACOSX_DEPLOYMENT_TARGET=${macosx_target}
  export MACOSX_DEPLOYMENT_TARGET

elif [ ${build_cling_clang} = "yes" ] ; then
  config_name=cling_clang

  . ${bush_home}/use_cling
  
  if [ "${cling_home}" = "" ] ; then
    echo "bush/use_cc : cling_home not defined."
    exit
  fi
  
  if [ ${build_verbose} = yes ] ; then
    echo "bush/use_cc : cling_home is ${cling_home}."
  fi

  cc_compiler=${cling_home}/bin/clang
  cc_linker=${cpp_compiler}
  
elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_ios_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk iphoneos -configuration Release build

  if [ ${build_sdk_ios} = "yes" ] ; then
    config_name=sdk_ios
    cc_compiler=clang
    cc_linker=clang
  else
    config_name=sdk_ios_gnu
    cc_compiler=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-gcc-4.2
    cc_linker=${cc_compiler}
  fi

  # see also use_cpp :
  #sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs /Developer/SDKs"
  #sdk_verss="10.0 9.3 9.0 8.1 7.1 5.0"
  #found=no
  #for sdk_dir in ${sdk_dirs} ; do
  #  for sdk_vers in ${sdk_verss} ; do
  #    if [ ${found} = no ] ; then
  #      ios_sdk="${sdk_dir}/iPhoneOS${sdk_vers}.sdk"
  #      ios_vers=${sdk_vers}
  #     if [ -d "${ios_sdk}" ] ; then found=yes;fi
  #   fi
  # done
  #done
  #if [ ${found} = no ] ; then
  #  echo "bush/use_cc : iOS sdk not found."
  #  exit
  #fi
  #echo "${ios_sdk}"
  #echo "${ios_vers}"
  #exit

  ios_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"
  if [ ! -d "${ios_sdk}" ] ; then
    echo "bush/use_cc : iPhoneOS.sdk not found at ${ios_sdk}."
    exit
  fi

  ios_target=3.2

  # NOTE : have all known arch of Xcode to be able to link ioda with libourex_CoinGL.a from Xcode.
  archs="-arch arm64 -arch armv7 -arch armv7s"

  ccflags="${ccflags} ${archs} -pipe -isysroot ${ios_sdk}"

  cc_linker_flags="${cc_linker_flags} ${archs} -isysroot ${ios_sdk}"
  cc_linker_flags="${cc_linker_flags} -miphoneos-version-min=${ios_target}"

  ccflags="${ccflags} -miphoneos-version-min=${ios_target}"

  # NOTE : to link ioda with libourex_CoinGL.a from Xcode :
  ccflags="${ccflags} -fembed-bitcode"

  # the below is to stay consistent with use_cpp :
  ccflags="${ccflags} -fvisibility=hidden"

 #ccflags="${ccflags} -gdwarf-2 -mno-thumb" 
 #ccflags="${ccflags} -Os"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

  LANG=en_US.US-ASCII
  export LANG

  IPHONEOS_DEPLOYMENT_TARGET=${ios_target}
  export IPHONEOS_DEPLOYMENT_TARGET

elif [ ${build_sdk_iossim} = "yes" ] ; then
  config_name=sdk_iossim
  cc_compiler=clang
  cc_linker=clang

  ios_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk"
  if [ ! -e "${ios_sdk}" ] ; then
    echo 'bush/use_cc : iPhoneSimulator sdk not found at ${ios_sdk}.'
    exit
  fi

  ios_target=5.0

  ccflags="${ccflags} -arch i386 -pipe -isysroot ${ios_sdk}"

  cc_linker_flags="${cc_linker_flags} -arch i386 -isysroot ${ios_sdk}"
  cc_linker_flags="${cc_linker_flags} -miphoneos-version-min=${ios_target}"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"
  ccflags="${ccflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"

elif [ ${build_visual} = "yes" ] ; then
  config_name=visual

  if [ "${bush_home}" = "" ] ; then
    echo "bush/use_cc : build_visual : bush_home not defined."
    exit
  fi
  cc_compiler=${bush_home}/vc++

  if [ "${build_set_x}" = "yes" ] ; then ccflags="${ccflags} -verbose"; fi

  cc_linker=${bush_home}/vc++

  if [ "${build_set_x}" = "yes" ] ; then cc_linker_flags="${cc_linker_flags} -verbose"; fi

elif [ ${build_sdk_android} = "yes" ] ; then
  config_name=sdk_android

  sdk_home=/usr/local/Android/android-sdk_r16-macosx

  # WARNING : must be in sync with use_cpp, plugin, use/Android.

 #build_ndk_vers=r15b
  build_ndk_vers=r7
  build_ndk_vers=r10e
  
  ndk_home=/usr/local/Android/android-ndk-${build_ndk_vers}

  if [ ${build_ndk_vers} = r7 ] ; then
    ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin
    ndk_platform="${ndk_home}/platforms/android-9/arch-arm"
  elif [ ${build_ndk_vers} = r10e ] ; then
    ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.8/prebuilt/darwin-x86_64/bin
    ndk_platform="${ndk_home}/platforms/android-9/arch-arm"
  else
    echo "bush/use_cc : ndk version ${build_ndk_vers} not yet supported."
    exit
  fi    

  cc_compiler=${ndk_bin}/arm-linux-androideabi-gcc

 #ccflags="${ccflags} -MMD -MP -MF <some .d path>"
 #ccflags="${ccflags} -O2 -DNDEBUG -g"
 #ccflags="${ccflags} -Ijni"
 #ccflags="${ccflags} -I${ndk_home}/sources/cxx-stl/system/include"

  if [ ${build_ndk_vers} = r7 ] ; then
    ccflags="${ccflags} -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__"
    ccflags="${ccflags} -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__"
  fi
  
  ccflags="${ccflags} -fpic"
  ccflags="${ccflags} -ffunction-sections -funwind-tables -fstack-protector"
  ccflags="${ccflags} -fomit-frame-pointer -fno-strict-aliasing"
  ccflags="${ccflags} -finline-limit=64"
  
  ccflags="${ccflags} -mthumb"
  ccflags="${ccflags} -Os"
  ccflags="${ccflags} -march=armv5te -mtune=xscale -msoft-float"

  ccflags="${ccflags} -Wno-psabi -Wa,--noexecstack"
  
  ccflags="${ccflags} -I${ndk_platform}/usr/include"
  
  ccflags="${ccflags} -DANDROID"

  if [ ${build_ndk_vers} = r10e ] ; then
    ccflags="${ccflags} -no-canonical-prefixes -Wformat -Werror=format-security"
  fi
  
  cc_linker=${cc_compiler}

else
  echo 'bush/use_cc : no compiler given.'
  exit
fi

if [ ${build_visual} = "yes" ] ; then

  if [ ${build_debug} = "yes" ] ; then
    ccflags="${ccflags} -g"
    cc_linker_flags="${cc_linker_flags} -g"
  else    
    ccflags="${ccflags} -DNDEBUG"
  fi

else

  if [ ${build_debug} = "yes" ] ; then
    ccflags="${ccflags} -g"
  else
    ccflags="${ccflags} -O2"
    ccflags="${ccflags} -DNDEBUG"
  fi

  if [ ${build_m32} = yes ] ; then ccflags="${ccflags} -m32"; fi

fi

# NOTE : if not using plugin at all -fPIC is not needed,
#        but we have some in osc software.
if [ `uname` = "Linux" ] ; then ccflags="${ccflags} -fPIC";fi

ccflags0="${ccflags}"
