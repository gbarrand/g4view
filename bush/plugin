# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# to be sourced from another build script.

if [ "${plugin}" = "" ] ; then
  echo "bush/plugin : variable plugin not defined."
  exit
fi

if [ "${objs}" = "" ] ; then
  echo "bush/plugin : no objs."
else

  if [ ${build_visual} = "yes" ] ; then

    file_o="${build_path}/${plugin}.o"
    file_a="${build_path}/${plugin}.a"
    file_symbs="${build_path}/${plugin}.symbs"
    file_def="${build_path}/${plugin}.def"
    file_lib="${build_path}/${plugin}.lib"
    file_exp="${build_path}/${plugin}.exp"

    file_plugin="${build_path}/${plugin}.dll"

    lib.exe /nologo /out:${file_a} ${objs}

    # Build the windef.exe utility program :
    /bin/cp ${bush_home}/visual/windef.c ./tmp_windef.c
    ${bush_home}/vc++ -c -o ./windef.o ./tmp_windef.c
    ${bush_home}/vc++ -o ./windef.exe ./windef.o
    /bin/rm -f ./windef.o ./tmp_windef.c

    # Building the .def file :
    /bin/rm -f ./dumpbin_exe_tmp
    eval dumpbin.exe /symbols /out:${file_symbs} ${file_a} > ./dumpbin_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./dumpbin_exe_tmp;/bin/rm -f ./dumpbin_exe_tmp;exit ${use_status}; fi

    ./windef.exe ${plugin} ${file_symbs} > ${file_def}

    # It produces a .exp file.
    /bin/rm -f ./lib_exe_tmp
    eval lib.exe /nologo /out:${file_lib} /def:${file_def} > ./lib_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./lib_exe_tmp;/bin/rm -f ./lib_exe_tmp;exit ${use_status}; fi

    # Building the dynamically loadable library (dll) :
    eval ${cpp_linker} ${cpp_linker_flags} -dll -o ${file_plugin} ${file_exp} ${file_a} ${libs}

    if [ ${build_keep_symbs} = no ] ; then
      /bin/rm -f ${file_symbs} ${file_def} ${file_exp}
      /bin/rm -f ${file_a} ${file_lib}
    fi	
    /bin/rm -f ${file_o}
    /bin/rm -f windef.exe windef.obj windef.exe.manifest

  else

    if [ ${build_sdk_android} = "yes" ] ; then

      if [ "${ndk_home}" = "" ] ; then
        echo "bush/plugin : ndk_home not set."
        exit
      fi

      pgflags="${pgflags} -Wl,-soname,${plugin}.so"
      pgflags="${pgflags} ${ndk_pgflags}"
      libs="${libs} ${ndk_libs}"

    elif [ `uname` = Darwin ] ; then
      pgflags="${pgflags} -bundle -twolevel_namespace"
      pgflags="${pgflags} -Wl,-headerpad_max_install_names -Wl,-headerpad,800"

    else
      pgflags="${pgflags} -shared"
    fi

    if [ ${build_m32} = yes ] ; then
      pgflags="${pgflags} -m32"
    fi

    /bin/mkdir -p ${build_path}

    file_plugin="${build_path}/${plugin}.${pgex}"
    /bin/rm -f ${file_plugin}
    if [ ${build_verbose} = yes ] ; then
      echo "bush/plugin : link ${file_plugin} ..."
    fi

    eval ${cpp_linker} ${pgflags} -o ${file_plugin} ${objs} ${libs}

  fi

  if [ "${pyname}" != "" ] ; then
    to="${build_path}/${pyname}.${pgpy}"
    if [ ${build_verbose} = yes ] ; then
      echo "bush/plugin : py : mv plugin to ${to} ..."
    fi
    if [ ${file_plugin} != ${to} ] ; then /bin/mv "${file_plugin}" "${to}"; fi
  fi

fi

