# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.
	
cpp_compiler=cpp_not_defined

cppflags=
mmflags=
cpp_linker_flags=
pch_cpp_flags=

# NOTE : is adding a compiler, think to update the inlib/os compiler() function.

if [ ${build_gnu} = "yes" -a ${build_sdk_android} = yes ] ; then build_gnu=no;fi

if [ ${build_gnu} = "yes" ] ; then
  config_name=gnu
  if [ `uname` = Darwin ] ; then
    osx_vers="`sw_vers -productVersion`"
    if [ "`echo ${osx_vers} | sed -e 's:10.6::g'`" != "${osx_vers}" ] ; then # old screenwall macs.
      #cpp_compiler=g++
      #cpp_linker=g++
      # NOTE : the below compiler does not pass main.mm. But it permits to pass pure c++ app (or X11 ones).
      cpp_compiler=/opt/local/bin/g++-mp-4.8
      cpp_linker=/opt/local/bin/g++-mp-4.8
    elif [ "`echo ${osx_vers} | sed -e 's:10.9::g'`" != "${osx_vers}" ] ; then
      cpp_compiler=/opt/local/bin/g++-mp-4.8
      cpp_linker=/opt/local/bin/g++-mp-4.8
    elif [ "`echo ${osx_vers} | sed -e 's:10.12::g'`" != "${osx_vers}" ] ; then
      cpp_compiler=/opt/local/bin/g++-mp-5
      cpp_linker=/opt/local/bin/g++-mp-5
    else
      echo 'bush/use_cpp : g++ not found under /opt/local/bin.'
      exit
    fi
  else
    cpp_compiler=g++
    cpp_linker=g++
  fi

  if [ ${build_cxx11} = "yes" ] ; then
    cppflags="${cppflags} -std=c++11"
  fi

elif [ ${build_intel} = "yes" ] ; then
  config_name=intel
  cpp_compiler=icpc
  cpp_linker=icpc

elif [ ${build_clang} = "yes" ] ; then
  config_name=clang

  found=no
  items="clang++ clang++-3.9 clang++-3.5 clang++-3.4 clang++-3.3"
  for item in ${items} ; do
    ${bush_home}/check_app ${item}
    use_status=$?;
    if [ ${use_status} = 0 ] ; then
      cpp_compiler=${item}
      cpp_linker=${item}
      found=yes
      break
    fi
  done
  
  if [ ${found} = no ] ; then
    echo "${items} not found."
    exit
  fi

 #cppflags="${cppflags} -std=c++98"
 #cppflags="${cppflags} -ansi"
  
  if [ ${build_cxx11} = "yes" ] ; then
    cppflags="${cppflags} -std=c++11"
   #cppflags="${cppflags} -stdlib=libc++"
   
    if [ "`uname -n | grep iridium`" != "" ] ; then
      cppflags="${cppflags} -I/usr/include/c++/v1"
      cpp_linker_flags="${cpp_linker_flags} /usr/lib64/libc++.so"
    fi    
  fi

elif [ ${build_cling_clang} = "yes" ] ; then
  config_name=cling_clang

  . ${bush_home}/use_cling
  
  if [ "${cling_home}" = "" ] ; then
    echo "bush/use_cpp : cling_home not defined."
    exit
  fi
  
  if [ ${build_verbose} = yes ] ; then
    echo "bush/use_cpp : cling_home is ${cling_home}."
  fi
  
  cpp_compiler=${cling_home}/bin/clang++
  cpp_linker=${cpp_compiler}
  
  if [ ${build_cxx11} = "yes" ] ; then
    cppflags="${cppflags} -std=c++11"
   #cppflags="${cppflags} -stdlib=libc++"
  fi

elif [ ${build_sdk_mac} = "yes" -o ${build_sdk_mac_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk macosx -configuration Release build

  if [ ${build_sdk_mac} = "yes" ] ; then
    config_name=sdk_mac
    cpp_compiler=clang++
    cpp_linker=clang++
    if [ ${build_cxx11} = "yes" ] ; then
      cppflags="${cppflags} -std=c++11 -stdlib=libc++"
    fi
  else
    config_name=sdk_mac_gnu
    cpp_compiler=g++
    cpp_linker=g++
    if [ ${build_cxx11} = "yes" ] ; then
      cppflags="${cppflags} -std=c++11"
    fi
    #Darwin : NOTE : we need a g++ knowing also objective-c++. /opt/local/bin/g++-mp-4.8 does not work.
  fi
 
  # 10.5  : Leopard
  # 10.6  : Snow Leopard
  # 10.7  : Lion
  # 10.8  : Mountain Lion
  # 10.9  : Mavericks
  # 10.10 : Yosemite
  # 10.11 : ElCapitan
  # 10.12 : Sierra

  # see also use_cc :
  #sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs /Developer/SDKs"
  #sdk_verss="10.12 10.11 10.9 10.8 10.6 10.5"
  #found=no
  #for sdk_dir in ${sdk_dirs} ; do
  #  for sdk_vers in ${sdk_verss} ; do
  #    if [ ${found} = no ] ; then
  #      macosx_sdk="${sdk_dir}/MacOSX${sdk_vers}.sdk"
  #      macosx_vers=${sdk_vers}
  #      if [ -d "${macosx_sdk}" ] ; then found=yes;fi
  #    fi
  #  done
  #done
  #if [ ${found} = no ] ; then
  #  echo "bush/use_cpp : MacOSX sdk not found."
  #  exit
  #fi
  #echo "${macosx_sdk}"
  #echo "${macosx_vers}"

  osx_vers="`sw_vers -productVersion`"
  if [ "`echo ${osx_vers} | sed -e 's:10.6::g'`" != "${osx_vers}" ] ; then # old screenwall macs.
    macosx_sdk="/Developer/SDKs/MacOSX10.6.sdk"
    if [ ! -d "${macosx_sdk}" ] ; then
      echo "bush/use_cpp : MacOSX.sdk sdk not found at ${macosx_sdk}."
      exit
    fi
  else
    macosx_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
  fi

  if [ ${build_cxx11} = "yes" ] ; then
    #macosx_target=10.7
    # Xcode-8 : to avoid warning :
    #  clang: warning: libstdc++ is deprecated; move to libc++ with a minimum deployment target of OS X 10.9
    macosx_target=10.9
    # Xcode-8 : end.
  else 
    if [ "`echo ${osx_vers} | sed -e 's:10.6::g'`" != "${osx_vers}" ] ; then # old screenwall macs.
     #macosx_target=10.6  
      macosx_target=10.5
    else
      # Xcode-8 : to avoid warning :
      #  clang: warning: libstdc++ is deprecated; move to libc++ with a minimum deployment target of OS X 10.9
      macosx_target=10.9
      cppflags="${cppflags} -stdlib=libc++"
      # Xcode-8 : end.
    fi
  fi

  if [ "${build_macosx_target}" != "" ] ; then
    macosx_target=${build_macosx_target}  # used in MEMPHYS/mgr/build_app_vis.
  fi
  
  cppflags="${cppflags} -isysroot ${macosx_sdk}"
  cppflags="${cppflags} -mmacosx-version-min=${macosx_target}"

  cpp_linker_flags="${cpp_linker_flags} -isysroot ${macosx_sdk}"

  if [ `uname -p` = x86_64 ] ; then
    cppflags="${cppflags} -arch x86_64"
    cpp_linker_flags="${cpp_linker_flags} -arch x86_64"
  fi

  #LANG=en_US.US-ASCII
  #export LANG

  MACOSX_DEPLOYMENT_TARGET=${macosx_target}
  export MACOSX_DEPLOYMENT_TARGET

elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_ios_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk iphoneos -configuration Release build

  if [ ${build_sdk_ios} = "yes" ] ; then
    config_name=sdk_ios
    cpp_compiler=clang++
    cpp_linker=clang++
    # for ioda, to avoid the "out of range problem" :
    cppflags="${cppflags} -mno-thumb" 
    if [ ${build_cxx11} = "yes" ] ; then
      cppflags="${cppflags} -std=c++11 -stdlib=libc++"
    fi
  else
    config_name=sdk_ios_gnu
    cpp_compiler=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-g++-4.2
    cpp_linker=${cpp_compiler}
    if [ ${build_cxx11} = "yes" ] ; then
      cppflags="${cppflags} -std=c++11"
    fi
  fi

  # see also use_cc :
  #sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs /Developer/SDKs"
  #sdk_verss="10.0 9.3 9.0 8.1 7.1 5.0"
  #found=no
  #for sdk_dir in ${sdk_dirs} ; do
  #  for sdk_vers in ${sdk_verss} ; do
  #    if [ ${found} = no ] ; then
  #      ios_sdk="${sdk_dir}/iPhoneOS${sdk_vers}.sdk"
  #      ios_vers=${sdk_vers}
  #      if [ -d "${ios_sdk}" ] ; then found=yes;fi
  #    fi
  #  done
  #done
  #if [ ${found} = no ] ; then
  #  echo "bush/use_cpp : iOS sdk not found."
  #  exit
  #fi
  #echo "${ios_sdk}"
  #echo "${ios_vers}"
  #exit

  ios_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"
  if [ ! -d "${ios_sdk}" ] ; then
    echo "bush/use_cpp : iPhoneOS.sdk not found at ${ios_sdk}."
    exit
  fi

 #ios_target=3.2
 #ios_target=5.0   # for -stdlib=libc++
  ios_target=7.0   # for -stdlib=libc++ on MEMPHYS.

  # NOTE : have all known arch of Xcode to be able to link ioda with libourex_CoinGL.a from Xcode.
  archs="-arch arm64 -arch armv7 -arch armv7s"

  cppflags="${cppflags} ${archs} -pipe -isysroot ${ios_sdk}"

  cpp_linker_flags="${cpp_linker_flags} ${archs} -isysroot ${ios_sdk}"
  cpp_linker_flags="${cpp_linker_flags} -miphoneos-version-min=${ios_target}"

  cppflags="${cppflags} -miphoneos-version-min=${ios_target}"

  # NOTE : to link ioda with libourex_CoinGL.a from Xcode :
  cppflags="${cppflags} -fembed-bitcode"

  # the below is to quiet warnings when linking ioda with ourex/SOPHYA :
  #   ld: warning: direct access <blabla> means the weak symbol cannot be overridden at runtime.
  #   This was likely caused by different translation units being compiled with different visibility settings.
  cppflags="${cppflags} -fvisibility=hidden"

 #cppflags="${cppflags} -gdwarf-2 -mno-thumb" 
 #cppflags="${cppflags} -Os"

 #cppflags="${cppflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"
 #cppflags="${cppflags} -Wno-trigraphs -Wreturn-type -Wunused-variable"
 #cppflags="${cppflags} -fmessage-length=0 -fpascal-strings"
 #cppflags="${cppflags} -fexceptions -fasm-blocks -fvisibility=hidden"
 #cppflags="${cppflags} -fvisibility-inlines-hidden"
 #cppflags="${cppflags} -gdwarf-2"

  mmflags="${mmflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

  LANG=en_US.US-ASCII
  export LANG

  IPHONEOS_DEPLOYMENT_TARGET=${ios_target}
  export IPHONEOS_DEPLOYMENT_TARGET

elif [ ${build_sdk_iossim} = "yes" ] ; then
  config_name=sdk_iossim
  cpp_compiler=clang++
  cpp_linker=clang++

  ios_sdk="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk"
  if [ ! -e "${ios_sdk}" ] ; then
    echo 'bush/use_cpp : iPhoneSimulator sdk not found at ${ios_sdk}.'
    exit
  fi

  ios_target=5.0

  cppflags="${cppflags} -arch i386 -pipe -isysroot ${ios_sdk}"

  cpp_linker_flags="${cpp_linker_flags} -arch i386 -isysroot ${ios_sdk}"

  cppflags="${cppflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"
  mmflags="${mmflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

#  MACOSX_DEPLOYMENT_TARGET=10.6
#  export MACOSX_DEPLOYMENT_TARGET
#  cpp_linker_flags="${cpp_linker_flags} -mmacosx-version-min=10.6"
#  cpp_linker_flags="${cpp_linker_flags} -miphoneos-version-min=${ios_target}"
#  cpp_linker_flags="${cpp_linker_flags} -Xlinker -objc_abi_version -Xlinker 2"

elif [ ${build_visual} = "yes" ] ; then
  config_name=visual

  if [ "${bush_home}" = "" ] ; then
    echo "bush/use_cpp : build_visual : bush_home not defined."
    exit
  fi
  cpp_compiler=${bush_home}/vc++

  if [ "${build_set_x}" = "yes" ] ; then cppflags="${cppflags} -verbose"; fi

  cpp_linker=${bush_home}/vc++

  if [ "${build_set_x}" = "yes" ] ; then cpp_linker_flags="${cpp_linker_flags} -verbose"; fi

elif [ ${build_sdk_android} = "yes" ] ; then
  config_name=sdk_android

  sdk_home=/usr/local/Android/android-sdk_r16-macosx
  
  # WARNING : must be in sync with use_cc, plugin, use/Android.

 #build_ndk_vers=r15b
 #build_ndk_vers=r7
  build_ndk_vers=r10e
  
  if [ ${build_verbose} = yes ] ; then
    echo "bush/use_cpp : ndk version is ${build_ndk_vers}."
  fi
  
  ndk_home=/usr/local/Android/android-ndk-${build_ndk_vers}

  if [ ${build_ndk_vers} = r7 ] ; then
    ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin
    ndk_platform="${ndk_home}/platforms/android-9/arch-arm"
  elif [ ${build_ndk_vers} = r10e ] ; then
    ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.8/prebuilt/darwin-x86_64/bin
    ndk_platform="${ndk_home}/platforms/android-9/arch-arm"
  else
    echo "bush/use_cpp : ndk version ${build_ndk_vers} not yet supported."
    exit
  fi    

  cpp_compiler=${ndk_bin}/arm-linux-androideabi-g++
  
  if [ ${build_cxx11} = "yes" ] ; then
    cppflags="${cppflags} -std=c++11"
  fi

 #if [ ${build_cxx11} = "yes" ] ; then
 #  cppflags="${cppflags} -std=c++11"
 #fi
    
  # same options as use_cc/ccflags :
  if [ ${build_ndk_vers} = r7 ] ; then
    cppflags="${cppflags} -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__"
    cppflags="${cppflags} -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__"
  fi
  
  cppflags="${cppflags} -fpic"
  cppflags="${cppflags} -ffunction-sections -funwind-tables -fstack-protector"
  cppflags="${cppflags} -fomit-frame-pointer -fno-strict-aliasing"
  cppflags="${cppflags} -finline-limit=64"
  
  cppflags="${cppflags} -mthumb"
  cppflags="${cppflags} -Os"
  cppflags="${cppflags} -march=armv5te -mtune=xscale -msoft-float"
  
  cppflags="${cppflags} -Wno-psabi -Wa,--noexecstack"
  
  cppflags="${cppflags} -I${ndk_platform}/usr/include"

  cppflags="${cppflags} -DANDROID"

  if [ ${build_ndk_vers} = r10e ] ; then
    cppflags="${cppflags} -no-canonical-prefixes -Wformat -Werror=format-security"
  fi
  
  # c++ flags :
  #cppflags="${cppflags} -fno-exceptions -fno-rtti"
  if [ ${build_ndk_vers} = r7 ] ; then
    cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/include"
    cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include"
  elif [ ${build_ndk_vers} = r10e ] ; then
    cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/4.8/include"
    cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi/include"
    cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/4.8/include/backward"
  fi

  cpp_linker=${cpp_compiler}

else
  echo 'bush/use_cpp : no compiler given.'
  exit
fi

# NOTE : if not using plugin at all -fPIC is not needed,
#        but we have some in osc software.
if [ `uname` = "Linux" ] ; then cppflags="${cppflags} -fPIC";fi

if [ ${build_visual} = "yes" ] ; then

  if [ ${build_debug} = "yes" ] ; then
    cppflags="${cppflags} -g"
    cpp_linker_flags="${cpp_linker_flags} -g"
  else
    cppflags="${cppflags} -DNDEBUG"
  fi

else

  if [ ${build_debug} = "yes" ] ; then
    cppflags="${cppflags} -g"
  else
    cppflags="${cppflags} -O2"
   #cppflags="${cppflags} -Os"
    cppflags="${cppflags} -DNDEBUG"
  fi

  if [ ${build_m32} = yes ] ; then cppflags="${cppflags} -m32"; fi

fi

if [ ${build_mem} = "yes" ] ; then cppflags="${cppflags} -DINLIB_MEM"; fi
if [ ${build_mem_atexit} = "yes" ] ; then cppflags="${cppflags} -DINLIB_MEM_ATEXIT"; fi

#///////////////////////////////////////////////////////////
#/// G4 flags //////////////////////////////////////////////
#///////////////////////////////////////////////////////////

G4_cppflags=
if [ ${build_visual} = "yes" ] ; then
  echo dummy > /dev/null

elif [ ${build_intel} = "yes" ] ; then
  G4_cppflags="-ansi -Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_clang} = "yes" ] ; then
  G4_cppflags="-Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_iossim} = "yes" ] ; then
  G4_cppflags="-Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_sdk_android} = "yes" ] ; then
  echo dummy > /dev/null

else

  if [ ${build_cxx11} = "yes" ] ; then
    G4_cppflags="-W -Wall -pedantic -Wno-non-virtual-dtor -Wno-long-long -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
  else
    G4_cppflags="-W -Wall -ansi -pedantic -Wno-non-virtual-dtor -Wno-long-long -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
    G4_cppflags="${G4_cppflags} -Wshadow"
  fi
  
fi

if [ ${build_g4flags} = "yes" ] ; then
  cppflags="${G4_cppflags} ${cppflags}"
fi

#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////

cppflags0="${cppflags}"
