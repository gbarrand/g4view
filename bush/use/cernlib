# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

# beurk, beurk, beurk

build_use_not_our_cernlib=yes

if [ "${use_cernlib}" = "yes" ] ; then
if [ "${build_use_not_our_cernlib}" = "yes" ] ; then
  use_sys_cernlib=yes
  use_our_cernlib=no
else
  use_sys_cernlib=no
  use_our_cernlib=yes
fi
fi

if [ "${use_sys_cernlib}" = "yes" ] ; then

  # NOTE : g2c is needed if linking with a mix of something (cernlib?)
  #        compiled with g77 and something compiled with gfortran.


  if [ "`uname -n | grep lxplus`" != "" ] ; then on_lxplus=yes;else on_lxplus=no;fi
  if [ "`uname -n | grep lal.in2p3.fr | grep lx`" != "" ] ; then on_lal_lx=yes;else on_lal_lx=no; fi
  if [ "`uname -n | grep lal.in2p3.fr | grep nemo`" != "" ] ; then on_lal_lx=yes;fi
  if [ "`uname -n`" = pc-89182.lal.in2p3.fr ] ; then on_lal_pc_pano=yes;else on_lal_pc_pano=no;fi
  if [ "`uname -n`" = "clrlsstweb.in2p3.fr" ] ; then on_clrlsst=yes;else on_clrlsst=no; fi

  # for nemoview with 32 bits cernlibs :
  if [ "`uname -n`" = "mac-76071.lal.in2p3.fr" ] ; then on_maca=yes;else on_maca=no; fi
  if [ "`uname -n`" = "mbp-barrand2.lal.in2p3.fr" ] ; then on_mac_lal=yes;else on_mac_lal=no; fi
#  if [ "`uname -n`" = "Guys-MacBook-Pro.local" ] ; then on_mac_local=yes;else on_mac_local=no; fi

  on_lal_ubuntu_VirtualBox=no
  if [ "`uname -n`" = ubuntu-VirtualBox ] ; then
    on_lal_ubuntu_VirtualBox=yes
  fi

  cernlib_home=
  no_shift=_noshift
  cernlib_osx_i386=no

  if [ "`uname | grep CYGWIN`" != "" ] ; then

    f77_libs="${f77_libs} /libpath:'C:\cern\pro\lib' packlib.lib advapi32.lib ws2_32.lib"

  elif [ "`uname -r | grep Microsoft`" != "" ] ; then
    f77_libs="${f77_libs} /libpath:'C:\cern\pro\lib' packlib.lib advapi32.lib ws2_32.lib"

  elif [ ${on_maca} = "yes" -o ${on_mac_lal} = yes ] ; then
    no_shift=
    cernlib_home=/cern/pro
    f77_for_C_libs="${f77libs}"
    f77_end_libs="/opt/local/lib/gcc48/libgfortran.dylib"
    linker_flags="${linker_flags} -arch i386"
    # -gdwarf-2 to suppress the "N_GSYM stabs" ld warnings ?
    #linker_flags="${linker_flags} -gdwarf-2"
    cernlib_osx_i386=yes

  elif [ `uname` = Darwin ] ; then

    no_shift=

    if [ "`sysctl hw.optional.x86_64 | grep 1`" != "" ] ; then
      # May 2011 : we don't have cernlib on 64 bits intel machines.
      echo "bush/use/cernlib :"
      echo " We don't have cernlib on Mac 64 bits machines."
      echo " We try to use ourex/hbook/hdummy.c."

      #cernlib_cflags="-m32"

      if [ "${ourex_home}" = "" ] ; then ourex_home=${bush_home}/../inexlib/ourex;fi

      obj="hdummy.o"
      eval ${cc_compiler} -c ${ccflags0} ${cernlib_cflags} -o ${obj} ${ourex_home}/hbook/hdummy.c

      objs="${objs} ${obj}"
      f77_objs="${f77_objs} ${obj}"

    else
      if [ ! -d /cern/pro/lib ] ; then
        echo "bush/use/cernlib :"
        echo " You don't have cernlib under /cern/pro/lib."
        echo " If you have them elsewhere, change bush/use/cernlib."
        exit
      else
        cernlib_home=/cern/pro
      fi
    fi
    f77_for_C_libs="${f77libs}"

  elif [ ${on_lxplus} = "yes" ] ; then
    cernlib_home=/afs/cern.ch/sw/lcg/external/cernlib/2006a/x86_64-slc5-gcc43-opt
    f77_for_C_libs="-lcrypt /usr/lib64/libg2c.so.0.0.0"
    f77_end_libs="/usr/lib64/libgfortran.so.3.0.0"

  elif [ ${on_clrlsst} = "yes" ] ; then
    cernlib_home=/home/barrand/usr/local/cernlib/2006b
    f77_end_libs="/usr/lib64/libgfortran.so.3.0.0"

  elif [ ${on_lal_lx} = "yes" ] ; then
    # for exlib/hbook/CHBOOK :
    cppflags="${cppflags} -DEXLIB_HBOOK_F2C_RET_DOUBLE"
    cppflags="${cppflags} -DINLIB_F2C_RET_DOUBLE"
    cernlib_home=/cern/pro/lib64
    f77_for_C_libs="-lcrypt /usr/lib64/libg2c.so.0.0.0"

  elif [ ${on_lal_pc_pano} = "yes" ] ; then
    cernlib_home=/cern/pro
    f77_end_libs="-lg2c"

  elif [ ${on_lal_ubuntu_VirtualBox} = "yes" ] ; then
    cernlib_home=/cern/pro
    #f77_for_C_libs="-lcrypt /usr/lib64/libg2c.so.0.0.0"
    f77_for_C_libs="-lcrypt /usr/lib/i386-linux-gnu/libgfortran.so.3.0.0"
    #f77_end_libs="/usr/lib/i386-linux-gnu/libgfortran.so.3.0.0"

 #elif [ "`uname -n`" = barrand-centos7.lal.in2p3.fr ] ; then
 #   cernlib_home=/cern/2004/lib64
 #   f77_for_C_libs="-lcrypt -l:libgfortran.so.3.0.0"

  else

    if [ -d /cern/pro/lib ] ; then
      cernlib_home=/cern/pro
    elif [ "${CERNLIB}" != "" ] ; then
      cernlib_home=${CERNLIB}
    else
      echo "bush/use/cernlib :"
      echo " You don't have cernlib under /cern/pro/lib"
      echo " and you don't have defined CERNLIB environment variable."
      echo " If you have them elsewhere, change bush/use/cernlib."
      exit
    fi

    if [ "${f77_compiler}" = "gfortran" ] ; then
      f77_for_C_libs="-lcrypt -lgfortran"
    fi

  fi

  if [ "${cernlib_home}" != "" ] ; then
    f77_libs="${f77_libs} -L${cernlib_home}/lib -lmathlib -lpacklib${no_shift}"
  fi

  f77_libs="${f77_libs} ${f77_end_libs}"

  # if linking from c/c++ :
  libs="${libs} ${f77_libs}"
  libs="${libs} ${f77_for_C_libs}"

fi

if [ "${use_our_cernlib}" = "yes" ] ; then
  if [ "${ourex_home}" = "" ] ; then
    echo 'bush/use/cernlib : variable ourex_home not defined.';exit
  fi
  cernlib_home=${ourex_home}/cernlib

#  cernlib_incs="-I${cernlib_home}/cxxtools/include"
#  cernlib_incs="${cernlib_incs} -I${cernlib_home}/cernlib/framework/common"
#  cppflags="${cppflags} ${cernlib_incs}"

  #//////////////////////////////////////////
  #//////////////////////////////////////////
  #//////////////////////////////////////////

  cernlib_build_dir="${cernlib_home}/${build_dir}"

  if [ ! -d ${cernlib_build_dir} ] ; then
    cernlib_old_dir=`pwd`
    cd ${cernlib_home}
    ./build ${ourex_args}
    cd ${cernlib_old_dir}
  fi

  if [ ! -d ${cernlib_build_dir} ] ; then
    echo "bush/use/cernlib : directory ${cernlib_build_dir} not found."
    exit
  fi

  if [ "${use_archive}" = "yes" ] ; then
    libs="${libs} ${cernlib_build_dir}/libourex_cernlib.a"
  else
    if [ ${build_visual} = "yes" ] ; then
      libs="${libs} ${cernlib_build_dir}/ourex_cernlib.lib"
    else
      libs="${libs} -L${cernlib_build_dir} -lourex_cernlib"
    fi
  fi

fi
