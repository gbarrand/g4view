// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_vec2d
#define inlib_vec2d

#include "vec2"
//#include "../S_STRING"
#include <cmath>

namespace inlib {

class vec2d : public vec2<double> {
  typedef vec2<double> parent;
//public:
//  INLIB_SCLASS(inlib::vec2d)
public:
  vec2d():parent(){}
  vec2d(const double a_vec[2]):parent(a_vec){}
  vec2d(double a0,double a1):parent(a0,a1){}
  virtual ~vec2d() {}
public:
  vec2d(const vec2d& a_from): parent(a_from){}
  vec2d& operator=(const vec2d& a_from){
    parent::operator=(a_from);
    return *this;
  }

  vec2d(const parent& a_from):parent(a_from){}

public: //operators
  vec2d operator*(double a_v) const {return vec2d(m_data[0]*a_v,m_data[1]*a_v);}
  vec2d operator+(const vec2d& a_v) const {return vec2d(m_data[0]+a_v.m_data[0],m_data[1]+a_v.m_data[1]);}
  vec2d operator-(const vec2d& a_v) const {return vec2d(m_data[0]-a_v.m_data[0],m_data[1]-a_v.m_data[1]);}

  vec2d& operator+=(const vec2d& a_v) {
    m_data[0] += a_v.m_data[0];
    m_data[1] += a_v.m_data[1];
    return *this;
  }
  vec2d& operator*=(double a_v) {
    m_data[0] *= a_v;
    m_data[1] *= a_v;
    return *this;
  }

  vec2d operator-() const {return vec2d(-m_data[0],-m_data[1]);}

public:
  double length() const {return parent::length(::sqrt);}
public: //iv2sg
  bool equals(const vec2d& a_v,const double a_epsil) const {
    //if(a_epsil<0.0f))
    double d0 = m_data[0]-a_v.m_data[0];
    double d1 = m_data[1]-a_v.m_data[1];
    return ((d0*d0+d1*d1)<=a_epsil);
  }
  void negate() {
    m_data[0] = -m_data[0];
    m_data[1] = -m_data[1];
  }

private:static void check_instantiation() {vec2d v(0,0);v.set_value(1,1);}
};

inline vec2d operator*(double a_f,const vec2d& a_v) {
  vec2d res(a_v);
  res *= a_f;
  return res;
}

}

/*
#include <vector>

namespace inlib {

#ifndef SWIG
//for sf, mf :
inline bool set_from_vec(vec2d& a_v,const std::vector<double>& a_sv) {
  if(a_sv.size()!=2) return false;
  a_v[0] = a_sv[0];
  a_v[1] = a_sv[1];
  return true;
}
#endif

}
*/

#endif
