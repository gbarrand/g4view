// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_write_bsg
#define inlib_sg_write_bsg

#include "write_action"
#include "node"
#include "strings" //s_node_end
#include "mf"

#include "../io/bwbuf"

#include "../platform"
#include "../version"
#include "../num2s"

#include <map>

namespace inlib {
namespace sg {

class write_bsg : public write_action {
  INLIB_ACTION(write_bsg,inlib::sg::write_bsg,write_action)
public:
  virtual io::iwbuf& buffer() {return m_buffer;}
  virtual bool beg_node(const node& a_node) {
    if(!m_buffer.write_cstr(a_node.s_cls().c_str())) return false;
    if(!m_buffer.write(a_node.cls_version())) return false;
    m_infos[a_node.s_cls()] = node_desc(a_node.s_cls(),a_node.cls_version(),a_node.node_desc_fields());
    return true;
  }
  virtual bool end_node(const node&) {
    return m_buffer.write_cstr(s_node_end().c_str());
  }
  virtual unsigned int protocol() const {return m_protocol;}
public:
  write_bsg(std::ostream& a_out)
  :parent(a_out)
  ,m_buffer(a_out,byte_swap())
  ,m_protocol(3)
  {}
  virtual ~write_bsg(){}
protected:
  write_bsg(const write_bsg& a_from)
  :parent(a_from)
  ,m_buffer(a_from.m_buffer)
  ,m_protocol(a_from.m_protocol)
  {}
  write_bsg& operator=(const write_bsg& a_from){
    parent::operator=(a_from);
    m_buffer = a_from.m_buffer;
    m_protocol = a_from.m_protocol;
    return *this;
  }
public:
  bool open_buffer() {
    m_infos.clear();
    m_buffer.reset_pos();
    if(!write_header(m_buffer,m_protocol)) {
      m_buffer.reset_pos();
      m_infos.clear();
      m_end_header_offset = 0;
      return false;
    }
    m_end_header_offset = m_buffer.length();
    uint64 pos_desc = 0; //not yet known, but we let a place holder.
    if(!m_buffer.write(pos_desc)) {
      m_buffer.reset_pos();
      m_infos.clear();
      m_end_header_offset = 0;
      return false;
    }
    return true;
  }

  bool close_buffer() {

/*
   {m_out << "debug : write_bsg::close_buffer :" << std::endl;
    inlib_mforcit(std::string,node_desc,m_infos,it) {
      m_out << "class : " << (*it).first << std::endl;
      inlib_vforcit(field_desc,(*it).second.fields(),it2) {
        m_out << "  field : " << (*it2).name()
              << " " << (*it2).cls()
              << " " << (*it2).offset()
              << std::endl;
      }
    }}
*/

    std::string stmp;
    mf_std_vec<std::string> fd;
    inlib_mforcit(std::string,node_desc,m_infos,it) {
      std::vector<std::string> infos;
      infos.push_back((*it).second.cls());
     {if(!num2s((*it).second.version(),stmp)) {}
      infos.push_back(stmp);}
     {if(!num2s((uint32)(*it).second.fields().size(),stmp)) {}
      infos.push_back(stmp);}
      inlib_vforcit(field_desc,(*it).second.fields(),it2) {
        infos.push_back((*it2).name());
        infos.push_back((*it2).cls());
     //{if(!num2s((*it2).offset(),stmp)) {} //protocol 2
       {if(!ptrdiff_t2s((field_desc::offset_t)0,stmp)) {} //protocol 3 : do not save offset which depends of the compiler.
        infos.push_back(stmp);}
      }
      fd.add(infos);
    }

    size_t pos_desc = m_buffer.length();
    m_buffer.set_at_offset(m_end_header_offset);
    if(!m_buffer.write((uint32)pos_desc)) {
      m_buffer.reset_pos();
      m_infos.clear();
      return false;
    }
    m_buffer.set_at_offset(pos_desc);

    // write node descs :
    if(!fd.write(m_buffer)) {
      m_buffer.reset_pos();
      m_infos.clear();
      return false;
    }

    m_infos.clear();
    return true;
  }

  bool write_file(const std::string& a_file) const {
    FILE* file = ::fopen(a_file.c_str(),"wb");
    if(!file) return false;
    if(m_buffer.length()) {
      size_t nitem =
        ::fwrite((char*)m_buffer.buf(),m_buffer.length(),(size_t)1,file);
      if(nitem!=1) {::fclose(file);return false;}
    }
    ::fclose(file);
    return true;
  }
protected:
  //do not swap on intel.
  static bool byte_swap() {return is_little_endian()?false:true;}

  static bool write_header(io::bwbuf& a_buffer,unsigned int a_protocol) {
    // write signature :
    if(!a_buffer.write((char)'i')) return false;
    if(!a_buffer.write((char)'n')) return false;
    if(!a_buffer.write((char)'e')) return false;
    if(!a_buffer.write((char)'x')) return false;
    if(!a_buffer.write((char)'b')) return false;
    if(!a_buffer.write((char)'s')) return false;
    if(!a_buffer.write((char)'g')) return false;

    // save byte swapping at production :
    if(!a_buffer.write(a_buffer.byte_swap())) return false;
    // save endianity at production :
    if(!a_buffer.write(is_little_endian())) return false;

    // write inlib version :
    if(!a_buffer.write(version())) return false;

    // write protocol version :
    if(!a_buffer.write(a_protocol)) return false;

    // protocol 2 :
    // save void* size (32/64 bits machine ?) :
   {uint32 size_void_star = (uint32)sizeof(void*);
    if(!a_buffer.write(size_void_star)) return false;}
    return true;
  }
protected:
  io::bwbuf m_buffer;
  std::map<std::string,node_desc> m_infos;
  unsigned int m_protocol;
  size_t m_end_header_offset;
};

}}

#endif
