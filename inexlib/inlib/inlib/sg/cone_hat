// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_cone_hat
#define inlib_sg_cone_hat

// could be used as filled cone if rmin=0.

#include "node"
#include "sf"
#include "render_action"
#include "pick_action"
#include "bbox_action"
#include "gstos"

#include "../mathf"

namespace inlib {
namespace sg {

class cone_hat : public node, public gstos {
  INLIB_NODE(cone_hat,inlib::sg::cone_hat,node)
public:
  sf<float> height;
  sf<float> rmin;
  sf<float> rmax;
  sf<float> angle; //rad
  sf<unsigned int> steps;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::cone_hat)
    static const desc_fields s_v(parent::node_desc_fields(),5, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(rmin),
      INLIB_ARG_FIELD_DESC(rmax),
      INLIB_ARG_FIELD_DESC(angle),
      INLIB_ARG_FIELD_DESC(steps)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&height);
    add_field(&rmin);
    add_field(&rmax);
    add_field(&angle);
    add_field(&steps);
  }
protected:
  typedef float* floatp;
protected: //gstos
  virtual unsigned int create_gsto(std::ostream& a_out,sg::render_manager& a_mgr) {
    std::vector<float> gsto_data;
    m_back_elems = 0;
    m_inner_side_elems = 0;
    m_outer_side_elems = 0;
    m_sides_elems = 0;

    size_t offset = 0;

    size_t num,ntri,nxyz,ngsto;
    float* pxyzs;
    float* pnms;

   {num = m_back.size()/3;
    if(num<=2) {
      a_out << "inlib::sg::cone_hat::create_gsto : back : triangle strip or fan with " << num << " points." << std::endl;
      return 0;
    }
    ntri = num-2;
    nxyz = ntri*3*3;
    ngsto = nxyz*2; //xyzs+nms
    gsto_data.resize(offset+ngsto);
    pxyzs = vec_data<float>(gsto_data)+offset;
    pnms = pxyzs+nxyz;
    const float* xyzs = vec_data<float>(m_back);
    const float* nms = vec_data<float>(m_back_nms);
    if(m_depth) {
      gl::triangle_strip_to_triangles_nms(num,xyzs,nms,pxyzs,pnms);
    } else {
      gl::triangle_fan_to_triangles_nms(num,xyzs,nms,pxyzs,pnms);
    }
    m_back_elems = ntri*3;
    offset += ngsto;}

   {num = m_inner_side.size()/3;
    ntri = num/3;
    nxyz = ntri*3*3;
    ngsto = nxyz*2; //xyzs+nms
    gsto_data.resize(offset+ngsto);
    pxyzs = vec_data<float>(gsto_data)+offset;
    pnms = pxyzs+nxyz;
    float* xyzs = vec_data<float>(m_inner_side);
    float* nms = vec_data<float>(m_inner_side_nms);
   {for(size_t index=0;index<nxyz;index++,xyzs++,pxyzs++,nms++,pnms++) {*pxyzs = *xyzs;*pnms = *nms;}}
    m_inner_side_elems = ntri*3;
    offset += ngsto;}

   {num = m_outer_side.size()/3;
    ntri = num/3;
    nxyz = ntri*3*3;
    ngsto = nxyz*2; //xyzs+nms
    gsto_data.resize(offset+ngsto);
    pxyzs = vec_data<float>(gsto_data)+offset;
    pnms = pxyzs+nxyz;
    float* xyzs = vec_data<float>(m_outer_side);
    float* nms = vec_data<float>(m_outer_side_nms);
   {for(size_t index=0;index<nxyz;index++,xyzs++,pxyzs++,nms++,pnms++) {*pxyzs = *xyzs;*pnms = *nms;}}
    m_outer_side_elems = ntri*3;
    offset += ngsto;}

   {num = m_sides.size()/3;
    ntri = num/3;
    nxyz = ntri*3*3;
    ngsto = nxyz*2; //xyzs+nms
    gsto_data.resize(offset+ngsto);
    pxyzs = vec_data<float>(gsto_data)+offset;
    pnms = pxyzs+nxyz;
    float* xyzs = vec_data<float>(m_sides);
    float* nms = vec_data<float>(m_sides_nms);
   {for(size_t index=0;index<nxyz;index++,xyzs++,pxyzs++,nms++,pnms++) {*pxyzs = *xyzs;*pnms = *nms;}}
    m_sides_elems = ntri*3;
    offset += ngsto;}

    _clear(); //ok, but take care of pick(), bbox().

    if(gsto_data.empty()) return 0;
    return a_mgr.create_gsto_from_data(gsto_data);
  }

public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }

    const state& state = a_action.state();

    if(state.m_use_gsto) {
      unsigned int _id = get_gsto_id(a_action.out(),a_action.render_manager());
      if(_id) {

        a_action.begin_gsto(_id);

        size_t offset = 0;

        size_t nxyz;
	bufpos ptris,pnms;

       {nxyz = m_back_elems*3*sizeof(float);
        ptris = offset;
        pnms  = ptris+nxyz;
        a_action.draw_gsto_vn(gl::triangles(),m_back_elems,ptris,pnms);
        offset += nxyz*2;}

       {nxyz = m_inner_side_elems*3*sizeof(float);
        ptris = offset;
        pnms  = ptris+nxyz;
        a_action.draw_gsto_vn(gl::triangles(),m_inner_side_elems,ptris,pnms);
        offset += nxyz*2;}

       {nxyz = m_outer_side_elems*3*sizeof(float);
        ptris = offset;
        pnms  = ptris+nxyz;
        a_action.draw_gsto_vn(gl::triangles(),m_outer_side_elems,ptris,pnms);
        offset += nxyz*2;}

       {nxyz = m_sides_elems*3*sizeof(float);
        ptris = offset;
        pnms  = ptris+nxyz;
        a_action.draw_gsto_vn(gl::triangles(),m_sides_elems,ptris,pnms);
        offset += nxyz*2;}

        a_action.end_gsto();
        return;

      } else { //!_id
        // use immediate rendering.
      }

    } else {
      clean_gstos(&a_action.render_manager());
    }

    if(_cleared()) update_sg();

    // immediate rendering :
    if(m_depth) {
      a_action.draw_vertex_normal_array(gl::triangle_strip(),m_back,m_back_nms);
    } else {
      a_action.draw_vertex_normal_array(gl::triangle_fan(),m_back,m_back_nms);
    }
    a_action.draw_vertex_normal_array(gl::triangles(),m_inner_side,m_inner_side_nms);
    a_action.draw_vertex_normal_array(gl::triangles(),m_outer_side,m_outer_side_nms);
    a_action.draw_vertex_normal_array(gl::triangles(),m_sides,m_sides_nms);

  }

  virtual void pick(pick_action& a_action) {
    if(touched()||_cleared()) { //_cleared() because gsto does a _clear(); we have to rebuild m_prims.
      update_sg();
      reset_touched();
    }
    //WARNING : same logic as ring.
    if(!m_is_pickable) return;
    if(m_depth) {
      a_action.add__primitive(*this,gl::triangle_strip(),m_back);
    } else {
      a_action.add__primitive(*this,gl::triangle_fan(),m_back);
    }
    a_action.add__primitive(*this,gl::triangles(),m_inner_side);
    a_action.add__primitive(*this,gl::triangles(),m_outer_side);
    a_action.add__primitive(*this,gl::triangles(),m_sides);
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()||_cleared()) {
      update_sg();
      reset_touched();
    }
    a_action.add_points(m_back);
    a_action.add_points(m_inner_side);
    a_action.add_points(m_outer_side);
    a_action.add_points(m_sides);
  }
public:
  virtual void clear_gstos() {gstos::clean_gstos();}
public:
  cone_hat()
  :parent()
  ,height(1)
  ,rmin(0.25f)
  ,rmax(0.5f)
  ,angle(ftwo_pi())
  ,steps(48)

  ,m_is_pickable(true)

  ,m_depth(true)
  ,m_back_elems(0)
  ,m_inner_side_elems(0)
  ,m_outer_side_elems(0)
  ,m_sides_elems(0)
  {
    add_fields();
  }
  virtual ~cone_hat(){}
public:
  cone_hat(const cone_hat& a_from)
  :parent(a_from)
  ,gstos(a_from)
  ,height(a_from.height)
  ,rmin(a_from.rmin)
  ,rmax(a_from.rmax)
  ,angle(a_from.angle)
  ,steps(a_from.steps)

  ,m_is_pickable(a_from.m_is_pickable)

  ,m_depth(true)
  ,m_back_elems(0)
  ,m_inner_side_elems(0)
  ,m_outer_side_elems(0)
  ,m_sides_elems(0)
  {
    add_fields();
  }
  cone_hat& operator=(const cone_hat& a_from){
    parent::operator=(a_from);
    gstos::operator=(a_from);

    height = a_from.height;
    rmin = a_from.rmin;
    rmax = a_from.rmax;
    angle = a_from.angle;
    steps = a_from.steps;

    m_is_pickable = a_from.m_is_pickable;

    m_depth = true;
    m_back_elems = 0;
    m_inner_side_elems = 0;
    m_outer_side_elems = 0;
    m_sides_elems = 0;

    return *this;
  }
public:
  void set_pickable(bool a_value) {m_is_pickable = a_value;}
protected:
  void update_sg() {
    clean_gstos(); //must reset for all render_manager.

    size_t nstep = steps.value();
    float rmn = rmin.value();
    float rmx = rmax.value();

    if(!nstep || (angle.value()<=0) || (angle.value()>ftwo_pi()) || (rmx<=0) || (rmn>=rmx) || (height.value()<=0) ) {
      _clear();
      return;
    }

    float dangle = angle.value()/nstep;

    float zmx = height.value()*0.5f;
    float zmn = -zmx;

    std::vector<float> cas(nstep+1);
    std::vector<float> sas(nstep+1);
   {float _angle = 0;
    for(size_t index=0;index<=nstep;index++,_angle+=dangle) {
      cas[index] = fcos(_angle);
      sas[index] = fsin(_angle);
    }}

    size_t findex,nindex;
    float ca,sa;
    float nmx,nmy,nmz;
    float nmx_prev,nmy_prev,nmz_prev;
    float nm2x,nm2y,nm2z,nm2l;
    float cos_theta,sin_theta;

    float theta = fatan2(rmx,height.value());

    if(rmn<=0) {
      m_depth = false;

      // build a triangle fan :
     {m_back.resize((nstep+2)*3);
      m_back_nms.resize((nstep+2)*3);
      findex = 0;
      nindex = 0;

      m_back[findex] = 0;findex++;
      m_back[findex] = 0;findex++;
      m_back[findex] = zmn;findex++;

      m_back_nms[nindex] = 0;nindex++;
      m_back_nms[nindex] = 0;nindex++;
      m_back_nms[nindex] = -1;nindex++;

      for(size_t index=0,bindex=nstep;index<=nstep;index++,bindex--) {
        m_back[findex] = rmx*cas[bindex];findex++;
        m_back[findex] = rmx*sas[bindex];findex++;
        m_back[findex] = zmn;findex++;

        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = -1;nindex++;
      }}

      m_inner_side.clear();
      m_inner_side_nms.clear();

      if(angle.value()<ftwo_pi()) {
        m_sides.resize(2*3*3);
        m_sides_nms.resize(2*3*3);
        findex = 0;
        nindex = 0;

        /////////////////////////////////////////
        // first side at angle=0, one triangles :
	/////////////////////////////////////////
        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] = rmx;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        /////////////////////////////////////////
        // second side at angle, one triangles :
	/////////////////////////////////////////
        size_t bindex=nstep;
        m_sides[findex] = rmx*cas[bindex];findex++;
        m_sides[findex] = rmx*sas[bindex];findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        /////////////////////////////////////////
	/////////////////////////////////////////
	/////////////////////////////////////////

      } else {
        m_sides.clear();
        m_sides_nms.clear();
      }

    } else {
      m_depth = true;

      // build a triangle strip :
     {m_back.resize((nstep+1)*2*3);
      m_back_nms.resize((nstep+1)*2*3);
      findex = 0;
      nindex = 0;

      for(size_t index=0,bindex=nstep;index<=nstep;index++,bindex--) {
        ca = cas[bindex];
        sa = sas[bindex];
        m_back[findex] = rmn*ca;findex++;
        m_back[findex] = rmn*sa;findex++;
        m_back[findex] = zmn;findex++;

        m_back[findex] = rmx*ca;findex++;
        m_back[findex] = rmx*sa;findex++;
        m_back[findex] = zmn;findex++;

        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = -1;nindex++;

        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = 0;nindex++;
        m_back_nms[nindex] = -1;nindex++;
      }}

      float inner_side_h = rmn/ftan(theta);
      float inner_side_zmx = inner_side_h-height.value()*0.5f;

      // build triangles :
     {m_inner_side.resize(nstep*3*3);
      m_inner_side_nms.resize(nstep*3*3);
      findex = 0;
      nindex = 0;

      cos_theta = fcos(theta);
      sin_theta = fsin(theta);

      // for first triangle :
      ca = cas[0];
      sa = sas[0];

      nmx = -cos_theta*ca;
      nmy = -cos_theta*sa;
      nmz = -sin_theta;

      m_inner_side[findex] = rmn*ca;findex++;
      m_inner_side[findex] = rmn*sa;findex++;
      m_inner_side[findex] = zmn;findex++;

      m_inner_side_nms[nindex] = nmx;nindex++;
      m_inner_side_nms[nindex] = nmy;nindex++;
      m_inner_side_nms[nindex] = nmz;nindex++;

      nmx_prev = nmx;
      nmy_prev = nmy;
      nmz_prev = nmz;
      for(size_t index=1;index<=nstep;index++) {
        ca = cas[index];
        sa = sas[index];

        nmx = -cos_theta*ca;
        nmy = -cos_theta*sa;
        nmz = -sin_theta;

        m_inner_side[findex] = 0;findex++;
        m_inner_side[findex] = 0;findex++;
        m_inner_side[findex] = inner_side_zmx;findex++;

        nm2x = (nmx_prev+nmx)*0.5f;
        nm2y = (nmy_prev+nmy)*0.5f;
        nm2z = (nmz_prev+nmz)*0.5f;
        nm2l = fsqrt(nm2x*nm2x+nm2y*nm2y+nm2z*nm2z);

        m_inner_side_nms[nindex] = nm2x/nm2l;nindex++;
        m_inner_side_nms[nindex] = nm2y/nm2l;nindex++;
        m_inner_side_nms[nindex] = nm2z/nm2l;nindex++;

        m_inner_side[findex] = rmn*ca;findex++;
        m_inner_side[findex] = rmn*sa;findex++;
        m_inner_side[findex] = zmn;findex++;

        m_inner_side_nms[nindex] = nmx;nindex++;
        m_inner_side_nms[nindex] = nmy;nindex++;
        m_inner_side_nms[nindex] = nmz;nindex++;

        if(index!=nstep) {
          // for next triangle :
          m_inner_side[findex] = rmn*ca;findex++;
          m_inner_side[findex] = rmn*sa;findex++;
          m_inner_side[findex] = zmn;findex++;

          m_inner_side_nms[nindex] = nmx;nindex++;
          m_inner_side_nms[nindex] = nmy;nindex++;
          m_inner_side_nms[nindex] = nmz;nindex++;

          nmx_prev = nmx;
          nmy_prev = nmy;
          nmz_prev = nmz;
        }

      }}

      if(angle.value()<ftwo_pi()) {
        m_sides.resize(4*3*3);
        m_sides_nms.resize(4*3*3);
        findex = 0;
        nindex = 0;

        /////////////////////////////////////////
        // first side at angle=0, two triangles :
	/////////////////////////////////////////
        m_sides[findex] = rmn;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] = rmx;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        /////////////////////////////////////////
        m_sides[findex] = rmn;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        m_sides[findex] =   0;findex++;
        m_sides[findex] =   0;findex++;
        m_sides[findex] = inner_side_zmx;findex++;

        m_sides_nms[nindex] =  0;nindex++;
        m_sides_nms[nindex] = -1;nindex++;
        m_sides_nms[nindex] =  0;nindex++;

        /////////////////////////////////////////
        // second side at angle, two triangles :
	/////////////////////////////////////////
        size_t bindex=nstep;
        m_sides[findex] = rmn*cas[bindex];findex++;
        m_sides[findex] = rmn*sas[bindex];findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] = 0;findex++;
        m_sides[findex] = 0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] = rmx*cas[bindex];findex++;
        m_sides[findex] = rmx*sas[bindex];findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        /////////////////////////////////////////
        m_sides[findex] = rmn*cas[bindex];findex++;
        m_sides[findex] = rmn*sas[bindex];findex++;
        m_sides[findex] = zmn;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] = 0;findex++;
        m_sides[findex] = 0;findex++;
        m_sides[findex] = inner_side_zmx;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        m_sides[findex] = 0;findex++;
        m_sides[findex] = 0;findex++;
        m_sides[findex] = zmx;findex++;

        m_sides_nms[nindex] = -sas[bindex];nindex++;
        m_sides_nms[nindex] =  cas[bindex];nindex++;
        m_sides_nms[nindex] =            0;nindex++;

        /////////////////////////////////////////
	/////////////////////////////////////////
	/////////////////////////////////////////

      } else {
        m_sides.clear();
        m_sides_nms.clear();
      }
    }

    // build triangles :
   {m_outer_side.resize(nstep*3*3);
    m_outer_side_nms.resize(nstep*3*3);
    findex = 0;
    nindex = 0;

    cos_theta = fcos(theta);
    sin_theta = fsin(theta);

    // for first triangle :
    ca = cas[0];
    sa = sas[0];

    nmx = cos_theta*ca;
    nmy = cos_theta*sa;
    nmz = sin_theta;

    m_outer_side[findex] = rmx*ca;findex++;
    m_outer_side[findex] = rmx*sa;findex++;
    m_outer_side[findex] = zmn;findex++;

    m_outer_side_nms[nindex] = nmx;nindex++;
    m_outer_side_nms[nindex] = nmy;nindex++;
    m_outer_side_nms[nindex] = nmz;nindex++;

    nmx_prev = nmx;
    nmy_prev = nmy;
    nmz_prev = nmz;
    for(size_t index=1;index<=nstep;index++) {
      ca = cas[index];
      sa = sas[index];

      nmx = cos_theta*ca;
      nmy = cos_theta*sa;
      nmz = sin_theta;

      m_outer_side[findex] = rmx*ca;findex++;
      m_outer_side[findex] = rmx*sa;findex++;
      m_outer_side[findex] = zmn;findex++;

      m_outer_side_nms[nindex] = nmx;nindex++;
      m_outer_side_nms[nindex] = nmy;nindex++;
      m_outer_side_nms[nindex] = nmz;nindex++;

      m_outer_side[findex] = 0;findex++;
      m_outer_side[findex] = 0;findex++;
      m_outer_side[findex] = zmx;findex++;

      nm2x = (nmx_prev+nmx)*0.5f;
      nm2y = (nmy_prev+nmy)*0.5f;
      nm2z = (nmz_prev+nmz)*0.5f;
      nm2l = fsqrt(nm2x*nm2x+nm2y*nm2y+nm2z*nm2z);

      m_outer_side_nms[nindex] = nm2x/nm2l;nindex++;
      m_outer_side_nms[nindex] = nm2y/nm2l;nindex++;
      m_outer_side_nms[nindex] = nm2z/nm2l;nindex++;

      // for next triangle :
      if(index!=nstep) {
        m_outer_side[findex] = rmx*ca;findex++;
        m_outer_side[findex] = rmx*sa;findex++;
        m_outer_side[findex] = zmn;findex++;

        m_outer_side_nms[nindex] = nmx;nindex++;
        m_outer_side_nms[nindex] = nmy;nindex++;
        m_outer_side_nms[nindex] = nmz;nindex++;

        nmx_prev = nmx;
        nmy_prev = nmy;
        nmz_prev = nmz;
      }
    }}

  }

  void _clear() {
    m_back.clear();
    m_back_nms.clear();
    m_inner_side.clear();
    m_inner_side_nms.clear();
    m_outer_side.clear();
    m_outer_side_nms.clear();
    m_sides.clear();
    m_sides_nms.clear();
  }
  bool _cleared() const {return m_back.empty();}
protected:
  std::vector<float> m_back;
  std::vector<float> m_back_nms;
  std::vector<float> m_inner_side;
  std::vector<float> m_inner_side_nms;
  std::vector<float> m_outer_side;
  std::vector<float> m_outer_side_nms;
  std::vector<float> m_sides;
  std::vector<float> m_sides_nms;
  bool m_is_pickable;
  bool m_depth;
  // if gsto :
  size_t m_back_elems;
  size_t m_inner_side_elems;
  size_t m_outer_side_elems;
  size_t m_sides_elems;
};

}}

#endif
