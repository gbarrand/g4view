// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_read_bsg
#define inlib_sg_read_bsg

#include "read_action"

#include "bsg_factories"
#include "group"
#include "strings"
#include "mf"

#include "../io/brbuf"
#include "../file_read"
#include "../fileis"
#include "../sout"
#include "../sto"
#include "../platform"

namespace inlib {
namespace sg {

class read_bsg : public read_action {
  INLIB_ACTION(read_bsg,inlib::sg::read_bsg,read_action)
protected:
  typedef bsg_factories::factory factory;
public:
  virtual io::irbuf& buffer() {return m_brbuf;}
  virtual bool get_node_desc(const std::string& a_cls,node_desc& a_desc) const {
    std::map<std::string,node_desc>::const_iterator it = m_rndesc.find(a_cls);
    if(it!=m_rndesc.end()) {a_desc = (*it).second;return true;}
    a_desc = node_desc();
    return false;
  }
  virtual const ifield_factory& field_factory() const {return m_ffac;}
public:
  read_bsg(std::ostream& a_out,
           const bsg_factories& a_factories,
           fac_args& a_args,
           group& a_group,
           const ifield_factory& a_ffac,
           bool a_verbose = false)
  :parent(a_out)
  ,m_factories(a_factories)
  ,m_args(a_args)
  ,m_head(a_group)
  ,m_ffac(a_ffac)
  ,m_verbose(a_verbose)
  ,m_brbuf(m_out,false) //byte swap is set in load_buffer.
  ,m_protocol(0)
  ,m_group(0)
  {}
  virtual ~read_bsg(){}
protected:
  read_bsg(const read_bsg& a_from)
  :parent(a_from)
  ,m_factories(a_from.m_factories)
  ,m_args(a_from.m_args)
  ,m_head(a_from.m_head)
  ,m_ffac(a_from.m_ffac)
  ,m_verbose(a_from.m_verbose)
  ,m_brbuf(m_out,false)
  ,m_protocol(0)
  ,m_group(0)
  {}
  read_bsg& operator=(const read_bsg& a_from){
    parent::operator=(a_from);
    if(&a_from==this) return *this;
    m_verbose = a_from.m_verbose;
    m_brbuf.reset_pos();
    m_protocol = 0;
    m_group = 0;
    return *this;
  }
public:
  bool load_file(const std::string& a_file){
    m_head.clear();
    m_rndesc.clear();
    m_brbuf.reset_pos();
    m_protocol = 0;

    char* _buffer;
    long sz;
    if(!file::read_bytes(a_file,_buffer,sz)) return false;

    bool status = load_buffer((unsigned int)sz,_buffer);
    delete [] _buffer;
#ifdef INLIB_MEM
    mem::decrement(s_new().c_str());
#endif

    return status;
  }

  bool load_buffer(size_t a_sz,const char* a_buffer){
    m_head.clear();
    m_rndesc.clear();
    m_brbuf.reset_pos();
    m_protocol = 0;

    if(!a_sz) return true;

    if(!m_brbuf.set(a_sz,a_buffer)) return false;

    m_group = &m_head;

    char header[7];
    if(!m_brbuf.read(header[0])) return false;
    if(!m_brbuf.read(header[1])) return false;
    if(!m_brbuf.read(header[2])) return false;
    if(!m_brbuf.read(header[3])) return false;
    if(!m_brbuf.read(header[4])) return false;
    if(!m_brbuf.read(header[5])) return false;
    if(!m_brbuf.read(header[6])) return false;

    if(!file::is_bsg(7,header)) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " bad signature."
            << std::endl;
      return false;
    }

    bool byte_swap_at_write;
    if(!m_brbuf.read(byte_swap_at_write)) return false;
    bool is_little_endian_at_write;
    if(!m_brbuf.read(is_little_endian_at_write)) return false;

    //::printf("debug : 002 : bswp %d endia %d\n",
    //    byte_swap_at_write,is_little_endian_at_write);

    if(is_little_endian()==is_little_endian_at_write) {
      m_brbuf.set_byte_swap(byte_swap_at_write);
    } else {
      m_brbuf.set_byte_swap(byte_swap_at_write?false:true);
    }

    unsigned int _inlib_version;
    if(!m_brbuf.read(_inlib_version)) return false;

    if(!m_brbuf.read(m_protocol)) {m_protocol = 0;return false;}

    if(m_verbose) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " inlib_version " << _inlib_version
            << ",protocol " << m_protocol
            << std::endl;
    }

    uint64 pos_desc = 0;
    if((m_protocol==2)||(m_protocol==3)) {
      uint32 sz_void_star;
      if(!m_brbuf.read(sz_void_star)) {m_protocol = 0;return false;}
      // end of header of protocol=2.

      // get class descs (at trail of file) :
      if(!m_brbuf.read(pos_desc)) {m_protocol = 0;return false;}

      size_t saved_offset = m_brbuf.length();
      if(!m_brbuf.set_at_offset(uint32(pos_desc))) {m_protocol = 0;return false;}

      mf_std_vec<std::string> desc;
      if(!desc.read(m_brbuf)) {
        m_out << "inlib::sg::read_bsg::load_buffer : can't read node descriptions." << std::endl;
        m_protocol = 0;
        return false;
      }
      // the read pending of write_bsg.close_buffer() :
      inlib_vforcit(std::vector<std::string>,desc.values(),it) {
        const std::vector<std::string>& _v = *it;
        int nfield = (int(_v.size())-3)/3;
        if((nfield*3+3)!=int(_v.size())) {
          m_out << "inlib::sg::read_bsg::load_buffer : unexpected node desc vector entries." << std::endl;
          m_rndesc.clear();
          m_protocol = 0;
          return false;
        }
        const std::string& s_cls = _v[0];
        unsigned int version;
        if(!to<unsigned int>(_v[1],version,0)){}
        unsigned int _nfield;
        if(!to<unsigned int>(_v[2],_nfield,0)){}
        if(int(_nfield)!=nfield) {
          m_out << "inlib::sg::read_bsg::load_buffer :"
                << " mismatch field number for class "
                << sout(s_cls) << ". " << nfield << " " << _nfield << "."
                << std::endl;
          m_rndesc.clear();
          m_protocol = 0;
          return false;
        }
        unsigned int index = 3;
        std::vector<field_desc> fds;
        for(unsigned int ifield=0;ifield<_nfield;ifield++) {
          const std::string& fname = _v[index];index++;
          const std::string& fcls  = _v[index];index++;
          const std::string& foff  = _v[index];index++;
          int off;
          if(!to<int>(foff,off,0)){}
          bool editable = true; //FIXME : write/read.
          fds.push_back(field_desc(fname,fcls,(field_desc::offset_t)off,editable));
        }
        m_rndesc[s_cls] = node_desc(s_cls,version,fds);
      }

      m_brbuf.set_at_offset(saved_offset);

      if(m_verbose) {
        inlib_mforcit(std::string,node_desc,m_rndesc,it) {
          m_out << "class : " << (*it).first << std::endl;
          inlib_vforcit(field_desc,(*it).second.fields(),it2) {
            m_out << "  field : " << (*it2).name() << " " << (*it2).cls() << " " << (*it2).offset() << std::endl;
          }
        }
      }
    }

    //if(protocol_version==1)
    {

    std::string node_cls_name;
    if(!m_brbuf.read_std_string(node_cls_name)) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " can't read string."
            << std::endl;
      return false;
    }

    unsigned int node_cls_version;
    if(!m_brbuf.read(node_cls_version)) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " can't read string."
            << std::endl;
      return false;
    }

    //::printf("debug : read_bsg : 004 : %s\n",node_cls_name.c_str());

   {factory rder = m_factories.find_factory(node_cls_name);
    if(!rder) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " factory not found for " << sout(node_cls_name)
            << std::endl;
      return false;
    }
    bool composite = false;
    node* _node = rder(m_args,composite);
    if(!_node) {
      m_out << "inlib::sg::read_bsg::load_buffer :"
            << " factory failed for " << sout(node_cls_name)
            << std::endl;
      return false;
    }
    if(composite) {
      if(!_read_composite(_node,m_brbuf,m_out,m_verbose,*this)) {
        m_out << "inlib::sg::read_bsg::load_buffer :"
              << " read failed for " << sout(node_cls_name)
              << std::endl;
        return false;
      }
    } else{
      if(!_read_node(_node,m_brbuf,m_out,m_verbose,*this)) {
        m_out << "inlib::sg::read_bsg::load_buffer :"
              << " read failed for " << sout(node_cls_name)
              << std::endl;
        return false;
      }
    }}

    }

    if((m_protocol==2)||(m_protocol==3)) {
      if(m_brbuf.length()!=uint32(pos_desc)) {
        m_out << "inlib::sg::read_bsg::load_buffer :"
              << " WARNING : brbuf not at begin of streamer infos."
              << std::endl;
      }
    } else {
      if(m_brbuf.remaining()>0) {
        m_out << "inlib::sg::read_bsg::load_buffer :"
              << " WARNING : brbuf not empty."
              << std::endl;
      }
    }

    return true;
  }

protected:
  static bool _read_node(node*& a_node,io::brbuf& a_buf,std::ostream& a_out,bool a_verbose,read_bsg& a_action) {
    if(a_verbose) {
      a_out << "inlib::read_bsg::read_node : " << a_node->s_cls() << " ..." << std::endl;
    }

    if(!read_fields(*a_node,a_buf,a_out,a_verbose,a_action)) {
      a_out << "inlib::read_bsg::_read_node : " << a_node->s_cls() << " failed." << std::endl;
      delete a_node;
      a_node = 0;
      return false;
    }

   {std::string node_end;
    if(!a_buf.read_std_string(node_end)) {
      a_out << "inlib::read_bsg::_read_node : " << a_node->s_cls() << " can't read node_end." << std::endl
            << " Protocol in file is " << a_action.m_protocol << "." << std::endl
            << " If protocol is 1, fields of " << a_node->s_cls() << " are no more in sync with what is in the file"
            << " and we can't recover."
            << std::endl;
      delete a_node;
      a_node = 0;
      return false;
    }
    if(node_end!=s_node_end()) {
      a_out << "inlib::read_bsg::_read_node : " << a_node->s_cls() << " " << node_end << " not node_end." << std::endl;
      delete a_node;
      a_node = 0;
      return false;
    }}

    a_action.m_group->add(a_node);
    return true;
  }

  static bool _read_composite(node*& a_node,io::brbuf& a_buf,std::ostream& a_out,bool a_verbose,read_bsg& a_action) {
    if(a_verbose) {
      a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << "..." << std::endl;
    }

    if(!read_fields(*a_node,a_buf,a_out,a_verbose,a_action)) {
      a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << " failed." << std::endl;
      delete a_node;
      a_node = 0;
      return false;
    }

    group* grp = safe_cast<node,group>(*a_node);
    if(!grp) {
      a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << " is not a group." << std::endl;
      delete a_node;
      a_node = 0;
      return false;
    }

    group* old_group = a_action.m_group;
    a_action.m_group = grp;

    while(true) {
      std::string node_cls_name;
      if(!a_buf.read_std_string(node_cls_name)) {
        a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << " can't read node_cls." << std::endl;
        a_action.m_group = old_group;
        delete a_node;
        a_node = 0;
        return false;
      }

      if(node_cls_name==s_node_end()) break;

      unsigned int node_cls_version;
      if(!a_buf.read(node_cls_version)) {
        a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << " can't read class version." << std::endl;
        a_action.m_group = old_group;
        delete a_node;
        a_node = 0;
        return false;
      }

      //::printf("debug : read_bsg : 1004 : %s\n",node_cls_name.c_str());

     {factory rder = a_action.m_factories.find_factory(node_cls_name);
      if(!rder) {
        a_out << "inlib::read_bsg::_read_composite : " << a_node->s_cls() << " factory not found for " << sout(node_cls_name)
              << std::endl;
        a_action.m_group = old_group;
        delete a_node;
        a_node = 0;
        return false;
      }
      bool composite = false;
      node* _node = rder(a_action.m_args,composite);
      if(!_node) {
        a_out << "inlib::read_bsg::_read_composite : factory failed for " << sout(node_cls_name) << std::endl;
        a_action.m_group = old_group;
        delete a_node;
        a_node = 0;
        return false;
      }
      if(composite) {
        if(!_read_composite(_node,a_buf,a_out,a_verbose,a_action)) {
          a_out << "inlib::read_bsg::_read_composite : failed for " << sout(node_cls_name) << std::endl;
          a_action.m_group = old_group;
          delete a_node;
          a_node = 0;
          return false;
        }
      } else{
        if(!_read_node(_node,a_buf,a_out,a_verbose,a_action)) {
          a_out << "inlib::read_bsg::_read_composite : failed for " << sout(node_cls_name) << std::endl;
          a_action.m_group = old_group;
          delete a_node;
          a_node = 0;
          return false;
        }
      }}

    }

    a_action.m_group = old_group;

    a_action.m_group->add(a_node);
    return true;
  }

  static bool read_fields(node& a_node,io::brbuf& a_buf,std::ostream& a_out,bool a_verbose,read_bsg& a_action) {
    unsigned int protocol = a_action.m_protocol;
    //protocol = 1;
    if((protocol==2)||(protocol==3)) {
      return a_node.read(a_action);
    } else if(protocol==1) {
      std::vector<field*> fields;
      a_node.protocol_one_fields(fields);
      inlib_vforit(field*,fields,fit) {
        if(!(*fit)->read(a_buf)) {
          a_out << "inlib::read_bsg::read_fields : failed for." << std::endl;
          return false;
        }
        if(a_verbose) (*fit)->dump(a_out);
      }
      return true;
    } else {
      return false;
    }
  }

protected:
  const bsg_factories& m_factories;
  fac_args& m_args;
  group& m_head;
  const ifield_factory& m_ffac;
  bool m_verbose;
  io::brbuf m_brbuf;
  unsigned int m_protocol;
  group* m_group;
  //protocol==2 :
  std::map<std::string,node_desc> m_rndesc;
};

}}

#endif
