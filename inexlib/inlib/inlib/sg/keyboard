// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_keyboard
#define inlib_sg_keyboard

// A keyboard keypad emulation.

#include "node"
#include "text_button"

namespace inlib {
namespace sg {

class keyboard : public node {
  typedef text text_t;
  typedef text_button tb_t;
  INLIB_NODE(keyboard,inlib::sg::keyboard,node)
public:
  sf<float> width;
  sf<float> height;
  sf_vec<colorf,float> back_color;
  sf_vec<colorf,float> front_color;
  sf_vec<colorf,float> border_color;
  sf_vec<colorf,float> arm_color;
  sf<float> text_wmargin_factor;
  sf<float> text_hmargin_factor;
  sf_string value;
  enum keyboard_kind {
    keyboard_QWERTY,
    keyboard_iPhone,
    keyboard_variable
  };
  sf_enum<keyboard_kind> kind;
  sf<bool> show_cancel;
  sf_string font;
  sf_enum<sg::font_modeling> font_modeling;
protected:
  sf<bool> shift;
  sf<bool> other;  //keyboard_iPhone
  sf<bool> other2; //keyboard_iPhone
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::keyboard)
    static const desc_fields s_v(parent::node_desc_fields(),16, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(back_color),
      INLIB_ARG_FIELD_DESC(front_color),
      INLIB_ARG_FIELD_DESC(border_color),
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(text_wmargin_factor),
      INLIB_ARG_FIELD_DESC(text_hmargin_factor),
      INLIB_ARG_FIELD_DESC(value),

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(kind,3)
        INLIB_ARG_ENUM(keyboard_QWERTY),
        INLIB_ARG_ENUM(keyboard_iPhone),
        INLIB_ARG_ENUM(keyboard_variable)
      INLIB_ARG_FIELD_DESC_ENUMS_END,

      INLIB_ARG_FIELD_DESC(shift),
      INLIB_ARG_FIELD_DESC(other),
      INLIB_ARG_FIELD_DESC(other2),
      INLIB_ARG_FIELD_DESC(show_cancel),

      INLIB_ARG_FIELD_DESC_OPTS_BEG(font,8)
        font_hershey().c_str(),
        font_arial_ttf().c_str(),
        font_arialbd_ttf().c_str(),
        font_timesbd_ttf().c_str(),
        font_symbol_ttf().c_str(),
        font_stixgeneral_otf().c_str(),
        font_helvetica_ttf().c_str(),
        font_times_roman_ttf().c_str()
      INLIB_ARG_FIELD_DESC_OPTS_END,

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(font_modeling,3)
        INLIB_ARG_ENUM(font_outline),
        INLIB_ARG_ENUM(font_filled),
        INLIB_ARG_ENUM(font_pixmap)
      INLIB_ARG_FIELD_DESC_ENUMS_END
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&back_color);
    add_field(&front_color);
    add_field(&border_color);
    add_field(&arm_color);
    add_field(&text_wmargin_factor);
    add_field(&text_hmargin_factor);
    add_field(&value);
    add_field(&kind);
    add_field(&shift);
    add_field(&other);
    add_field(&other2);
    add_field(&show_cancel);
    add_field(&font);
    add_field(&font_modeling);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.pick(a_action);
    if(a_action.done()) return;
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
public:
  keyboard(const base_freetype& a_ttf)
  :parent()

  ,width(1)
  ,height(1)
  ,back_color(colorf_white())
  ,front_color(colorf_black())
  ,border_color(colorf_black())
  ,arm_color(colorf_grey())
  ,text_wmargin_factor(0.9f)
  ,text_hmargin_factor(0.9f)
  ,value("")
  ,kind(keyboard_iPhone) //ok with entry_string.
  //,kind(keyboard_QWERTY)
  //,kind(keyboard_variable)
  ,show_cancel(false)
  ,font(font_hershey())
  ,font_modeling(font_filled)
  ,shift(false)
  ,other(false)
  ,other2(false)

  ,m_cbks()
  ,m_cancel_cbks()
  ,m_ttf(a_ttf)
  {
    add_fields();
  }
  virtual ~keyboard(){}
public:
  keyboard(const keyboard& a_from)
  :parent(a_from)

  ,width(a_from.width)
  ,height(a_from.height)
  ,back_color(a_from.back_color)
  ,front_color(a_from.front_color)
  ,border_color(a_from.border_color)
  ,arm_color(a_from.arm_color)
  ,text_wmargin_factor(a_from.text_wmargin_factor)
  ,text_hmargin_factor(a_from.text_hmargin_factor)
  ,value(a_from.value)
  ,kind(a_from.kind)
  ,show_cancel(a_from.show_cancel)
  ,font(a_from.font)
  ,font_modeling(a_from.font_modeling)
  ,shift(a_from.shift)
  ,other(a_from.other)
  ,other2(a_from.other2)

  ,m_cbks(a_from.m_cbks)
  ,m_cancel_cbks(a_from.m_cancel_cbks)

  ,m_ttf(a_from.m_ttf)
  {
    add_fields();
  }
  keyboard& operator=(const keyboard& a_from){
    parent::operator=(a_from);

    width = a_from.width;
    height = a_from.height;
    back_color = a_from.back_color;
    front_color = a_from.front_color;
    border_color = a_from.border_color;
    arm_color = a_from.arm_color;
    text_wmargin_factor = a_from.text_wmargin_factor;
    text_hmargin_factor = a_from.text_hmargin_factor;
    value = a_from.value;
    kind = a_from.kind;
    shift = a_from.shift;
    other = a_from.other;
    other2 = a_from.other2;
    show_cancel = a_from.show_cancel;
    font = a_from.font;
    font_modeling = a_from.font_modeling;

    m_cbks = a_from.m_cbks;
    m_cancel_cbks = a_from.m_cancel_cbks;

    return *this;
  }
public:
  const separator& container() const {return m_sep;} //must be consistent with pick().
  void clear() {value.value("");} //for gui_viewer popup templates.
public:
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.callbacks().push_back(a_cbk);
    touch();
  }
  void clear_cbks(){
    m_cbks.clear();
    touch();
  }
public:
  void add_cancel_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cancel_cbks.add(a_cbk);
    touch();
  }
  void clear_cancel_cbks(){
    m_cancel_cbks.clear();
    touch();
  }
protected:
  INLIB_CLASS_STRING(del)
  INLIB_CLASS_STRING(shift)
  INLIB_CLASS_STRING(space)
  INLIB_CLASS_STRING(clear)
  INLIB_CLASS_STRING(kind)
  INLIB_CLASS_STRING(none)
  INLIB_CLASS_STRING(ok)
  INLIB_CLASS_STRING(Cancel)

  static const std::string& s_other() {
    static const std::string s_v(".?123");
    return s_v;
  }
  static const std::string& s_other2() {
    static const std::string s_v("#+=");
    return s_v;
  }

  class button_cbk : public bcbk {
    typedef bcbk parent;
  public:
    virtual return_action action() {
      if(m_action==s_kind()) {
        if(m_keyboard.kind==keyboard_QWERTY) {
          m_keyboard.kind = keyboard_iPhone;
        } else if(m_keyboard.kind==keyboard_iPhone) {
          m_keyboard.kind = keyboard_variable;
        } else if(m_keyboard.kind==keyboard_variable) {
          m_keyboard.kind = keyboard_QWERTY;
        }
        return return_to_render;
      }
      if(m_action==keyboard::s_shift()) {
        m_keyboard.shift = !m_keyboard.shift;
        return return_to_render;
      }
      if(m_action==keyboard::s_other()) {
        m_keyboard.other = !m_keyboard.other;
        return return_to_render;
      }
      if(m_action==keyboard::s_other2()) {
        m_keyboard.other2 = !m_keyboard.other2;
        return return_to_render;
      }
      std::string _s = m_keyboard.value.value();
      if(m_action==keyboard::s_clear()) {
        _s.clear();
      } else if(m_action==keyboard::s_del()) {
        if(_s.size()) _s = _s.substr(0,_s.size()-1);
      } else if(m_action==keyboard::s_space()) {
        _s += " ";
      } else {
        if(m_keyboard.kind==keyboard_variable) {
          if(_s.empty()) {
            //A C variable can't start with a digit.
            if((m_action=="0")||(m_action=="1")||
               (m_action=="2")||(m_action=="3")||
               (m_action=="4")||(m_action=="5")||
               (m_action=="6")||(m_action=="7")||
               (m_action=="8")||(m_action=="9")){
              return return_none;
            }
          }
        }
        _s += m_action;
      }
      m_keyboard.value = _s;
      return return_to_render;
    }
    virtual bcbk* copy() const {return new button_cbk(*this);}
  public:
    button_cbk(keyboard& a_keyboard,const std::string& a_action)
    :parent()
    ,m_keyboard(a_keyboard)
    ,m_action(a_action)
    {}
    virtual ~button_cbk(){}
  public:
    button_cbk(const button_cbk& a_from)
    :parent(a_from)
    ,m_keyboard(a_from.m_keyboard)
    ,m_action(a_from.m_action)
    {}
    button_cbk& operator=(const button_cbk& a_from){
      parent::operator=(a_from);
      m_action = a_from.m_action;
      return *this;
    }
  protected:
    keyboard& m_keyboard;
    std::string m_action;
  };

  void update_sg() {
    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;

    if(kind==keyboard_QWERTY) {
      //QWERTY US :
      // [resul]
      // ` 1 2 3 4 5 6 7 8 9 0 - = Del
      //    Q W E R T Y U I O P [ ] '\'
      //     A S D F G H J K L ; '
      // Shft Z X C V B N M ! ? / Shft
      // Clear Kind __Space__       Ok
      //Shift :
      // ~ ! @ # $ % ^ & * ( ) _ +
      //    q w e r t y u i o p { } |
      //     a s d f g h j k l : "
      // Shft z x c v b n m < > ? Shft
      // Clear Kind __Space__       Ok

      m_sep.add(create_button_QWERTY("`","~",0,0));
      m_sep.add(create_button_QWERTY("1","!",0,1));
      m_sep.add(create_button_QWERTY("2","@",0,2));
      m_sep.add(create_button_QWERTY("3","#",0,3));
      m_sep.add(create_button_QWERTY("4","$",0,4));
      m_sep.add(create_button_QWERTY("5","%",0,5));
      m_sep.add(create_button_QWERTY("6","^",0,6));
      m_sep.add(create_button_QWERTY("7","&",0,7));
      m_sep.add(create_button_QWERTY("8","*",0,8));
      m_sep.add(create_button_QWERTY("9","(",0,9));
      m_sep.add(create_button_QWERTY("0",")",0,10));
      m_sep.add(create_button_QWERTY("-","_",0,11));
      m_sep.add(create_button_QWERTY("=","+",0,12));
      //////////////////////////////////
      //tab
      m_sep.add(create_button_QWERTY("Q","q",1,1));
      m_sep.add(create_button_QWERTY("W","w",1,2));
      m_sep.add(create_button_QWERTY("E","e",1,3));
      m_sep.add(create_button_QWERTY("R","r",1,4));
      m_sep.add(create_button_QWERTY("T","t",1,5));
      m_sep.add(create_button_QWERTY("Y","y",1,6));
      m_sep.add(create_button_QWERTY("U","u",1,7));
      m_sep.add(create_button_QWERTY("I","i",1,8));
      m_sep.add(create_button_QWERTY("O","o",1,9));
      m_sep.add(create_button_QWERTY("P","p",1,10));
      m_sep.add(create_button_QWERTY("[","{",1,11));
      m_sep.add(create_button_QWERTY("]","}",1,12));
      m_sep.add(create_button_QWERTY("\\","|",1,13));
      //////////////////////////////////
      //caps
      m_sep.add(create_button_QWERTY("A","a",2,1));
      m_sep.add(create_button_QWERTY("S","s",2,2));
      m_sep.add(create_button_QWERTY("D","d",2,3));
      m_sep.add(create_button_QWERTY("F","f",2,4));
      m_sep.add(create_button_QWERTY("G","g",2,5));
      m_sep.add(create_button_QWERTY("H","h",2,6));
      m_sep.add(create_button_QWERTY("J","j",2,7));
      m_sep.add(create_button_QWERTY("K","k",2,8));
      m_sep.add(create_button_QWERTY("L","l",2,9));
      m_sep.add(create_button_QWERTY(";",":",2,10));
      m_sep.add(create_button_QWERTY("'","\"",2,11));
      //////////////////////////////////
      //shift
      m_sep.add(create_button_QWERTY("Z","z",3,1));
      m_sep.add(create_button_QWERTY("X","x",3,2));
      m_sep.add(create_button_QWERTY("C","c",3,3));
      m_sep.add(create_button_QWERTY("V","v",3,4));
      m_sep.add(create_button_QWERTY("B","b",3,5));
      m_sep.add(create_button_QWERTY("N","n",3,6));
      m_sep.add(create_button_QWERTY("M","m",3,7));
      m_sep.add(create_button_QWERTY(",","<",3,8));
      m_sep.add(create_button_QWERTY(".",">",3,9));
      m_sep.add(create_button_QWERTY("/","?",3,10));
      //////////////////////////////////

      m_sep.add(create_del_QWERTY());
      m_sep.add(create_lshift_QWERTY());
      m_sep.add(create_rshift_QWERTY());
      m_sep.add(create_space_QWERTY());

      //////////////////////////////////
      m_sep.add(create_clear_QWERTY());
      m_sep.add(create_kind_QWERTY());
      m_sep.add(create_enter_QWERTY());

      //////////////////////////////////
      m_sep.add(create_result());

      if(show_cancel.value()) m_sep.add(create_cancel());

    } else if(kind==keyboard_iPhone) {
      // [resul]
      //  Q W E R T Y U I O P Del
      //   A S D F G H J K L
      // Sh Z X C V B N M , . Sh
      // _123_  __Space__ _123_
      // Clear Kind           Ok
      //Shift :
      //  q w e r t y u i o p Del
      //   a s d f g h j k l
      // Sh z x c v b n m ! ? Sh
      // _123_  __Space__ _123_
      // Clear Kind           Ok
      //_123_ :
      //  1 2 3 4 5 6 7 8 9 0 Del
      //   - / : ; ( ) $ & @
      // Ot und . , ? ! ' "   Other
      // _ABC_  __Space__ _ABC_
      // Clear Kind           Ok

      m_sep.add(create_button_iPhone("Q","q","1","[",0,0));
      m_sep.add(create_button_iPhone("W","w","2","]",0,1));
      m_sep.add(create_button_iPhone("E","e","3","{",0,2));
      m_sep.add(create_button_iPhone("R","r","4","}",0,3));
      m_sep.add(create_button_iPhone("T","t","5","#",0,4));
      m_sep.add(create_button_iPhone("Y","y","6","%",0,5));
      m_sep.add(create_button_iPhone("U","u","7","^",0,6));
      m_sep.add(create_button_iPhone("I","i","8","*",0,7));
      m_sep.add(create_button_iPhone("O","o","9","+",0,8));
      m_sep.add(create_button_iPhone("P","p","0","=",0,9));

      m_sep.add(create_button_iPhone("A","a","-","_",1,0));
      m_sep.add(create_button_iPhone("S","s","/","\\",1,1));
      m_sep.add(create_button_iPhone("D","d",":","|",1,2));
      m_sep.add(create_button_iPhone("F","f",";","~",1,3));
      m_sep.add(create_button_iPhone("G","g","(","<",1,4));
      m_sep.add(create_button_iPhone("H","h",")",">",1,5));
      m_sep.add(create_button_iPhone("J","j","$",s_none(),1,6));
      m_sep.add(create_button_iPhone("K","k","&",s_none(),1,7));
      m_sep.add(create_button_iPhone("L","l","@",s_none(),1,8));

      m_sep.add(create_button_iPhone("Z","z",s_none(),s_none(),2,0));
      m_sep.add(create_button_iPhone("X","x",s_none(),s_none(),2,1));
      m_sep.add(create_button_iPhone("C","c",".",".",2,2));
      m_sep.add(create_button_iPhone("V","v",",",",",2,3));
      m_sep.add(create_button_iPhone("B","b","?","?",2,4));
      m_sep.add(create_button_iPhone("N","n","!","!",2,5));
      m_sep.add(create_button_iPhone("M","m","'","'",2,6));
      m_sep.add(create_button_iPhone(",","!","\"","\"",2,7));
      m_sep.add(create_button_iPhone(".","?",s_none(),s_none(),2,8));

      //////////////////////////////////
      m_sep.add(create_del_iPhone());
      m_sep.add(create_lshift_iPhone());
      m_sep.add(create_rshift_iPhone());
      m_sep.add(create_space_iPhone());

      //////////////////////////////////
      m_sep.add(create_lother_iPhone());
      m_sep.add(create_rother_iPhone());
      m_sep.add(create_clear_iPhone());
      m_sep.add(create_kind_iPhone());
      m_sep.add(create_enter_iPhone());

      //////////////////////////////////
      m_sep.add(create_result());

      if(show_cancel.value()) m_sep.add(create_cancel());

    } else if(kind==keyboard_variable) {
      // [resul]
      // 1 2 3 4 5 6 7 8 9 0 Del
      //  q w e r t y u i o p
      //   a s d f g h j k l
      // Sh z x c v b n m _   Shft
      // Clear Kind __Space__   Ok
      //Shift :
      // 1 2 3 4 5 6 7 8 9 0 Del
      //  Q W E R T Y U I O P
      //   A S D F G H J K L
      // Sh Z X C V B N M _     Sh
      // Clear Kind __Space__   Ok

      m_sep.add(create_button_variable("1","1",0,0));
      m_sep.add(create_button_variable("2","2",0,1));
      m_sep.add(create_button_variable("3","3",0,2));
      m_sep.add(create_button_variable("4","4",0,3));
      m_sep.add(create_button_variable("5","5",0,4));
      m_sep.add(create_button_variable("6","6",0,5));
      m_sep.add(create_button_variable("7","7",0,6));
      m_sep.add(create_button_variable("8","8",0,7));
      m_sep.add(create_button_variable("9","9",0,8));
      m_sep.add(create_button_variable("0","0",0,9));
      //////////////////////////////////
      m_sep.add(create_button_variable("q","Q",1,0));
      m_sep.add(create_button_variable("w","W",1,1));
      m_sep.add(create_button_variable("e","E",1,2));
      m_sep.add(create_button_variable("r","R",1,3));
      m_sep.add(create_button_variable("t","T",1,4));
      m_sep.add(create_button_variable("y","Y",1,5));
      m_sep.add(create_button_variable("u","U",1,6));
      m_sep.add(create_button_variable("i","I",1,7));
      m_sep.add(create_button_variable("o","O",1,8));
      m_sep.add(create_button_variable("p","P",1,9));
      //////////////////////////////////
      m_sep.add(create_button_variable("a","A",2,0));
      m_sep.add(create_button_variable("s","S",2,1));
      m_sep.add(create_button_variable("d","D",2,2));
      m_sep.add(create_button_variable("f","F",2,3));
      m_sep.add(create_button_variable("g","G",2,4));
      m_sep.add(create_button_variable("h","H",2,5));
      m_sep.add(create_button_variable("j","J",2,6));
      m_sep.add(create_button_variable("k","K",2,7));
      m_sep.add(create_button_variable("l","L",2,8));
      //////////////////////////////////
      m_sep.add(create_button_variable("z","Z",3,0));
      m_sep.add(create_button_variable("x","X",3,1));
      m_sep.add(create_button_variable("c","C",3,2));
      m_sep.add(create_button_variable("v","V",3,3));
      m_sep.add(create_button_variable("b","B",3,4));
      m_sep.add(create_button_variable("n","N",3,5));
      m_sep.add(create_button_variable("m","M",3,6));
      m_sep.add(create_button_variable("_","_",3,7));
      //////////////////////////////////

      m_sep.add(create_del_variable());
      m_sep.add(create_lshift_variable());
      m_sep.add(create_rshift_variable());
      m_sep.add(create_space_variable());

      //////////////////////////////////
      m_sep.add(create_clear_variable());
      m_sep.add(create_kind_variable());
      m_sep.add(create_enter_variable());

      //////////////////////////////////
      m_sep.add(create_result());

      if(show_cancel.value()) m_sep.add(create_cancel());
    }
  }

  ////////////////////////////////////////////////////////////////
  /// QWERTY /////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  separator* create_button_QWERTY(const std::string& a_label,
                                                    const std::string& a_shift,
                                                    unsigned int a_row,
                                                    unsigned int a_col) {
    separator* sep = new separator;

    float wbutton = width/15;
    float hbutton = hitem();

    float shift_row = a_row*wbutton*0.5f;

    float xx = -width*0.5f+wbutton*0.5f+a_col*wbutton+shift_row;
    float yy = height*0.5f-hbutton*1.5f-a_row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->confine = true;
    b->hjust = center;

    b->width = wbutton;
    b->height = hbutton;

    b->set_label(shift.value()?a_shift:a_label);

    b->add_callback(new button_cbk(*this,shift.value()?a_shift:a_label));


    sep->add(b);

    return sep;
  }
  separator* create_del_QWERTY() {
    separator* sep = new separator;

    float wbutton = 2*width/15;
    float hbutton = hitem();

    unsigned int row = 0;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_del());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_del()));

    sep->add(b);

    return sep;
  }
  separator* create_lshift_QWERTY() {
    separator* sep = new separator;

    float wbutton = 2.5f*width/15;
    float hbutton = hitem();

    unsigned int row = 3;

    float xx = -width*0.5f+wbutton*0.5f+0*wbutton;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_shift());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_shift()));

    sep->add(b);

    return sep;
  }
  separator* create_rshift_QWERTY() {
    separator* sep = new separator;

    float wbutton = 2.5f*width/15;
    float hbutton = hitem();

    unsigned int row = 3;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_shift());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_shift()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }
  separator* create_space_QWERTY() {
    separator* sep = new separator;

    float wbutton = 6*width/15;
    float hbutton = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wbutton*0.5f+4.5f*width/15;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label("");

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_space()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }
  separator* create_clear_QWERTY() {
    separator* sep = new separator;

    float wtext = 2.5f*width/15;
    float htext = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_clear());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_clear()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_kind_QWERTY() {
    separator* sep = new separator;

    float wtext = 2*width/15;
    float htext = hitem();

    unsigned row = 4;

    float xx = -width*0.5f+wtext*0.5f+2.5f*width/15;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_kind());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_kind()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_enter_QWERTY() {
    separator* sep = new separator;

    float wtext = 4.5f*width/15;
    float htext = hitem();

    unsigned int row = 4;

    float xx = width*0.5f-wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->set_label(s_ok());
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->confine = true;
    b->hjust = center;

    b->copy_cbks(m_cbks);

    sep->add(b);

    return sep;
  }

  ////////////////////////////////////////////////////////////////
  /// iPhone /////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  separator* create_button_iPhone(const std::string& a_label,
                                                    const std::string& a_shift,
                                                    const std::string& a_other,
                                                   const std::string& a_other2,
                                                    unsigned int a_row,
                                                    unsigned int a_col) {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    float shift_row = a_row*wbutton*0.5f;

    float xx = -width*0.5f+wbutton*0.5f+a_col*wbutton+shift_row;
    float yy = height*0.5f-hbutton*1.5f-a_row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->confine = true;
    b->hjust = center;

    b->width = wbutton;
    b->height = hbutton;

    std::string s;
    if(other.value()) {
      if(other2.value()) {
        s = a_other2;
      } else {
        s = a_other;
      }
    } else {
      s = shift.value()?a_shift:a_label;
    }

    b->set_label(s);
    b->add_callback(new button_cbk(*this,s));
    sep->add(b);

    if(s==s_none()) {
      delete sep;
      return new separator;
    }

    return sep;
  }
  separator* create_del_iPhone() {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    unsigned int row = 0;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_del());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_del()));

    sep->add(b);

    return sep;
  }
  separator* create_lshift_iPhone() {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    unsigned int row = 2;

    float xx = -width*0.5f+wbutton*0.5f+0*wbutton;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    if(other.value()) {
      if(other2.value()) {
        b->set_label("123");
      } else {
        b->set_label(s_other2());
      }
      b->add_callback(new button_cbk(*this,s_other2()));
    } else {
      b->set_label(s_shift());
      b->add_callback(new button_cbk(*this,s_shift()));
    }

    b->confine = true;
    b->hjust = center;

    sep->add(b);

    return sep;
  }
  separator* create_rshift_iPhone() {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    unsigned int row = 2;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    if(other.value()) {
      if(other2.value()) {
        b->set_label("123");
      } else {
        b->set_label(s_other2());
      }
      b->add_callback(new button_cbk(*this,s_other2()));
    } else {
      b->set_label(s_shift());
      b->add_callback(new button_cbk(*this,s_shift()));
    }

    b->confine = true;
    b->hjust = center;

    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }
  separator* create_space_iPhone() {
    separator* sep = new separator;

    float wbutton = 5*width/11;
    float hbutton = hitem();

    unsigned int row = 3;

    float xx = -width*0.5f+wbutton*0.5f+3*width/11;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label("");

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_space()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_lother_iPhone() {
    separator* sep = new separator;

    float wtext = 3*width/11;
    float htext = hitem();

    unsigned int row = 3;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    if(other.value()) {
      b->set_label("ABC");
    } else {
      b->set_label(s_other());
    }

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_other()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_rother_iPhone() {
    separator* sep = new separator;

    float wtext = 3*width/11;
    float htext = hitem();

    unsigned int row = 3;

    float xx = width*0.5f-wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    if(other.value()) {
      b->set_label("ABC");
    } else {
      b->set_label(s_other());
    }

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_other()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_clear_iPhone() {
    separator* sep = new separator;

    float wtext = 1.5f*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_clear());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_clear()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_kind_iPhone() {
    separator* sep = new separator;

    float wtext = 1.5f*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wtext*0.5f+1.5f*width/11;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_kind());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_kind()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_enter_iPhone() {
    separator* sep = new separator;

    float wtext = 3*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = width*0.5f-wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->set_label(s_ok());
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->confine = true;
    b->hjust = center;

    b->copy_cbks(m_cbks);

    sep->add(b);

    return sep;
  }

  ////////////////////////////////////////////////////////////////
  /// variable ///////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  separator* create_button_variable(const std::string& a_label,
                                    const std::string& a_shift,
                                    unsigned int a_row,
                                    unsigned int a_col) {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    float shift_row = a_row*wbutton*0.5f;

    float xx = -width*0.5f+wbutton*0.5f+a_col*wbutton+shift_row;
    float yy = height*0.5f-hbutton*1.5f-a_row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->confine = true;
    b->hjust = center;

    b->width = wbutton;
    b->height = hbutton;

    b->set_label(shift.value()?a_shift:a_label);

    b->add_callback(new button_cbk(*this,shift.value()?a_shift:a_label));


    sep->add(b);

    return sep;
  }
  separator* create_del_variable() {
    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = hitem();

    unsigned int row = 0;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_del());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_del()));

    sep->add(b);

    return sep;
  }
  separator* create_lshift_variable() {
    separator* sep = new separator;

    float wbutton = 1.5f*width/11;
    float hbutton = hitem();

    unsigned int row = 3;

    float xx = -width*0.5f+wbutton*0.5f+0*wbutton;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_shift());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_shift()));

    sep->add(b);

    return sep;
  }
  separator* create_rshift_variable() {
    separator* sep = new separator;

    float wbutton = 1.5f*width/11;
    float hbutton = hitem();

    unsigned int row = 3;

    float xx = width*0.5f-wbutton*0.5f;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_shift());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_shift()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }
  separator* create_space_variable() {
    separator* sep = new separator;

    float wbutton = 5*width/11;
    float hbutton = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wbutton*0.5f+3.5f*width/11;
    float yy = height*0.5f-hbutton*1.5f-row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label("");

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_space()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }
  separator* create_clear_variable() {
    separator* sep = new separator;

    float wtext = 2*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_clear());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_clear()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_kind_variable() {
    separator* sep = new separator;

    float wtext = 1.5f*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = -width*0.5f+wtext*0.5f+2*width/11;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->set_label(s_kind());

    b->confine = true;
    b->hjust = center;

    b->add_callback(new button_cbk(*this,s_kind()));
    b->arm_color = arm_color;

    sep->add(b);

    return sep;
  }

  separator* create_enter_variable() {
    separator* sep = new separator;

    float wtext = 2.5f*width/11;
    float htext = hitem();

    unsigned int row = 4;

    float xx = width*0.5f-wtext*0.5f;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->set_label(s_ok());
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->confine = true;
    b->hjust = center;

    b->copy_cbks(m_cbks);

    sep->add(b);

    return sep;
  }

  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  separator* create_result() {
    separator* sep = new separator;

    float wtext = width;
    float htext = hitem();

    float xx = 0;
    float yy = height*0.5f-htext*0.5f;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    text_t* b = new text_t(m_ttf);
    //tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = colorf_white();
    b->back_area::border_color = colorf_black();
    b->color = colorf_black();
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->strings.add(value.value()); //important.

    //b->add_callback(new button_cbk(*this,s_clear()));
    //b->arm_color = arm_color;
    b->confine = true;

    sep->add(b);

    return sep;
  }

  separator* create_cancel() {
    separator* sep = new separator;

    float wtext = width;
    float htext = hitem();

    unsigned int row = 5;

    float xx = 0;
    float yy = height*0.5f-htext*1.5f-row*htext;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->set_label(s_Cancel());
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->confine = true;
    b->hjust = center;

    b->copy_cbks(m_cancel_cbks);

    sep->add(b);

    return sep;
  }

  float hitem() const {
    unsigned int num_h = 6;
    num_h += show_cancel.value()?1:0; //resut + 4 rows + special row + (cancel).
    return height.value()/num_h;
  }
protected:
  sg::cbks m_cbks;
  sg::cbks m_cancel_cbks;
  separator m_sep;
  const base_freetype& m_ttf;
};

}}

#endif
