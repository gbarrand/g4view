// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_selectable
#define inlib_sg_selectable

#include "_switch"
#include "head_light"
#include "matrix"

#include "plotter"

namespace inlib {
namespace sg {

template <class NODE>
class selectable : public node {
  INLIB_NODE_T(NODE,selectable,inlib::sg::selectable,node)
public:
  sf<float> width;
  sf<float> height;
  sf<bool> border_visible;
  sf<float> border_width;
  sf<float> border_height;
  sf_vec<colorf,float> border_color;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::selectable)
    static const desc_fields s_v(parent::node_desc_fields(),6, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(border_visible),
      INLIB_ARG_FIELD_DESC(border_width),
      INLIB_ARG_FIELD_DESC(border_height),
      INLIB_ARG_FIELD_DESC(border_color)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&border_visible);
    add_field(&border_width);
    add_field(&border_height);
    add_field(&border_color);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    nodekit_pick(a_action,m_group,this);
    //m_group.pick(a_action);
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_group.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.bbox(a_action);
  }

  virtual void event(event_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_group.event(a_action);
    if(a_action.done()) return;
  }
  virtual bool write(write_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    return m_group.write(a_action);
  }
public:
  selectable(const base_freetype& a_ttf)
  :parent()
  ,width(1)
  ,height(1)
  ,border_visible(false)
  ,border_width(0)
  ,border_height(0)
  ,border_color(colorf_grey())

  ,m_ttf(a_ttf)
  ,m_node(a_ttf)
  {
    add_fields();
    init_sg();
  }
  virtual ~selectable() {}
public:
  selectable(const selectable& a_from)
  :parent(a_from)
  ,width(a_from.width)
  ,height(a_from.height)
  ,border_visible(a_from.border_visible)
  ,border_width(a_from.border_width)
  ,border_height(a_from.border_height)
  ,border_color(a_from.border_color)

  ,m_ttf(a_from.m_ttf)
  ,m_node(a_from.m_node)
  {
    add_fields();
    init_sg();
  }
  selectable& operator=(const selectable& a_from){
    parent::operator=(a_from);
    if(&a_from==this) return *this;

    width = a_from.width;
    height = a_from.height;

    border_visible = a_from.border_visible;
    border_width = a_from.border_width;
    border_height = a_from.border_height;
    border_color = a_from.border_color;

    m_node = a_from.m_node;

    return *this;
  }
public:
  const NODE& node() const {return m_node;}
  NODE& node() {return m_node;}
protected:
  void init_sg() {
    m_group.clear();
    m_group.add(new noderef(m_node));
    m_group.add(new noderef(m_border_sep));
  }
  void update_sg(){
    m_node.width = width;
    m_node.height = height;
    update_border();
  }

  void update_border() {
    m_border_sep.clear();

    if(!border_visible.value()) return;

    if(width.value()<=0) return;
    if(height.value()<=0) return;
    if(border_width.value()<=0) return;
    if(border_height.value()<=0) return;

    float bw = border_width;
    float bh = border_height;

    // do it with four externals back_area.

    //sf<float> zfront ?
    float zz = 0;

    // top :
   {separator* sep = new separator;
    m_border_sep.add(sep);

    float wba = width+2*bw;
    float hba = bh;
    float x = 0;
    float y = height*0.5f+bh*0.5f;

    matrix* _m = new matrix;
    _m->set_translate(x,y,zz);
    sep->add(_m);

    back_area* b = new back_area;
    b->border_visible = false;
    b->color = border_color;
    b->width = wba;
    b->height = hba;
    sep->add(b);}

    // bottom :
   {separator* sep = new separator;
    m_border_sep.add(sep);

    float wba = width+2*bw;
    float hba = bh;
    float x = 0;
    float y = -height*0.5f-bh*0.5f;

    matrix* _m = new matrix;
    _m->set_translate(x,y,zz);
    sep->add(_m);

    back_area* b = new back_area;
    b->border_visible = false;
    b->color = border_color;
    b->width = wba;
    b->height = hba;
    sep->add(b);}

    // left :
   {separator* sep = new separator;
    m_border_sep.add(sep);

    float wba = bw;
    float hba = height+2*bh;
    float x = -width*0.5f-bw*0.5f;
    float y = 0;

    matrix* _m = new matrix;
    _m->set_translate(x,y,zz);
    sep->add(_m);

    back_area* b = new back_area;
    b->border_visible = false;
    b->color = border_color;
    b->width = wba;
    b->height = hba;
    sep->add(b);}

    // right :
   {separator* sep = new separator;
    m_border_sep.add(sep);

    float wba = bw;
    float hba = height+2*bh;
    float x = width*0.5f+bw*0.5f;
    float y = 0;

    matrix* _m = new matrix;
    _m->set_translate(x,y,zz);
    sep->add(_m);

    back_area* b = new back_area;
    b->border_visible = false;
    b->color = border_color;
    b->width = wba;
    b->height = hba;
    sep->add(b);}

  }

protected:
  const base_freetype& m_ttf;
  group m_group;
  NODE m_node;
  separator m_border_sep;
};

}}

#endif
