// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_cfitsio
#define inlib_sg_cfitsio

#include "tex_quadrilateral"

#include "nodekit"
#include "sf"
#include "sf_enum"
#include "mf"
#include "sf_lut"
#include "sf_string"
#include "atb_vertices"
#include "bin"

#include "../cfitsio"
#include "../carray"

namespace inlib {
namespace sg {

class cfitsio : public tex_quadrilateral {
  INLIB_NODE(cfitsio,inlib::sg::cfitsio,tex_quadrilateral)
public:
  sf_enum<auto_lut_policy> auto_lut;
  sf_lut<float> lut;
  mf_vec<colorf,float> colors;

  sf<float> hmax; //max bin height (if draw_lego)
  sf<bool> yswap;
  sf<unsigned int> zoom;

  enum _modeling {
    model_flat_point = 0,
    model_flat_line = 1,
    model_flat_triangle = 2,
    model_lego = 3,
    model_image = 4
  };
  sf_enum<_modeling> modeling;

  // not editable :
  mf<char> buffer;
  sf<unsigned int> columns;
  sf<unsigned int> rows;
  sf_enum<cfitsio_bitpix_code> bitpix;

  sf_string infos;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::cfitsio)
    static const desc_fields s_v(parent::node_desc_fields(),12, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC_ENUMS_BEG(auto_lut,3)
        INLIB_ARG_ENUM(auto_lut_none),
        INLIB_ARG_ENUM(auto_lut_min_max),
        INLIB_ARG_ENUM(auto_lut_mean_rms)
      INLIB_ARG_FIELD_DESC_ENUMS_END,

      INLIB_ARG_FIELD_DESC(lut),
      INLIB_ARG_FIELD_DESC(colors),
      INLIB_ARG_FIELD_DESC(hmax),
      INLIB_ARG_FIELD_DESC(yswap),
      INLIB_ARG_FIELD_DESC(zoom),

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(modeling,5)
        INLIB_ARG_ENUM(model_image),
        INLIB_ARG_ENUM(model_flat_point),
        INLIB_ARG_ENUM(model_flat_line),
        INLIB_ARG_ENUM(model_flat_triangle),
        INLIB_ARG_ENUM(model_lego)
      INLIB_ARG_FIELD_DESC_ENUMS_END,

      INLIB_ARG_FIELD_DESC_NOT_EDITABLE(buffer),
      INLIB_ARG_FIELD_DESC_NOT_EDITABLE(columns),
      INLIB_ARG_FIELD_DESC_NOT_EDITABLE(rows),

      INLIB_ARG_FIELD_DESC_NOT_EDITABLE_ENUMS_BEG(bitpix,6)
        "byte_img",byte_img,
        "short_img",short_img,
        "long_img",long_img,
        "longlong_img",longlong_img,
        "float_img",float_img,
        "double_img",double_img
      INLIB_ARG_FIELD_DESC_ENUMS_END,

      INLIB_ARG_FIELD_DESC_NOT_EDITABLE(infos)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&auto_lut);
    add_field(&lut);
    add_field(&colors);
    add_field(&hmax);
    add_field(&yswap);
    add_field(&zoom);
    add_field(&modeling);
    add_field(&buffer);
    add_field(&columns);
    add_field(&rows);
    add_field(&bitpix);
    add_field(&infos);
  }
public:
  cfitsio()
  :parent()
  ,auto_lut(auto_lut_none)
  ,lut()
  ,colors()
  ,hmax(0)
  ,yswap(false)
  ,zoom(1)
  ,modeling(model_image)
  ,buffer()
  ,columns(0)
  ,rows(0)
  ,bitpix(byte_img)
  ,infos()

  ,m_draw_edges(false)
  ,m_lut()
  {
    add_fields();
  }
  virtual ~cfitsio(){}
public:
  cfitsio(const cfitsio& a_from)
  :parent(a_from)
  ,auto_lut(a_from.auto_lut)
  ,lut(a_from.lut)
  ,colors(a_from.colors)
  ,hmax(a_from.hmax)
  ,yswap(a_from.yswap)
  ,zoom(a_from.zoom)
  ,modeling(a_from.modeling)
  ,buffer(a_from.buffer)
  ,columns(a_from.columns)
  ,rows(a_from.rows)
  ,bitpix(a_from.bitpix)
  ,infos(a_from.infos)

  ,m_draw_edges(a_from.m_draw_edges)
  {
    add_fields();
  }
  cfitsio& operator=(const cfitsio& a_from){
    parent::operator=(a_from);
    auto_lut = a_from.auto_lut;
    lut = a_from.lut;
    colors = a_from.colors;
    hmax = a_from.hmax;
    yswap = a_from.yswap;
    zoom = a_from.zoom;
    modeling = a_from.modeling;
    buffer = a_from.buffer;
    columns = a_from.columns;
    rows = a_from.rows;
    bitpix = a_from.bitpix;
    infos = a_from.infos;

    m_draw_edges = a_from.m_draw_edges;
    return *this;
  }
public:
  virtual void render(render_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    if(modeling.value()==model_image) {
      parent::render(a_action);
    } else {
      m_pts.render(a_action);
      m_tris.render(a_action);
      m_segs.render(a_action);
      a_action.set_polygon_offset(a_action.state().m_GL_POLYGON_OFFSET_FILL);
    }
  }
  virtual void pick(pick_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    if(modeling.value()==model_image) {
      parent::pick(a_action);
    } else {
      nodekit_pick(a_action,m_pts,this);
      nodekit_pick(a_action,m_segs,this);
      nodekit_pick(a_action,m_tris,this);
    }
  }
  virtual void bbox(bbox_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    if(modeling.value()==model_image) {
      parent::bbox(a_action);
    } else {
      m_pts.bbox(a_action);
      m_segs.bbox(a_action);
      m_tris.bbox(a_action);
    }
  }
public:
  //void get_min_max_mean_rms(double& a_min,double& a_max,double& a_mean,double& a_rms) {
  //  if(data_touched()) update_min_max_mean_rms();
  //  a_min = m_min;
  //  a_max = m_max;
  //  a_mean = m_mean;
  //  a_rms = m_rms;
  //}

  virtual bool intersect_value(std::ostream& a_out,intersect_type,const line<vec3f>& a_line,std::string& a_s) const {
    // a_line is in local world coordinate.

    float x,y;
    if(!line_2_img_ndc(a_line,x,y)) {a_s.clear();return false;}

    std::string scolor;
    if(!img_ndc_value(x,y,scolor)) {}

    std::string sdata;
    if(!buffer2value(a_out,x,y,sdata)) {}

    a_s.clear();
    if(sdata.size())  a_s += "data "+sdata;
    if(scolor.size()) {
      if(a_s.size()) a_s += ", ";
      a_s += "color "+scolor;
    }

    return a_s.size()?true:false;
  }
protected:
  void look_update_sg(std::ostream& a_out,const state& a_state) {
    if(data_touched()) update_min_max_mean_rms();
    bool draw_edges = false;
    if((modeling.value()==model_flat_triangle)||
       (modeling.value()==model_lego)) draw_edges = a_state.m_GL_LIGHTING?false:true;
    if(touched()||(m_draw_edges!=draw_edges)) {
      update_sg(a_out,draw_edges);
      reset_touched();
      m_draw_edges = draw_edges;
    }
  }

  void update_min_max_mean_rms() {
    //::printf("debug : cfitsio::update_min_max_mean_rms()\n");
    if(!min_max_mean_rms(m_min,m_max,m_mean,m_rms,::sqrt,::fabs)) {}
    std::string _s;
    _s += "min ";
    if(!numas<double>(m_min,_s)){}
    _s += ", max ";
    if(!numas<double>(m_max,_s)){}
    _s += ", mean ";
    if(!numas<double>(m_mean,_s)){}
    _s += ", rms ";
    if(!numas<double>(m_rms,_s)){}
    infos.value_no_cmp(_s);
  }

  void update_sg(std::ostream& a_out,bool a_draw_edges) {

    img.value().clear(); //no touch().

    m_pts.clear();
    m_pts.mode = gl::points();
    m_segs.clear();
    m_segs.mode = gl::lines();
    m_tris.clear();
    m_tris.mode = gl::triangles();

    if(colors.size()<3) { //see lut constructor.
      parent::update_sg(a_out);
      return;
    }

    if(auto_lut.value()==auto_lut_min_max) {
      m_lut = lut_float(float(m_min),float(m_max),colors.size()); //lut is a field then inlib:: is needed.
    } else if(auto_lut.value()==auto_lut_mean_rms) {
      double mn = m_mean-m_rms*0.5f;
      double mx = m_mean+m_rms*0.5f;
      //::printf("debug : auto_lut_mean_rms : %g %g\n",mn,mx);
      m_lut = lut_float(float(mn),float(mx),colors.size());
    } else {
      //::printf("debug : auto_lut_none : %g %g\n",lut.value().mn(),lut.value().mx());
      m_lut = lut_float(lut.value().mn(),lut.value().mx(),colors.size());
    }

    if(modeling.value()==model_image) {

      if(buffer.size()) {
        const char* dbuffer = vec_data(buffer.values());
        img_byte& _img = img.value();
        if(!cfitsio_buffer2img(a_out,bitpix.value(),columns.value(),rows.value(),dbuffer,
                               zoom.value(),yswap.value(),m_lut,colors.values(),_img)) {
          img.value().clear(); //no touch().
        }
      }

    /////////////////////////////////////////////
    /////////////////////////////////////////////
    /////////////////////////////////////////////
    } else {
      if(!buffer2bins(a_draw_edges)) {
        m_pts.clear();
        m_segs.clear();
        m_tris.clear();
      }
    }

    parent::update_sg(a_out);
    //img.reset_touched(); //IMPORTANT

  }

protected:
  bool data_touched() const {
    if(buffer.touched()) return true;
    if(columns.touched()) return true;
    if(rows.touched()) return true;
    if(bitpix.touched()) return true;
    return false;
  }

  ////////////////////////////////////////////////////////////////////////////////
  /// bins : /////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  template <class T>
  bool array2value(std::ostream& a_out,float a_x,float a_y,std::string& a_s) const {
    unsigned int _cols = columns.value();
    unsigned int _rows = rows.value();
    if(!buffer.size() || !_cols || !_rows) {a_s.clear();return false;}

    //image coordinates :
    int ix = int(float(_cols)*a_x);
    int iy = int(float(_rows)*a_y);

    if((ix<0)||(iy<0)||(ix>=int(_cols))||(iy>=int(_rows))) {a_s.clear();return false;}

    const char* dbuffer = vec_data(buffer.values()); //data buffer.

    // zoom = 2 => twice less pixels visualized than in data.
    //unsigned int _zoom = zoom.value();
    //if(!_zoom) _zoom = 1;

    T* dpos = (T*)dbuffer+_cols*iy+ix;

    num2s(*dpos,a_s);

    return true;
  }

  bool buffer2value(std::ostream& a_out,float a_x,float a_y,std::string& a_s) const {
    if(bitpix.value()==byte_img) {
      if(!array2value<unsigned char>(a_out,a_x,a_y,a_s)) return false;
    } else if(bitpix.value()==short_img) {
      if(!array2value<short>(a_out,a_x,a_y,a_s)) return false;
    } else if(bitpix.value()==long_img) {
      if(!array2value<int>(a_out,a_x,a_y,a_s)) return false;
    } else if(bitpix.value()==longlong_img) {
      if(!array2value<int64>(a_out,a_x,a_y,a_s)) return false;
    } else if(bitpix.value()==float_img) {
      if(!array2value<float>(a_out,a_x,a_y,a_s)) return false;
    } else if(bitpix.value()==double_img) {
      if(!array2value<double>(a_out,a_x,a_y,a_s)) return false;
    } else {
      a_s.clear();
      return false;
    }
    return true;
  }

  ////////////////////////////////////////////////////////////////////////////////
  /// bins : /////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  template <class T>
  bool array2bins(bool a_draw_edges) {
    unsigned int _cols = columns.value();
    unsigned int _rows = rows.value();
    if(!buffer.size() || !_cols || !_rows) return false;

    char* dbuffer = vec_data(buffer.values());

    // zoom = 2 => twice less pixels visualized than in data.
    unsigned int _zoom = zoom.value();
    if(!_zoom) _zoom = 1;

    plane<vec3f> plane(corners[0],corners[1],corners[3]);
    vec3f _normal = plane.normal();

    float hdata = float(m_max)-float(m_min);

    size_t vlut;
    float value;
    vec3f b0,b1,b2,b3;
    vec3f e0,e1,e2,e3;
    vec3f nm,tmp1,tmp2;
    float h,x,y;
    vec3f p;

    if(_zoom==1) {
      bin_allocate((bin_modeling)modeling.value(),a_draw_edges,_rows*_cols,m_pts,m_segs,m_tris);

      float _sx = 1.0f/float(_cols-1);
      float _sy = 1.0f/float(_rows-1);

      //  if(a_yswap) {

      T* dpos = (T*)dbuffer;
      for(unsigned int iy=0;iy<_rows;iy++) {
        for(unsigned int ix=0;ix<_cols;ix++) {
          value = float(*dpos);
          vlut = m_lut.apply(value);
          const colorf& col = colors.values()[vlut];

          h = (hdata!=0.0f)?hmax.value()*(value-float(m_min))/hdata:0;

          x = float(ix)*_sx;
          y = float(iy)*_sy;
          if(!img_ndc_2_point(x,y,b0)) return false;

          x = float(ix+1)*_sx;
          y = float(iy)*_sy;
          if(!img_ndc_2_point(x,y,b1)) return false;

          x = float(ix+1)*_sx;
          y = float(iy+1)*_sy;
          if(!img_ndc_2_point(x,y,b2)) return false;

          x = float(ix)*_sx;
          y = float(iy+1)*_sy;
          if(!img_ndc_2_point(x,y,b3)) return false;

          e0 = b0 + _normal*h;
          e1 = b1 + _normal*h;
          e2 = b2 + _normal*h;
          e3 = b3 + _normal*h;

          bin((bin_modeling)modeling.value(),
              a_draw_edges,col,colorf_black(),colorf_lightgrey(),
              b0,b1,b2,b3,e0,e1,e2,e3,
              m_pts,m_segs,m_tris,
              nm,tmp1,tmp2);

          dpos++;
        }
      }

    } else {
      unsigned int vis_cols = _cols/_zoom;
      unsigned int vis_rows = _rows/_zoom;
      if(!vis_cols || !vis_rows) return false;

      typedef float VT;
      VT* zbuffer = 0;
      if(!cfitsio_zoom_data<T,VT>(_cols,_rows,dbuffer,vis_cols,vis_rows,zbuffer)) {
        //a_out << "array2bin :"
        //      << " zoom_data() failed."
        //      << std::endl;
        return false;
      }

      bin_allocate((bin_modeling)modeling.value(),a_draw_edges,vis_rows*vis_cols,m_pts,m_segs,m_tris);

      float _sx = 1.0f/float(vis_cols-1);
      float _sy = 1.0f/float(vis_rows-1);

      //  if(a_yswap) {

      VT* zpos = zbuffer;
      for(unsigned int iy=0;iy<vis_rows;iy++) {
        for(unsigned int ix=0;ix<vis_cols;ix++) {
          value = float(*zpos);
          vlut = m_lut.apply(value);
          const colorf& col = colors.values()[vlut];

          h = (hdata!=0.0f)?hmax.value()*(value-float(m_min))/hdata:0;

          x = float(ix)*_sx;
          y = float(iy)*_sy;
          if(!img_ndc_2_point(x,y,b0)) {delete [] zbuffer;return false;}

          x = float(ix+1)*_sx;
          y = float(iy)*_sy;
          if(!img_ndc_2_point(x,y,b1)) {delete [] zbuffer;return false;}

          x = float(ix+1)*_sx;
          y = float(iy+1)*_sy;
          if(!img_ndc_2_point(x,y,b2)) {delete [] zbuffer;return false;}

          x = float(ix)*_sx;
          y = float(iy+1)*_sy;
          if(!img_ndc_2_point(x,y,b3)) {delete [] zbuffer;return false;}

          e0 = b0 + _normal*h;
          e1 = b1 + _normal*h;
          e2 = b2 + _normal*h;
          e3 = b3 + _normal*h;

          bin((bin_modeling)modeling.value(),
              a_draw_edges,col,colorf_black(),colorf_lightgrey(),
              b0,b1,b2,b3,e0,e1,e2,e3,
              m_pts,m_segs,m_tris,
              nm,tmp1,tmp2);

          zpos++;
        }
      }

      delete [] zbuffer;
    }

    return true;
  }

  bool buffer2bins(bool a_yswap) {
    if(bitpix.value()==byte_img) {
      if(!array2bins<unsigned char>(a_yswap)) return false;
    } else if(bitpix.value()==short_img) {
      if(!array2bins<short>(a_yswap)) return false;
    } else if(bitpix.value()==long_img) {
      if(!array2bins<int>(a_yswap)) return false;
    } else if(bitpix.value()==longlong_img) {
      if(!array2bins<int64>(a_yswap)) return false;
    } else if(bitpix.value()==float_img) {
      if(!array2bins<float>(a_yswap)) return false;
    } else if(bitpix.value()==double_img) {
      if(!array2bins<double>(a_yswap)) return false;
    } else {
      return false;
    }
    return true;
  }

  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  template <class T,class ZT>
  static bool zoom_data(unsigned int _cols,unsigned int _rows,const char* a_buffer,
                        unsigned int a_zcols,unsigned int a_zrows,ZT*& a_zbuffer) {
    if(!_cols || !_rows) {a_zbuffer = 0;return false;}

    unsigned int zsz = a_zcols*a_zrows;

    a_zbuffer = new ZT[zsz]; //zoom buffer.
    if(!a_zbuffer) return false;

    typedef unsigned int uint;
    uint* nbuffer = new uint[zsz];
    if(!nbuffer) {
      delete [] a_zbuffer;
      a_zbuffer = 0;
      return false;
    }

   {ZT* zpos = a_zbuffer;
    uint* npos = nbuffer;
    for(unsigned int iy=0;iy<a_zrows;iy++) {
      for(unsigned int ix=0;ix<a_zcols;ix++) {
        *zpos = ZT(0);zpos++;
        *npos = 0;npos++;
      }
    }}

    // zoom data :
    // zoom buffer is centered on the center of the data image.
   {T* dpos = (T*)a_buffer;
    float _sx = float(a_zcols-1)/float(_cols-1);
    float _sy = float(a_zrows-1)/float(_rows-1);
    unsigned int zx,zy;
    ZT* zpos;
    uint* npos;
   {for(unsigned int iy=0;iy<_rows;iy++) {
      for(unsigned int ix=0;ix<_cols;ix++) {
        // position in zoom buffer :
        zx = float(ix)*_sx;
        zy = float(iy)*_sy;
        zpos = a_zbuffer+a_zcols*zy+zx;
        *zpos += ZT(*dpos);
        npos = nbuffer+a_zcols*zy+zx;
        *npos += 1;
        dpos++;
      }
    }}}

   {ZT* zpos = a_zbuffer;
    uint* npos = nbuffer;
    for(unsigned int iy=0;iy<a_zrows;iy++) {
      for(unsigned int ix=0;ix<a_zcols;ix++) {
        if(*npos) {*zpos = (*zpos)/ZT(*npos);}
        zpos++;npos++;
      }
    }}

    delete [] nbuffer;

    return true;
  }

public:
  template <class HISTO>
  bool h1_fill(HISTO& a_histo) const {
    size_t cells = columns.value()*rows.value();
    if(!buffer.size() || !cells) {a_histo.reset();return false;}
    const char* dbuffer = vec_data(buffer.values());
    return cfitsio_h1_fill<HISTO>(cells,dbuffer,bitpix.value(),a_histo);
  }
public:
  template <class TO>
  bool min_max_mean_rms(TO& a_mn,TO& a_mx,TO& a_mean,TO& a_rms,TO(*a_sqrt)(TO),TO(*a_fabs)(TO)) const {
    size_t cells = columns.value()*rows.value();
    if(!buffer.size() || !cells) {
      a_mn=TO(0);a_mx=TO(0);
      a_mean=TO(0);a_rms=TO(0);
      return false;
    }
    const char* dbuffer = vec_data(buffer.values());
    return cfitsio_min_max_mean_rms<TO>(cells,dbuffer,bitpix.value(),a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  }
protected:
  atb_vertices m_pts;
  atb_vertices m_segs;
  atb_vertices m_tris;
  bool m_draw_edges;
  lut_float m_lut;
  double m_min,m_max,m_mean,m_rms;
};

}}

#endif
