// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_progress
#define inlib_sg_progress

#include "back_area"

#include "matrix"

#include "../colorf"
#include "enums"

namespace inlib {
namespace sg {

class progress : public back_area {
  INLIB_NODE(progress,inlib::sg::progress,back_area)
public:
  sf<float> value; //[0,1]

  sf_vec<colorf,float> color;
  sf<bool> back_visible;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::progress)
    static const desc_fields s_v(parent::node_desc_fields(),3, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(value),
      INLIB_ARG_FIELD_DESC(color),
      INLIB_ARG_FIELD_DESC(back_visible)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&value);

    add_field(&color);
    add_field(&back_visible);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(back_visible.value()) m_back_sep.render(a_action);
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(back_visible.value()) {
      m_back_sep.pick(a_action);
      if(a_action.done()) return;
    }
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(back_visible.value()) {
      m_back_sep.search(a_action);
      if(a_action.done()) return;
    }
    m_sep.search(a_action);
    if(a_action.done()) return;
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(back_visible.value()) m_back_sep.bbox(a_action);
    m_sep.bbox(a_action);
  }
public:
  progress()
  :parent()
  ,value(0)

  ,color(colorf_black())
  ,back_visible(true)
  {
    add_fields();
  }
  virtual ~progress(){}
public:
  progress(const progress& a_from)
  :parent(a_from)
  ,value(a_from.value)

  ,color(a_from.color)
  ,back_visible(a_from.back_visible)
  {
    add_fields();
  }
  progress& operator=(const progress& a_from){
    parent::operator=(a_from);
    value = a_from.value;

    color = a_from.color;
    back_visible = a_from.back_visible;

    return *this;
  }
protected:
  void update_sg() {
    parent::update_sg();

    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;

    float fact = value;
    if(fact>1) fact = 1;
    if(fact<0) fact = 0;

    float xb = -width*0.5f;
    float xe =  xb+width*fact;
    float yb = -height*0.5f;
    float ye =  height*0.5f;

    //sf<float> zfront ?
    float zborder = back_visible.value()?0.01f:0;
    float zcontent = zborder*0.5f;

   {sg::rgba* mat = new sg::rgba();
    mat->color = color;
    m_sep.add(mat);

    normal* nm = new normal;
    //nm->vec.value(); //default is z. ok.
    m_sep.add(nm);

    vertices* vtxs = new vertices;
    vtxs->mode = gl::triangle_fan();
    m_sep.add(vtxs);

    float zz = zcontent;
    vtxs->add(xb,yb,zz);
    vtxs->add(xe,yb,zz);
    vtxs->add(xe,ye,zz);
    vtxs->add(xb,ye,zz);}

   {//content border :
    sg::rgba* mat = new sg::rgba();
    mat->color = border_color;
    m_sep.add(mat);

    draw_style* ds = new draw_style;
    ds->style = draw_lines;
    ds->line_width = 1;
    m_sep.add(ds);

    vertices* vtxs = new vertices;
    vtxs->mode = gl::line_strip();
    m_sep.add(vtxs);

    float zz = zborder;
    vtxs->add(xb,yb,zz);
    vtxs->add(xe,yb,zz);
    vtxs->add(xe,ye,zz);
    vtxs->add(xb,ye,zz);
    vtxs->add(xb,yb,zz);}

  }
protected:
  separator m_sep;
};

}}

//inlib_build_use kernel

#endif
