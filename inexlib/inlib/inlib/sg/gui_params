// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_gui_params
#define inlib_sg_gui_params

#include "../colorfs"
#include "../rcmp"
#include "../tos_deprec"
#include "../entries_color"
#include "../lina/rotf"
#include "../sqrot"
#include "../num2s"
#include "enum2s"
#include "strings"

namespace inlib {
namespace sg {

class gui_params {
public:
  INLIB_CLASS_STRING(sliders_2b)
  INLIB_CLASS_STRING(sliders_2b_2l)
  INLIB_CLASS_STRING(sliders_bl)
  INLIB_CLASS_STRING(sliders_l)

  // params names :
  INLIB_CLASS_STRING(vr_mode)
  INLIB_CLASS_STRING_VALUE(auto_hide_scene,ui_hide_scene)

  INLIB_CLASS_STRING_VALUE(scene_screen_color,background)
  INLIB_CLASS_STRING(gui_screen_color)
  INLIB_CLASS_STRING(gui_font)
  INLIB_CLASS_STRING(gui_font_modeling)

  INLIB_CLASS_STRING(sliders_pos)
  INLIB_CLASS_STRING(list_visible_items)
  INLIB_CLASS_STRING(corner_radius)

  INLIB_CLASS_STRING_VALUE(image_buttons,icons)
  INLIB_CLASS_STRING(plane_viewer)
  INLIB_CLASS_STRING(touch_move)
  INLIB_CLASS_STRING(light_on)
  INLIB_CLASS_STRING(blend_on)
  INLIB_CLASS_STRING(smooth_on)
  INLIB_CLASS_STRING(solid)
  INLIB_CLASS_STRING(reduced_wire_frame)
  INLIB_CLASS_STRING(max_depth)
  INLIB_CLASS_STRING(use_gsto)

  INLIB_CLASS_STRING_VALUE(image_expand,tex_expand)
  INLIB_CLASS_STRING(node_height)
  INLIB_CLASS_STRING(node_color)
  INLIB_CLASS_STRING(time_interval)
  INLIB_CLASS_STRING(anim_interval)
  INLIB_CLASS_STRING(cycle_secs)
  INLIB_CLASS_STRING(console_scale)
  INLIB_CLASS_STRING(console_width)
  INLIB_CLASS_STRING(console_height)

  // camera :
  INLIB_CLASS_STRING(single_shoot)
  INLIB_CLASS_STRING(90)
  INLIB_CLASS_STRING(anim_mode)

  INLIB_CLASS_STRING_SVALUE(anim_around_focal,"anim around focal")
  INLIB_CLASS_STRING(viewing)

  // for rwc of camera :
  INLIB_CLASS_STRING_VALUE(cam_x,x)
  INLIB_CLASS_STRING_VALUE(cam_y,y)
  INLIB_CLASS_STRING_VALUE(cam_z,z)
  INLIB_CLASS_STRING_VALUE(cam_near,near)
  INLIB_CLASS_STRING_VALUE(cam_far,far)
  INLIB_CLASS_STRING_VALUE(cam_focal,focal)
  INLIB_CLASS_STRING_VALUE(cam_dx,dx)
  INLIB_CLASS_STRING_VALUE(cam_da,da)
  INLIB_CLASS_STRING_VALUE(cam_ds,ds)
  INLIB_CLASS_STRING_SVALUE(cam_zof,"zoom out factor")
  INLIB_CLASS_STRING_VALUE(cam_orientation,orientation)

  INLIB_CLASS_STRING(camera_tiled)
  INLIB_CLASS_STRING(plot_col)
  INLIB_CLASS_STRING(plot_row)

  // old apps -> wall.
  INLIB_CLASS_STRING(use_vbo)
  INLIB_CLASS_STRING(store_mode)
  INLIB_CLASS_STRING(camera_kind)
  INLIB_CLASS_STRING(ortho)
  INLIB_CLASS_STRING(perspective)

  INLIB_CLASS_STRING(anim_on)
public:
  gui_params()
  :m_vr_mode(false)
  ,m_auto_hide_scene(true)

  ,m_scene_screen_color(colorf_white())
  ,m_gui_screen_color(colorf_white())
//,m_gui_font(font_arialbd_ttf())         //antialiasing problem.
//,m_gui_font(font_courbd_ttf())          //beurk
//,m_gui_font(font_lucidagrandebd_ttf())  //Apple.
#ifdef tools_sg_gui_params
  ,m_gui_font(font_lato_bold_ttf())
#else
  ,m_gui_font(font_helveticabd_ttf())     //I find this one nicer.
#endif  
  ,m_gui_font_modeling(font_filled) //font_filled to be consistent with sg/[style,text_style,base_freetype] defaults.
  ,m_console_scale(1)
  ,m_console_width(0.3F)   //percent of gui width
  ,m_console_height(0.05F) //percent of gui height

  ,m_image_buttons(false)
  ,m_plane_viewer(true)
  ,m_touch_move(true)
  ,m_sliders_pos(s_sliders_2b())
  ,m_list_visible_items(5)
  ,m_corner_radius(0)

  ,m_light_on(false)
  ,m_blend_on(false)
  ,m_smooth_on(false)
  ,m_solid(false)
  ,m_reduced_wire_frame(true)
  ,m_max_depth(9999)
  ,m_use_gsto(false)
  ,m_gsto_mode(s_gsto_memory())
  ,m_anim_on(false)
  ,m_image_expand(true)
  ,m_node_height(0)
  ,m_node_color() //empty string.
  ,m_time_interval(0)
  ,m_anim_interval(16)
  ,m_cycle_secs(10)

  ,m_camera_type()

  ,m_single_shoot(false)
  ,m_90(false)
  ,m_anim_mode(anim_mode_0)
  ,m_anim_around_focal(true)
  ,m_viewing(true)

  ,m_cam_x(0)
  ,m_cam_y(0)
  ,m_cam_z(0)
  ,m_cam_near(0)
  ,m_cam_far(0)
  ,m_cam_focal(0)
  ,m_cam_dx(0)
  ,m_cam_da(0)
  ,m_cam_ds(0)
  ,m_cam_zof(1)
  ,m_cam_orientation(rotf(vec3f(0,0,1),0))

  ,m_cam_tiled(true)
  ,m_plot_col(0)
  ,m_plot_row(0)
  {
    set_gui_default();
  }
  virtual ~gui_params(){}
public:
  gui_params(const gui_params& a_from)
  :m_vr_mode(a_from.m_vr_mode)
  ,m_auto_hide_scene(a_from.m_auto_hide_scene)

  ,m_scene_screen_color(a_from.m_scene_screen_color)
  ,m_gui_screen_color(a_from.m_gui_screen_color)
  ,m_gui_back_color(a_from.m_gui_back_color)
  ,m_gui_front_color(a_from.m_gui_front_color)
  ,m_gui_dir_color(a_from.m_gui_dir_color)
  ,m_gui_arm_color(a_from.m_gui_arm_color)
  ,m_gui_border_color(a_from.m_gui_border_color)
  ,m_gui_text_back_color(a_from.m_gui_text_back_color)
  ,m_gui_text_front_color(a_from.m_gui_text_front_color)
  ,m_gui_text_border_color(a_from.m_gui_text_border_color)
  ,m_gui_warn_back_color(a_from.m_gui_warn_back_color)
  ,m_gui_warn_ok_color(a_from.m_gui_warn_ok_color)
  ,m_gui_warn_front_color(a_from.m_gui_warn_front_color)
  ,m_gui_warn_border_color(a_from.m_gui_warn_border_color)
  ,m_gui_label_back_color(a_from.m_gui_label_back_color)
  ,m_gui_font(a_from.m_gui_font)
  ,m_gui_font_modeling(a_from.m_gui_font_modeling)

  ,m_console_scale(a_from.m_console_scale)
  ,m_console_width(a_from.m_console_width)
  ,m_console_height(a_from.m_console_height)

  ,m_image_buttons(a_from.m_image_buttons)
  ,m_plane_viewer(a_from.m_plane_viewer)
  ,m_touch_move(a_from.m_touch_move)
  ,m_sliders_pos(a_from.m_sliders_pos)
  ,m_list_visible_items(a_from.m_list_visible_items)
  ,m_list_item_layout(a_from.m_list_item_layout)
  ,m_corner_radius(a_from.m_corner_radius)

  ,m_light_on(a_from.m_light_on)
  ,m_blend_on(a_from.m_blend_on)
  ,m_smooth_on(a_from.m_smooth_on)
  ,m_solid(a_from.m_solid)
  ,m_reduced_wire_frame(a_from.m_reduced_wire_frame)
  ,m_max_depth(a_from.m_max_depth)
  ,m_use_gsto(a_from.m_use_gsto)
  ,m_gsto_mode(a_from.m_gsto_mode)
  ,m_anim_on(a_from.m_anim_on)
  ,m_image_expand(a_from.m_image_expand)
  ,m_node_height(a_from.m_node_height)
  ,m_node_color(a_from.m_node_color)
  ,m_time_interval(a_from.m_time_interval)
  ,m_anim_interval(a_from.m_anim_interval)
  ,m_cycle_secs(a_from.m_cycle_secs)

  ,m_camera_type(a_from.m_camera_type)

  ,m_single_shoot(a_from.m_single_shoot)
  ,m_90(a_from.m_90)
  ,m_anim_mode(a_from.m_anim_mode)
  ,m_anim_around_focal(a_from.m_anim_around_focal)
  ,m_viewing(a_from.m_viewing)

  ,m_cam_x(a_from.m_cam_x)
  ,m_cam_y(a_from.m_cam_y)
  ,m_cam_z(a_from.m_cam_z)
  ,m_cam_near(a_from.m_cam_near)
  ,m_cam_far(a_from.m_cam_far)
  ,m_cam_focal(a_from.m_cam_focal)
  ,m_cam_dx(a_from.m_cam_dx)
  ,m_cam_da(a_from.m_cam_da)
  ,m_cam_ds(a_from.m_cam_ds)
  ,m_cam_zof(a_from.m_cam_zof)
  ,m_cam_orientation(a_from.m_cam_orientation)

  ,m_cam_tiled(a_from.m_cam_tiled)
  ,m_plot_col(a_from.m_plot_col)
  ,m_plot_row(a_from.m_plot_row)
  {}
  gui_params& operator=(const gui_params& a_from) {
    m_vr_mode = a_from.m_vr_mode;
    m_auto_hide_scene = a_from.m_auto_hide_scene;

    m_scene_screen_color = a_from.m_scene_screen_color;
    m_gui_screen_color = a_from.m_gui_screen_color;
    m_gui_back_color = a_from.m_gui_back_color;
    m_gui_front_color = a_from.m_gui_front_color;
    m_gui_dir_color = a_from.m_gui_dir_color;
    m_gui_arm_color = a_from.m_gui_arm_color;
    m_gui_border_color = a_from.m_gui_border_color;
    m_gui_text_back_color = a_from.m_gui_text_back_color;
    m_gui_text_front_color = a_from.m_gui_text_front_color;
    m_gui_text_border_color = a_from.m_gui_text_border_color;
    m_gui_warn_back_color = a_from.m_gui_warn_back_color;
    m_gui_warn_ok_color = a_from.m_gui_warn_ok_color;
    m_gui_warn_front_color = a_from.m_gui_warn_front_color;
    m_gui_warn_border_color = a_from.m_gui_warn_border_color;
    m_gui_label_back_color = a_from.m_gui_label_back_color;
    m_gui_font = a_from.m_gui_font;
    m_gui_font_modeling = a_from.m_gui_font_modeling;

    m_console_scale = a_from.m_console_scale;
    m_console_width = a_from.m_console_width;
    m_console_height = a_from.m_console_height;

    m_image_buttons = a_from.m_image_buttons;
    m_plane_viewer = a_from.m_plane_viewer;
    m_touch_move = a_from.m_touch_move;
    m_sliders_pos = a_from.m_sliders_pos;
    m_list_visible_items = a_from.m_list_visible_items;
    m_list_item_layout = a_from.m_list_item_layout;
    m_corner_radius = a_from.m_corner_radius;

    m_light_on = a_from.m_light_on;
    m_blend_on = a_from.m_blend_on;
    m_smooth_on = a_from.m_smooth_on;
    m_solid = a_from.m_solid;
    m_use_gsto = a_from.m_use_gsto;
    m_reduced_wire_frame = a_from.m_reduced_wire_frame;
    m_max_depth = a_from.m_max_depth;
    m_gsto_mode = a_from.m_gsto_mode;
    m_anim_on = a_from.m_anim_on;
    m_image_expand = a_from.m_image_expand;
    m_node_height = a_from.m_node_height;
    m_node_color = a_from.m_node_color;
    m_time_interval = a_from.m_time_interval;
    m_anim_interval = a_from.m_anim_interval;
    m_cycle_secs = a_from.m_cycle_secs;

    m_camera_type = a_from.m_camera_type;

    m_single_shoot = a_from.m_single_shoot;
    m_90 = a_from.m_90;
    m_anim_mode = a_from.m_anim_mode;
    m_anim_around_focal = a_from.m_anim_around_focal;
    m_viewing = a_from.m_viewing;

    m_cam_x = a_from.m_cam_x;
    m_cam_y = a_from.m_cam_y;
    m_cam_z = a_from.m_cam_z;
    m_cam_near = a_from.m_cam_near;
    m_cam_far = a_from.m_cam_far;
    m_cam_focal = a_from.m_cam_focal;
    m_cam_dx = a_from.m_cam_dx;
    m_cam_da = a_from.m_cam_da;
    m_cam_ds = a_from.m_cam_ds;
    m_cam_zof = a_from.m_cam_zof;
    m_cam_orientation = a_from.m_cam_orientation;

    m_cam_tiled = a_from.m_cam_tiled;
    m_plot_col = a_from.m_plot_col;
    m_plot_row = a_from.m_plot_row;

    return *this;
  }
public:
  typedef std::pair<std::string,std::string> arg;

  static void names(std::vector<std::string>& a_args) {
    a_args.clear();
    a_args.push_back(s_vr_mode());
    a_args.push_back(s_auto_hide_scene());

    a_args.push_back(s_scene_screen_color());
    a_args.push_back(s_gui_screen_color());
    a_args.push_back(s_gui_font());
    a_args.push_back(s_gui_font_modeling());
    a_args.push_back(s_console_scale());
    a_args.push_back(s_console_width());
    a_args.push_back(s_console_height());

    a_args.push_back(s_image_buttons());
    a_args.push_back(s_plane_viewer());
    a_args.push_back(s_touch_move());

    a_args.push_back(s_sliders_pos());
    a_args.push_back(s_list_visible_items());
    a_args.push_back(s_corner_radius());

    a_args.push_back(s_light_on());
    a_args.push_back(s_solid());
    a_args.push_back(s_reduced_wire_frame());
    a_args.push_back(s_max_depth());
    a_args.push_back(s_image_expand());
    a_args.push_back(s_node_height());
    a_args.push_back(s_node_color());
    a_args.push_back(s_time_interval());
    a_args.push_back(s_anim_interval());
    a_args.push_back(s_cycle_secs());

    a_args.push_back(s_camera_type());

    a_args.push_back(s_single_shoot());
    a_args.push_back(s_90());
    a_args.push_back(s_anim_mode());
    a_args.push_back(s_anim_around_focal());
    a_args.push_back(s_viewing());

    a_args.push_back(s_cam_x());
    a_args.push_back(s_cam_y());
    a_args.push_back(s_cam_z());
    a_args.push_back(s_cam_near());
    a_args.push_back(s_cam_far());
    a_args.push_back(s_cam_focal());
    a_args.push_back(s_cam_dx());
    a_args.push_back(s_cam_da());
    a_args.push_back(s_cam_ds());
    a_args.push_back(s_cam_zof());
    a_args.push_back(s_cam_orientation());

    a_args.push_back(s_camera_tiled());
    a_args.push_back(s_plot_col());
    a_args.push_back(s_plot_row());

    a_args.push_back(s_gsto_mode());
  }

  void get_in_args(std::vector<arg>& a_args){
    // used in wall/screen_dispatch.
    a_args.clear();

    a_args.push_back(arg(s_vr_mode(),tos(m_vr_mode)));
    a_args.push_back(arg(s_auto_hide_scene(),tos(m_auto_hide_scene)));

    std::string stmp;
    if(!nums2s<colorf>(m_scene_screen_color,stmp," ")){}
    a_args.push_back(arg(s_scene_screen_color(),stmp));
    if(!nums2s<colorf>(m_gui_screen_color,stmp," ")){}
    a_args.push_back(arg(s_gui_screen_color(),stmp));

    a_args.push_back(arg(s_gui_font(),m_gui_font));
    a_args.push_back(arg(s_gui_font_modeling(),tos(m_gui_font_modeling)));

    a_args.push_back(arg(s_console_scale(),tos(m_console_scale)));
    a_args.push_back(arg(s_console_width(),tos(m_console_width)));
    a_args.push_back(arg(s_console_height(),tos(m_console_height)));

    a_args.push_back(arg(s_image_buttons(),tos(m_image_buttons)));
    a_args.push_back(arg(s_plane_viewer(),tos(m_plane_viewer)));
    a_args.push_back(arg(s_touch_move(),tos(m_touch_move)));

    a_args.push_back(arg(s_sliders_pos(),m_sliders_pos));
    a_args.push_back(arg(s_list_visible_items(),tos(m_list_visible_items)));
    a_args.push_back(arg(s_corner_radius(),tos(m_corner_radius)));

    a_args.push_back(arg(s_light_on(),tos(m_light_on)));
    a_args.push_back(arg(s_blend_on(),tos(m_blend_on)));
    a_args.push_back(arg(s_smooth_on(),tos(m_smooth_on)));
    a_args.push_back(arg(s_solid(),tos(m_solid)));
    a_args.push_back(arg(s_reduced_wire_frame(),tos(m_reduced_wire_frame)));
    a_args.push_back(arg(s_max_depth(),tos(m_max_depth)));
    a_args.push_back(arg(s_image_expand(),tos(m_image_expand)));
    a_args.push_back(arg(s_node_height(),tos(m_node_height)));
    a_args.push_back(arg(s_node_color(),m_node_color));
    a_args.push_back(arg(s_time_interval(),tos(m_time_interval)));
    a_args.push_back(arg(s_anim_interval(),tos(m_anim_interval)));
    a_args.push_back(arg(s_cycle_secs(),tos(m_cycle_secs)));

    a_args.push_back(arg(s_camera_type(),m_camera_type));

    a_args.push_back(arg(s_single_shoot(),tos(m_single_shoot)));
    a_args.push_back(arg(s_90(),tos(m_90)));
    a_args.push_back(arg(s_anim_mode(),tos(m_anim_mode)));
    a_args.push_back(arg(s_anim_around_focal(),tos(m_anim_around_focal)));
    a_args.push_back(arg(s_viewing(),tos(m_viewing)));

    a_args.push_back(arg(s_cam_x(),tos(m_cam_x)));
    a_args.push_back(arg(s_cam_y(),tos(m_cam_y)));
    a_args.push_back(arg(s_cam_z(),tos(m_cam_z)));
    a_args.push_back(arg(s_cam_near(),tos(m_cam_near)));
    a_args.push_back(arg(s_cam_far(),tos(m_cam_far)));
    a_args.push_back(arg(s_cam_focal(),tos(m_cam_focal)));
    a_args.push_back(arg(s_cam_dx(),tos(m_cam_dx)));
    a_args.push_back(arg(s_cam_da(),tos(m_cam_da)));
    a_args.push_back(arg(s_cam_ds(),tos(m_cam_ds)));
    a_args.push_back(arg(s_cam_zof(),tos(m_cam_zof)));

   {std::string s;
    if(tos(m_cam_orientation,s)) {
      a_args.push_back(arg(s_cam_orientation(),s));
    }}

    a_args.push_back(arg(s_camera_tiled(),tos(m_cam_tiled)));
    a_args.push_back(arg(s_plot_col(),tos(m_plot_col)));
    a_args.push_back(arg(s_plot_row(),tos(m_plot_row)));

    a_args.push_back(arg(s_gsto_mode(),m_gsto_mode));
    a_args.push_back(arg(s_anim_on(),tos(m_anim_on)));
  }

  bool set_from_args(const std::vector<arg>& a_args){
    bool status = true;
    for(unsigned int index=0;index<a_args.size();index++) {
      const std::string& lab = a_args[index].first;
      const std::string& val = a_args[index].second;

      if(rcmp(lab,s_vr_mode())) {
        bool changed;
        if(!to<bool>(m_vr_mode,val,changed)) status = false;

      } else if(rcmp(lab,s_auto_hide_scene())) {
        bool changed;
        if(!to<bool>(m_auto_hide_scene,val,changed)) status = false;

      } else if(rcmp(lab,s_scene_screen_color())) {
        float r,g,b,a;
        if(!entries_color(val,r,g,b,a)) {
          status = false;
        } else {
          m_scene_screen_color = colorf(r,g,b,a);
        }

      } else if(rcmp(lab,s_gui_screen_color())) {
        float r,g,b,a;
        if(!entries_color(val,r,g,b,a)) {
          status = false;
        } else {
          m_gui_screen_color = colorf(r,g,b,a);
        }

      } else if(rcmp(lab,s_gui_font())) {
        //FIXME : should check that val is a font name.
        m_gui_font = val;

      } else if(rcmp(lab,s_gui_font_modeling())) {
             if(val==s_font_outline()) m_gui_font_modeling = font_outline;
        else if(val==s_font_filled())  m_gui_font_modeling = font_filled;
        else if(val==s_font_pixmap())  m_gui_font_modeling = font_pixmap;
        else {status = false;}

      } else if(rcmp(lab,s_console_scale())) {
        bool changed;
        if(!to<float>(m_console_scale,val,changed)) status = false;

      } else if(rcmp(lab,s_console_width())) {
        bool changed;
        if(!to<float>(m_console_width,val,changed)) status = false;

      } else if(rcmp(lab,s_console_height())) {
        bool changed;
        if(!to<float>(m_console_height,val,changed)) status = false;

      } else if(rcmp(lab,s_image_buttons())) {
        bool changed;
        if(!to<bool>(m_image_buttons,val,changed)) status = false;

      } else if(rcmp(lab,s_plane_viewer())) {
        bool changed;
        if(!to<bool>(m_plane_viewer,val,changed)) status = false;

      } else if(rcmp(lab,s_touch_move())) {
        bool changed;
        if(!to<bool>(m_touch_move,val,changed)) status = false;

      } else if(rcmp(lab,s_sliders_pos())) {
        m_sliders_pos = val;

      } else if(rcmp(lab,s_list_visible_items())) {
        bool changed;
        if(!to<unsigned int>(m_list_visible_items,val,changed)) status = false;

      } else if(rcmp(lab,s_corner_radius())) {
        bool changed;
        if(!to<float>(m_corner_radius,val,changed)) status = false;

      } else if(rcmp(lab,s_light_on())) {
        bool changed;
        if(!to<bool>(m_light_on,val,changed)) status = false;

      } else if(rcmp(lab,s_blend_on())) {
        bool changed;
        if(!to<bool>(m_blend_on,val,changed)) status = false;

      } else if(rcmp(lab,s_smooth_on())) {
        bool changed;
        if(!to<bool>(m_smooth_on,val,changed)) status = false;

      } else if(rcmp(lab,s_anim_on())) {
        bool changed;
        if(!to<bool>(m_anim_on,val,changed)) status = false;

      } else if(rcmp(lab,s_solid())) {
        bool changed;
        if(!to<bool>(m_solid,val,changed)) status = false;

      } else if(rcmp(lab,s_reduced_wire_frame())) {
        bool changed;
        if(!to<bool>(m_reduced_wire_frame,val,changed)) status = false;

      } else if(rcmp(lab,s_max_depth())) {
        bool changed;
        if(!to<unsigned int>(m_max_depth,val,changed)) status = false;

      } else if(rcmp(lab,s_image_expand())) {
        bool changed;
        if(!to<bool>(m_image_expand,val,changed)) status = false;

      } else if(rcmp(lab,s_node_height())) {
        bool changed;
        if(!to<float>(m_node_height,val,changed)) status = false;

      } else if(rcmp(lab,s_node_color())) {
        m_node_color = val;

      } else if(rcmp(lab,s_time_interval())) {
        bool changed;
        if(!to<unsigned int>(m_time_interval,val,changed))
          status = false;

      } else if(rcmp(lab,s_anim_interval())) {
        bool changed;
        if(!to<unsigned int>(m_anim_interval,val,changed))
          status = false;

      } else if(rcmp(lab,s_cycle_secs())) {
        bool changed;
        if(!to<unsigned int>(m_cycle_secs,val,changed)) status = false;

      } else if(rcmp(lab,s_camera_type())) {
        m_camera_type = val;

      // camera :
      } else if(rcmp(lab,s_single_shoot())) {
        bool changed;
        if(!to<bool>(m_single_shoot,val,changed)) status = false;

      } else if(rcmp(lab,s_90())) {
        bool changed;
        if(!to<bool>(m_90,val,changed)) status = false;

      } else if(rcmp(lab,s_anim_mode())) {
             if(val==s_anim_mode_0()) m_anim_mode = anim_mode_0;
        else if(val==s_anim_mode_1()) m_anim_mode = anim_mode_1;
        else if(val==s_anim_mode_2()) m_anim_mode = anim_mode_2;
        else if(val==s_anim_mode_3()) m_anim_mode = anim_mode_3;
        else if(val==s_anim_mode_4()) m_anim_mode = anim_mode_4;
        else {status = false;}

      } else if(rcmp(lab,s_anim_around_focal())) {
        bool changed;
        if(!to<bool>(m_anim_around_focal,val,changed)) status = false;

      } else if(rcmp(lab,s_viewing())) {
        bool changed;
        if(!to<bool>(m_viewing,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_x())) {
        bool changed;
        if(!to<float>(m_cam_x,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_y())) {
        bool changed;
        if(!to<float>(m_cam_y,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_z())) {
        bool changed;
        if(!to<float>(m_cam_z,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_near())) {
        bool changed;
        if(!to<float>(m_cam_near,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_far())) {
        bool changed;
        if(!to<float>(m_cam_far,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_focal())) {
        bool changed;
        if(!to<float>(m_cam_focal,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_dx())) {
        bool changed;
        if(!to<float>(m_cam_dx,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_da())) {
        bool changed;
        if(!to<float>(m_cam_da,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_ds())) {
        bool changed;
        if(!to<float>(m_cam_ds,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_zof())) {
        bool changed;
        if(!to<float>(m_cam_zof,val,changed)) status = false;

      } else if(rcmp(lab,s_cam_orientation())) {
        if(!sqrot<vec3f,vec4f>(val,m_cam_orientation,::sinf,::cosf)) status = false;

      // wall :
      } else if(rcmp(lab,s_camera_tiled())) {
        bool changed;
        if(!to<bool>(m_cam_tiled,val,changed)) status = false;

      } else if(rcmp(lab,s_plot_col())) {
        bool changed;
        if(!to<unsigned int>(m_plot_col,val,changed)) status = false;

      } else if(rcmp(lab,s_plot_row())) {
        bool changed;
        if(!to<unsigned int>(m_plot_row,val,changed)) status = false;

      } else if(rcmp(lab,s_gsto_mode())) {
        m_gsto_mode = val;

      } else {
        status = false;
      }
    }
    return status;
  }

  static void sliders_poss(std::vector<std::string>& a_v){
    a_v.clear();
    a_v.push_back(s_sliders_2b());
    a_v.push_back(s_sliders_2b_2l());
    a_v.push_back(s_sliders_bl());
    a_v.push_back(s_sliders_l());
  }

  void set_gui_original() {
    //first ioda style !

    m_gui_screen_color = colorf_white();
    m_gui_font = font_hershey();
    m_gui_font_modeling = font_outline;
    m_gui_back_color = colorf_orange();
    m_gui_front_color = colorf_black();
    m_gui_dir_color = colorf(0.95f,0.95f,0.95f);
    m_gui_border_color = colorf_black();
    m_gui_arm_color = colorf_yellow();

    m_gui_warn_back_color = colorf_salmon();
    m_gui_warn_ok_color = colorf_palegreen();
    m_gui_warn_front_color = colorf_black();
    m_gui_warn_border_color = colorf_black();

    m_gui_text_back_color = colorf(0.95f,0.95f,0.95f);
    m_gui_text_front_color = colorf_black();
    m_gui_text_border_color = colorf_black();

    m_list_visible_items = 5;
    m_gui_label_back_color = colorf_orange();
    m_image_buttons = false;
    m_list_item_layout.clear();
    m_corner_radius = 0;
  }

  void set_gui_default() {
    // used by default in case of having no style file.

    // similar to ioda.style/gui_Apple_black_on_white.

    m_gui_screen_color = colorf(0.9f,0.9f,0.9f);
    m_gui_font = font_hershey();
    m_gui_font_modeling = font_outline;
    m_gui_back_color = colorf_white();
    m_gui_front_color = colorf_black();
    m_gui_dir_color = colorf(0.95f,0.95f,0.95f);
    m_gui_border_color = colorf_black();
    m_gui_arm_color = colorf(0.6f,0.8f,1);
    m_gui_warn_back_color = colorf_salmon();
    m_gui_warn_ok_color = colorf_palegreen();
    m_gui_warn_front_color = colorf_black();
    m_gui_warn_border_color = colorf_black();
    m_gui_text_back_color = colorf_white();
    m_gui_text_front_color = colorf_black();
    m_gui_text_border_color = colorf_black();
    m_list_visible_items = 7;
    m_gui_label_back_color = colorf(0.97f,0.97f,0.97f);
    m_image_buttons = false;
    m_list_item_layout.clear();
    m_corner_radius = 0;
  }

  void set_gui_Apple_black_on_white() {
    // used (for exa in exlib/geant4/viewer) in case of having no style file.

    m_gui_screen_color = colorf(0.9f,0.9f,0.9f);
#ifdef tools_sg_gui_params
    m_gui_font = font_lato_bold_ttf();
#else
    m_gui_font = font_helveticabd_ttf();
#endif
    m_gui_font_modeling = font_filled;
    m_gui_back_color = colorf_white();
    m_gui_front_color = colorf_black();
    m_gui_dir_color = colorf(0.95f,0.95f,0.95f);
    m_gui_border_color = colorf_black();
    m_gui_arm_color = colorf(0.6f,0.8f,1);
    m_gui_warn_back_color = colorf_salmon();
    m_gui_warn_ok_color = colorf_palegreen();
    m_gui_warn_front_color = colorf_black();
    m_gui_warn_border_color = colorf_black();
    m_gui_text_back_color = colorf_white();
    m_gui_text_front_color = colorf_black();
    m_gui_text_border_color = colorf_black();
    m_list_visible_items = 7;
    m_gui_label_back_color = colorf(0.97f,0.97f,0.97f);
    m_image_buttons = false;
    m_list_item_layout.clear();
    m_corner_radius = 0;
  }
public:
  // general :
  bool m_vr_mode;
  bool m_auto_hide_scene;
  // gui :
  colorf m_scene_screen_color;
  colorf m_gui_screen_color;
  colorf m_gui_back_color;
  colorf m_gui_front_color;
  colorf m_gui_dir_color;
  colorf m_gui_arm_color;
  colorf m_gui_border_color;
  colorf m_gui_text_back_color;
  colorf m_gui_text_front_color;
  colorf m_gui_text_border_color;
  colorf m_gui_warn_back_color;
  colorf m_gui_warn_ok_color;
  colorf m_gui_warn_front_color;
  colorf m_gui_warn_border_color;
  colorf m_gui_label_back_color;
  std::string m_gui_font;
  font_modeling m_gui_font_modeling;
  float m_console_scale;
  float m_console_width;
  float m_console_height;

  bool m_image_buttons;
  bool m_plane_viewer;
  bool m_touch_move;
  std::string m_sliders_pos;
  unsigned int m_list_visible_items;
  std::string m_list_item_layout;
  float m_corner_radius;

  // scene :
  bool m_light_on;
  bool m_blend_on;
  bool m_smooth_on;
  bool m_solid;
  bool m_reduced_wire_frame;
  unsigned int m_max_depth;
  bool m_use_gsto;

  std::string m_gsto_mode;
  bool m_anim_on;

  bool m_image_expand;
  float m_node_height;
  std::string m_node_color;
  unsigned int m_time_interval;
  unsigned int m_anim_interval;
  unsigned int m_cycle_secs;

  std::string m_camera_type;

  // camera panel :
  bool m_single_shoot;
  bool m_90;
  anim_mode m_anim_mode;
  bool m_anim_around_focal;
  bool m_viewing;

  // for rwc of camera :
  float m_cam_x;
  float m_cam_y;
  float m_cam_z;
  float m_cam_near;
  float m_cam_far;
  float m_cam_focal;
  float m_cam_dx;
  float m_cam_da;
  float m_cam_ds;

  float m_cam_zof;
  rotf m_cam_orientation;

  // wall app :
  bool m_cam_tiled;
  unsigned int m_plot_col;
  unsigned int m_plot_row;
};

}}

#endif
