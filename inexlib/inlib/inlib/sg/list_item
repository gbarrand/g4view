// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_list_item
#define inlib_sg_list_item

#include "cbks"

#include "../img"
#include "../io/iwbuf"
#include "../io/irbuf"

namespace inlib {
namespace sg {

class list_item {
public:
  list_item():m_img(){}
  list_item(const std::vector<std::string>& a_strings,bcbk* a_cbk,bool a_dir = false)
  :m_strings(a_strings)
  ,m_dir(a_dir)
  ,m_img()
  {
    m_cbks.add(a_cbk); //take ownership of a_cbk.
  }
  list_item(const std::string& a_label,bcbk* a_cbk,bool a_dir = false)
  :m_dir(a_dir)
  ,m_img()
  {
    m_cbks.add(a_cbk); //take ownership of a_cbk.
    m_strings.push_back(a_label);
  }
  list_item(const img_byte& a_img,bcbk* a_cbk,bool a_dir = false)
  :m_dir(a_dir)
  ,m_img(a_img)
  {
    m_cbks.add(a_cbk); //take ownership of a_cbk.
  }
  list_item(const std::string& a_label,
            const img_byte& a_img,
            bcbk* a_cbk,bool a_dir = false)
  :m_dir(a_dir)
  ,m_img(a_img)
  {
    m_cbks.add(a_cbk); //take ownership of a_cbk.
    m_strings.push_back(a_label);
  }
  virtual ~list_item() {}
public:
  list_item(const list_item& a_from)
  :m_strings(a_from.m_strings)
  ,m_cbks(a_from.m_cbks)
  ,m_dir(a_from.m_dir)
  ,m_img(a_from.m_img)
  {}
  list_item& operator=(const list_item& a_from){
    m_strings = a_from.m_strings;
    m_cbks = a_from.m_cbks;
    m_dir = a_from.m_dir;
    m_img = a_from.m_img;
    return *this;
  }
public:
  bool operator==(const list_item& a_v) const {
    if(m_strings!=a_v.m_strings) return false;
    if(m_dir!=a_v.m_dir) return false;
    if(m_cbks.callbacks().size()!=a_v.m_cbks.callbacks().size()) return false;
    //loop on m_cbk->equal(*(a_v.m_cbk)); //do we want that ?
    return true;
  }
  bool operator!=(const list_item& a_v) const {return !operator==(a_v);}
public:
  const std::vector<std::string>& strings() const {return m_strings;}
  const img_byte& img() const {return m_img;}
  const sg::cbks& cbks() const {return m_cbks;}
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.add(a_cbk);
  }
  void copy_cbks(const sg::cbks& a_from,bool a_clear = true) {
    m_cbks.copy(a_from,a_clear);
  }
  void clear_cbks(){m_cbks.clear();}
  bool is_dir() const {return m_dir;}
public:
  bool write(io::iwbuf& a_buffer) const {
    if(!a_buffer.write_vec(m_strings)) return false;
    if(!a_buffer.write_img(m_img.width(),m_img.height(),m_img.bpp(),
                           m_img.buffer())) return false;
    if(!a_buffer.write(m_dir)) return false;
    // callbacks :
    if(!a_buffer.write((uint32)0)) return false;
/*FIXME : have to handle some reference system toward callbacks.
    inlib_vforcit(bcbk*,m_cbks.callbacks(),itc) {
      const bcbk* cbk = *ic;
      if(!a_buffer.write(cbk->s_cls())) return false;
      //if(!a_buffer.write(cbk->is_single_shoot())) return false;
    }
*/
    return true;
  }
  bool read(io::irbuf& a_buffer) {
    if(!a_buffer.read_vec(m_strings)) return false;
    uint32 w,h,n;uchar* b;
    if(!a_buffer.read_img(w,h,n,b)) return false;
    if(w && h && n && b) {
      m_img.set(w,h,n,b,true);
#ifdef INLIB_MEM
      mem::decrement(s_new().c_str());
#endif
    }
    if(!a_buffer.read(m_dir)) return false;
    // callbacks :
    uint32 num;
    if(!a_buffer.read(num)) return false;
    return true;
  }
private:
  std::vector<std::string> m_strings;
  sg::cbks m_cbks;
  bool m_dir;
  img_byte m_img;
};

//inline const std::string& stype(const list_item&) {
//  static const std::string s_v("inlib::sg::list_item");
//  return s_v;
//}

}}

#endif

