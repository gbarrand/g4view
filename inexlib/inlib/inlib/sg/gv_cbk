// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_gv_cbk
#define inlib_sg_gv_cbk

#include "ecbk"

namespace inlib {
namespace sg {
class gui_viewer;
}}

namespace inlib {
namespace sg {

class gv_cbk : public ecbk {
  INLIB_CBK(gv_cbk,inlib::sg::gv_cbk,ecbk)
public:
  typedef return_action (*cbk_gv_func)(sg::gui_viewer&);
  typedef return_action (*cbk_gv_cbk_func)(sg::gui_viewer&,const ecbk&);
public:
  virtual return_action action() {
         if(m_gv_func)      return m_gv_func(m_gv);
    else if(m_gv_cbk_func)  return m_gv_cbk_func(m_gv,*this);
    return return_none;
  }
public:
  gv_cbk(gui_viewer& a_gv,cbk_gv_func a_func)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(a_func)
  ,m_gv_cbk_func(0)
  {}
  gv_cbk(gui_viewer& a_gv,cbk_gv_cbk_func a_func)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(0)
  ,m_gv_cbk_func(a_func)
  {}
  virtual ~gv_cbk(){}
public:
  gv_cbk(const gv_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  ,m_gv_func(a_from.m_gv_func)
  ,m_gv_cbk_func(a_from.m_gv_cbk_func)
  {}
  gv_cbk& operator=(const gv_cbk& a_from){
    parent::operator=(a_from);
    m_gv_func = a_from.m_gv_func;
    m_gv_cbk_func = a_from.m_gv_cbk_func;
    return *this;
  }
protected:
  gui_viewer& m_gv;
  cbk_gv_func m_gv_func;
  cbk_gv_cbk_func m_gv_cbk_func;
};

template <class DATA,class PARENT = bcbk>
class gv_data_cbk : public PARENT {
  INLIB_T_CBK(DATA,gv_data_cbk,inlib::sg::gv_data_cbk,PARENT)
public:
  typedef return_action (*cbk_gv_func)(sg::gui_viewer&);
  typedef return_action (*cbk_gv_data_func)(sg::gui_viewer&,const DATA&);
  typedef return_action (*cbk_gv_parent_func)(sg::gui_viewer&,const PARENT&);
  typedef return_action (*cbk_gv_parent_data_func)(sg::gui_viewer&,const PARENT&,const DATA&);
public:
  virtual return_action action() {
         if(m_gv_func)             return m_gv_func(m_gv);
    else if(m_gv_data_func)        return m_gv_data_func(m_gv,m_data);
    else if(m_gv_parent_func)      return m_gv_parent_func(m_gv,*this);
    else if(m_gv_parent_data_func) return m_gv_parent_data_func(m_gv,*this,m_data);
    return return_none;
  }
public:
  gv_data_cbk(gui_viewer& a_gv,cbk_gv_func a_func)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(a_func)
  ,m_gv_data_func(0)
  ,m_gv_parent_func(0)
  ,m_gv_parent_data_func(0)
  ,m_data(DATA())
  {}
  gv_data_cbk(gui_viewer& a_gv,cbk_gv_data_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(0)
  ,m_gv_data_func(a_func)
  ,m_gv_parent_func(0)
  ,m_gv_parent_data_func(0)
  ,m_data(a_data)
  {}
  gv_data_cbk(gui_viewer& a_gv,cbk_gv_parent_func a_func)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(0)
  ,m_gv_data_func(0)
  ,m_gv_parent_func(a_func)
  ,m_gv_parent_data_func(0)
  ,m_data(DATA())
  {}
  gv_data_cbk(gui_viewer& a_gv,cbk_gv_parent_data_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv)
  ,m_gv_func(0)
  ,m_gv_data_func(0)
  ,m_gv_parent_func(0)
  ,m_gv_parent_data_func(a_func)
  ,m_data(a_data)
  {}
  virtual ~gv_data_cbk(){}
public:
  gv_data_cbk(const gv_data_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  ,m_gv_func(a_from.m_gv_func)
  ,m_gv_data_func(a_from.m_gv_data_func)
  ,m_gv_parent_func(a_from.m_gv_parent_func)
  ,m_gv_parent_data_func(a_from.m_gv_parent_data_func)
  ,m_data(a_from.m_data)
  {}
  gv_data_cbk& operator=(const gv_data_cbk& a_from){
    parent::operator=(a_from);
    m_gv_func = a_from.m_gv_func;
    m_gv_data_func = a_from.m_gv_data_func;
    m_gv_parent_func = a_from.m_gv_parent_func;
    m_gv_parent_data_func=a_from.m_gv_parent_data_func;
    m_data=a_from.m_data;
    return *this;
  }
protected:
  gui_viewer& m_gv;
  cbk_gv_func m_gv_func;
  cbk_gv_data_func m_gv_data_func;
  cbk_gv_parent_func m_gv_parent_func;
  cbk_gv_parent_data_func m_gv_parent_data_func;
  DATA m_data;
};

}}

#endif

