// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_circle
#define inlib_sg_circle

#include "node"
#include "sf"
#include "render_action"
#include "pick_action"
#include "bbox_action"

#include "../mathf"
#include "../curve"

namespace inlib {
namespace sg {

class circle : public node,public curve {
  INLIB_NODE_NO_CAST(circle,inlib::sg::circle,node)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<circle>(this,a_class)) return p;
    if(void* p = cmp_cast<curve>(this,a_class)) return p;
    return node::cast(a_class);
  }
public:
  sf<float> radius;
  sf<unsigned int> steps;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::circle)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(radius),
      INLIB_ARG_FIELD_DESC(steps)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&radius);
    add_field(&steps);
  }
public: //curve
  virtual bool pos_tan_nor(float a_s,
                           vec3f& a_pos,
                           vec3f& a_tan,
                           vec3f& a_nor) const {

    float r = radius.value();
    float cs = fcos(a_s);
    float sn = fsin(a_s);

    float x,y,z;

   {x = r*cs;y = r*sn;z = 0;
    m_model.mul_3f(x,y,z);
    a_pos.set_value(x,y,z);}

   {x = -sn;y = cs;z = 0;
    m_model.mul_dir_3(x,y,z);
    a_tan.set_value(x,y,z);}

   {x = 0;y = 0;z = 1;
    m_model.mul_dir_3(x,y,z);
    a_nor.set_value(x,y,z);}

    return true;
  }
public:
  virtual void copy(curve*& a_new) const {a_new = new circle(*this);}
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    //Same logic as Inventor SoLightModel.model = BASE_COLOR.
    const state& state = a_action.state();
    a_action.set_lighting(false);
    a_action.add_line_loop(m_xyzs);
    a_action.set_lighting(state.m_GL_LIGHTING);
  }

  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(a_action.stop_at_first()){
      a_action.add_line_loop(m_xyzs);
      if(a_action.done()) a_action.set_node(this);
    } else {
      a_action.set_done(false);
      a_action.zs().clear();
      a_action.ws().clear();
      a_action.add_line_loop(m_xyzs);
      if(a_action.done()) {
        a_action.add_pick(*this,a_action.zs(),a_action.ws(),a_action.state());
        a_action.set_done(false);
      }
    }
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    a_action.add_line_loop(m_xyzs);
  }
public:
  circle()
  :parent()
  ,curve()
  ,radius(1.0f)
  ,steps(40)
  {
    add_fields();
  }
  virtual ~circle(){}
public:
  circle(const circle& a_from)
  :parent(a_from)
  ,curve(a_from)
  ,radius(a_from.radius)
  ,steps(a_from.steps)
  {
    add_fields();
  }
  circle& operator=(const circle& a_from){
    parent::operator=(a_from);
    curve::operator=(a_from);
    radius = a_from.radius;
    steps = a_from.steps;
    return *this;
  }
protected:
  void update_sg() {
    m_xyzs.clear();
    if(!steps.value()) return;

    float r = radius.value();
    unsigned int num = steps.value();
    float dtheta = ftwo_pi()/float(steps.value());

    m_xyzs.resize(num*3);

    float theta = 0;
    unsigned int pos = 0;
    for(unsigned int i=0;i<num;i++,theta+=dtheta) {
      m_xyzs[pos] = r*fcos(theta);pos++;
      m_xyzs[pos] = r*fsin(theta);pos++;
      m_xyzs[pos] = 0;pos++;
    }
  }

protected:
  std::vector<float> m_xyzs;
};

}}

#endif
