// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_colors
#define inlib_sg_colors

// A colors keypad emulation.

#include "node"

#include "style_colormap"
#include "text_button"

#include "../entries_color"

namespace inlib {
namespace sg {

class colors : public node {
  INLIB_NODE(colors,inlib::sg::colors,node)
private:
  typedef text text_t;
  typedef text_button tb_t;
public:
  sf<float> width;
  sf<float> height;
  sf_vec<colorf,float> back_color;
  sf_vec<colorf,float> front_color;
  sf_vec<colorf,float> border_color;
  sf_vec<colorf,float> arm_color;
  sf_string value; //<r> <g> <b>
  sf<float> text_wmargin_factor;
  sf<float> text_hmargin_factor;
  sf<bool> show_cancel;
  sf_string font;
  sf_enum<sg::font_modeling> font_modeling;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::colors)
    static const desc_fields s_v(parent::node_desc_fields(),12, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(back_color),
      INLIB_ARG_FIELD_DESC(front_color),
      INLIB_ARG_FIELD_DESC(border_color),
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(value),
      INLIB_ARG_FIELD_DESC(text_wmargin_factor),
      INLIB_ARG_FIELD_DESC(text_hmargin_factor),
      INLIB_ARG_FIELD_DESC(show_cancel),

      INLIB_ARG_FIELD_DESC_OPTS_BEG(font,8)
        font_hershey().c_str(),
        font_arial_ttf().c_str(),
        font_arialbd_ttf().c_str(),
        font_timesbd_ttf().c_str(),
        font_symbol_ttf().c_str(),
        font_stixgeneral_otf().c_str(),
        font_helvetica_ttf().c_str(),
        font_times_roman_ttf().c_str()
      INLIB_ARG_FIELD_DESC_OPTS_END,

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(font_modeling,3)
        INLIB_ARG_ENUM(font_outline),
        INLIB_ARG_ENUM(font_filled),
        INLIB_ARG_ENUM(font_pixmap)
      INLIB_ARG_FIELD_DESC_ENUMS_END
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&back_color);
    add_field(&front_color);
    add_field(&border_color);
    add_field(&arm_color);
    add_field(&value);
    add_field(&text_wmargin_factor);
    add_field(&text_hmargin_factor);
    add_field(&show_cancel);
    add_field(&font);
    add_field(&font_modeling);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    m_sep.pick(a_action);
    if(a_action.done()) return;
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
public:
  colors(const base_freetype& a_ttf)
  :parent()
  ,width(1)
  ,height(1)
  ,back_color(colorf_white())
  ,front_color(colorf_black())
  ,border_color(colorf_black())
  ,arm_color(colorf_grey())
  ,value("")
  ,text_wmargin_factor(0.9f)
  ,text_hmargin_factor(0.9f)
  ,show_cancel(false)
  ,font(font_hershey())
  ,font_modeling(font_filled)

  ,m_cbks()
  ,m_cancel_cbks()
  ,m_ttf(a_ttf)
  {
    add_fields();
  }
  virtual ~colors(){}
public:
  colors(const colors& a_from)
  :parent(a_from)
  ,width(a_from.width)
  ,height(a_from.height)
  ,back_color(a_from.back_color)
  ,front_color(a_from.front_color)
  ,border_color(a_from.border_color)
  ,arm_color(a_from.arm_color)
  ,value(a_from.value)
  ,text_wmargin_factor(a_from.text_wmargin_factor)
  ,text_hmargin_factor(a_from.text_hmargin_factor)
  ,show_cancel(a_from.show_cancel)
  ,font(a_from.font)
  ,font_modeling(a_from.font_modeling)

  ,m_cbks(a_from.m_cbks)
  ,m_cancel_cbks(a_from.m_cancel_cbks)
  ,m_ttf(a_from.m_ttf)
  {
    add_fields();
  }
  colors& operator=(const colors& a_from){
    parent::operator=(a_from);

    width = a_from.width;
    height = a_from.height;
    back_color = a_from.back_color;
    front_color = a_from.front_color;
    border_color = a_from.border_color;
    arm_color = a_from.arm_color;
    value = a_from.value;
    text_wmargin_factor = a_from.text_wmargin_factor;
    text_hmargin_factor = a_from.text_hmargin_factor;
    show_cancel = a_from.show_cancel;
    font = a_from.font;
    font_modeling = a_from.font_modeling;

    m_cbks = a_from.m_cbks;
    m_cancel_cbks = a_from.m_cancel_cbks;

    return *this;
  }
public:
  const separator& container() const {return m_sep;} //must be consistent with pick().
  void clear() {value.value("");} //for gui_viewer popup templates.
public:
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.callbacks().push_back(a_cbk);
    touch();
  }
  void clear_cbks(){
    m_cbks.clear();
    touch();
  }
  void add_cancel_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cancel_cbks.callbacks().push_back(a_cbk);
    touch();
  }
  void clear_cancel_cbks(){
    m_cancel_cbks.clear();
    touch();
  }
public:
  template <class T>
  bool get_color(T& a_r,T& a_g,T& a_b,T& a_a) {
    return entries_color(value.value(),a_r,a_g,a_b,a_a);
  }
protected:
  INLIB_CLASS_STRING(C)
  INLIB_CLASS_STRING(Ok)
  INLIB_CLASS_STRING(Cancel)

  class button_cbk : public bcbk {
    typedef bcbk parent;
  public:
    virtual return_action action() {
      std::string _s = m_colors.value.value();
      if(m_action==s_C()) {
        _s.clear();
      } else {
        _s = m_action;
      }
      m_colors.value = _s;
      return return_to_render;
    }
    virtual bcbk* copy() const {return new button_cbk(*this);}
  public:
    button_cbk(colors& a_colors,const std::string& a_action)
    :parent()
    ,m_colors(a_colors)
    ,m_action(a_action)
    {}
    virtual ~button_cbk(){}
  public:
    button_cbk(const button_cbk& a_from)
    :parent(a_from)
    ,m_colors(a_from.m_colors)
    ,m_action(a_from.m_action)
    {}
    button_cbk& operator=(const button_cbk& a_from){
      parent::operator=(a_from);
      m_action = a_from.m_action;
      return *this;
    }
  protected:
    colors& m_colors;
    std::string m_action;
  };

  void update_sg(std::ostream& a_out) {
    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;

    // we place 65 colors in 6 rows x 11 cols.
    // [resul]
    // <colors>
    // C    Ok

    style_default_colormap def_cmap; //costly

    unsigned int index = 0;
    unsigned int number = (unsigned int)def_cmap.size();

    unsigned int rows = 6;
    unsigned int cols = 11;
    for(unsigned int row=0;row<rows;row++) {
      for(unsigned int col=0;col<cols;col++) {
        if(index>=number) break;

        style_colormap::const_iterator it = def_cmap.find(index);
        if(it==def_cmap.end()) {
          a_out << "colors::update_sg :"
                << " index " << index
                << " not found in default colormap."
                << std::endl;
        } else {
          m_sep.add(create_button((*it).second.second,(*it).second.first,row,col));
        }


        index++;
      }
    }

    m_sep.add(create_result());
    m_sep.add(create_clear());
    m_sep.add(create_enter());
    if(show_cancel.value()) m_sep.add(create_cancel());
  }
protected:
  separator* create_button(const colorf& a_color,
                                             const std::string& a_name,
                                             unsigned int a_row,
                                             unsigned int a_col) {

    separator* sep = new separator;

    float wbutton = width/11;
    float hbutton = height/8; //result + 6 rows + special.

    float xx = -width*0.5f+wbutton*0.5f+a_col*wbutton;
    float yy = height*0.5f-hbutton*1.5f-a_row*hbutton;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wbutton;
    b->height = hbutton;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->back_area::color = a_color;
    b->back_area::border_color = border_color;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->confine = true;
    b->hjust = center;

    //b->set_label(a_label);

    std::string s;
    if(!numas(a_color.r(),s)){}
    s += " ";
    if(!numas(a_color.g(),s)){}
    s += " ";
    if(!numas(a_color.b(),s)){}
    s += " ";
    s += a_name;
    b->add_callback(new button_cbk(*this,s));

    sep->add(b);

    return sep;
  }
  separator* create_clear() {
    separator* sep = new separator;

    float wtext = width/11;
    float htext = height/8;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = -height*0.5f+htext*0.5f;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->arm_color = arm_color;

    b->confine = true;
    b->hjust = center;

    b->set_label(s_C());

    b->add_callback(new button_cbk(*this,s_C()));

    sep->add(b);

    return sep;
  }
  separator* create_enter() {
    separator* sep = new separator;

    float wtext = width/11;
    float htext = height/8;

    float xx = width*0.5f-wtext*0.5f;
    float yy = -height*0.5f+htext*0.5f;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->arm_color = arm_color;

    b->confine = true;
    b->hjust = center;

    b->set_label(s_Ok());

    b->copy_cbks(m_cbks);

    sep->add(b);

    return sep;
  }

  separator* create_cancel() {
    separator* sep = new separator;

    float wtext = width-2.0f*width/11.0f;
    float htext = height/8;

    float xx = 0;
    float yy = -height*0.5f+htext*0.5f;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;
    b->arm_color = arm_color;

    b->confine = true;
    b->hjust = center;

    b->set_label(s_Cancel());

    b->copy_cbks(m_cancel_cbks);

    sep->add(b);

    return sep;
  }

  separator* create_result() {
    separator* sep = new separator;

    float wtext = width;
    float htext = height/8;

    float xx = 0;
    float yy = height*0.5f-htext*0.5f;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    text_t* b = new text_t(m_ttf);
    //tb_t* b = new tb_t(m_ttf);
    b->width = wtext;
    b->height = htext;

    //FIXME : handle the three below from res.
    b->back_area::color = colorf_white();
    b->back_area::border_color = colorf_black();
    b->color = colorf_black();

    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->strings.add(value.value()); //important.

    //b->add_callback(new button_cbk(*this,s_C()));
    //b->arm_color = arm_color;
    b->confine = true;

    sep->add(b);

    return sep;
  }
protected:
  sg::cbks m_cbks;
  sg::cbks m_cancel_cbks;
  separator m_sep;
  const base_freetype& m_ttf;
};

}}

#endif
