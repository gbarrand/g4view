// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_ghost
#define inlib_sg_ghost

// To have a non visible picking area.
// Used to do the bottom "meta zone" in ioda.

#include "node"
#include "cbks"

#include "pick_action"
#include "sf"
#include "../lina/mat4f"

namespace inlib {
namespace sg {

class ghost : public node {
  INLIB_NODE(ghost,inlib::sg::ghost,node)
public:
  sf<float> width;
  sf<float> height;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::ghost)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
  }
public:
  //render is empty.
  virtual void pick(pick_action& a_action) {
    if(width.value()<=0) return;
    if(height.value()<=0) return;

    float h2 = height.value()*0.5f;
    float w2 = width.value()*0.5f;

    float xyzs[12];
    xyzs[0] = -w2;
    xyzs[1] = -h2;
    xyzs[2] =  0;

    xyzs[3] =  w2;
    xyzs[4] = -h2;
    xyzs[5] =  0;

    xyzs[6] =  w2;
    xyzs[7] =  h2;
    xyzs[8] =  0;

    xyzs[ 9] = -w2;
    xyzs[10] =  h2;
    xyzs[11] =  0;

    a_action.add__primitive(*this,gl::triangle_fan(),12,xyzs,true);
  }
public:
  ghost()
  :parent()
  ,width(1)
  ,height(1)
  ,m_cbks()
  {
    add_fields();
  }
  virtual ~ghost(){}
public:
  ghost(const ghost& a_from)
  :parent(a_from)
  ,width(a_from.width)
  ,height(a_from.height)
  ,m_cbks(a_from.m_cbks)
  {
    add_fields();
  }
  ghost& operator=(const ghost& a_from){
    parent::operator=(a_from);
    width = a_from.width;
    height = a_from.height;
    m_cbks = a_from.m_cbks;
    return *this;
  }
public:
  const sg::cbks& cbks() const {return m_cbks;}
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.add(a_cbk);
    touch();
  }
  void copy_cbks(const sg::cbks& a_from,bool a_clear = true) {
    m_cbks.copy(a_from,a_clear);
    touch();
  }
  void clear_cbks(){
    m_cbks.clear();
    touch();
  }
protected:
  sg::cbks m_cbks;
};

}}

#endif
