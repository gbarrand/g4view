// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_icosahedron_sphere
#define inlib_sg_icosahedron_sphere

/* from glu/sphere.c - by David Blythe, SGI */

/* Instead of tessellating a sphere by lines of longitude and latitude
   (a technique that over tessellates the poles and under tessellates
   the equator of the sphere), tesselate based on regular solids for a
   more uniform tesselation.

   This approach is arguably better than the gluSphere routine's
   approach using slices and stacks (latitude and longitude). -mjk */

#include "node"
#include "render_gstos"

#include "pick_action"
#include "bbox_action"
#include "sf_enum"

#include <cstdlib>
#include <cmath>

namespace inlib {
namespace sg {

class icosahedron_sphere : public node, public render_gstos {
  INLIB_NODE(icosahedron_sphere,inlib::sg::icosahedron_sphere,node)
public:
  sf<float> radius;
  sf<unsigned int> max_level;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::icosahedron_sphere)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(radius),
      INLIB_ARG_FIELD_DESC(max_level)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&radius);
    add_field(&max_level);
  }
protected: //render_gstos
  virtual void visit(gstos_add& a_visitor,draw_type a_style) {
    visit<gstos_add>(a_visitor,radius,max_level,a_style);
  }
public: //node
  virtual void render(render_action& a_action) {
    if(gstos_render(a_action)) return;

    // immediate rendering :
    const state& state = a_action.state();
    bool draw_edges = false;
    if(state.m_draw_type==draw_filled) draw_edges = state.m_GL_LIGHTING?false:true;
    if(draw_edges) {
      a_action.color4f(0,0,0,1); //if lighten, then rendered grey.
      a_action.line_width(1);
      visit(a_action,radius,max_level,draw_lines);
      a_action.set_polygon_offset(true); //pushes back the filled polygons to avoid z-fighting with lines
      a_action.color4f(state.m_color);
      a_action.line_width(state.m_line_width);
    }

    //if draw_filled and shade_flat, enforce "as triangles" to have same rendering as gsto mode :
    bool as_triangles = state.m_shade_model==shade_flat?true:false;
    visit(a_action,radius,max_level,state.m_draw_type,as_triangles);
    if(draw_edges) a_action.set_polygon_offset(state.m_GL_POLYGON_OFFSET_FILL);
  }

  virtual void pick(pick_action& a_action) {
    const state& state = a_action.state();
    if(a_action.stop_at_first()){
      visit(a_action,radius,max_level,state.m_draw_type);
      if(a_action.done()) a_action.set_node(this);
    } else {
      a_action.set_done(false);
      a_action.zs().clear();
      a_action.ws().clear();
      visit(a_action,radius,max_level,state.m_draw_type);
      if(a_action.done()) {
        a_action.add_pick(*this,a_action.zs(),a_action.ws(),a_action.state());
        a_action.set_done(false);
      }
    }
  }
  virtual void bbox(bbox_action& a_action) {
    const state& state = a_action.state();
    visit(a_action,radius,max_level,state.m_draw_type);
  }
public:
  virtual void clear_gstos() {gstos::clean_gstos();}
public:
  icosahedron_sphere()
  :parent()
  ,render_gstos()
  ,radius(1.0f)
  ,max_level(1)
  {
    add_fields();
  }
  virtual ~icosahedron_sphere(){}
public:
  icosahedron_sphere(const icosahedron_sphere& a_from)
  :parent(a_from)
  ,render_gstos(a_from)
  ,radius(a_from.radius)
  ,max_level(a_from.max_level)
  {
    add_fields();
  }
  icosahedron_sphere& operator=(const icosahedron_sphere& a_from){
    parent::operator=(a_from);
    render_gstos::operator=(a_from);
    radius = a_from.radius;
    max_level = a_from.max_level;
    return *this;
  }
protected:

  static void _new(unsigned int a_number,
                       float*& a_nms,unsigned int& a_inm,
                       float*& a_vts,unsigned int& a_ivt){
    a_nms = new float[a_number];
    a_inm = 0;
    a_vts = new float[a_number];
    a_ivt = 0;
  }
  static void _delete(float*& a_nms,float*& a_vts){
    delete [] a_nms;a_nms = 0;
    delete [] a_vts;a_vts = 0;
  }
  static void _set(float* a_v,unsigned int& a_i,
                   float a_x,float a_y,float a_z){
    a_v[a_i] = a_x;a_i++;
    a_v[a_i] = a_y;a_i++;
    a_v[a_i] = a_z;a_i++;
  }

  typedef struct {
    float x, y, z;
  } point;

  static void normalize(point& r) {
    float mag;
    mag = r.x * r.x + r.y * r.y + r.z * r.z;
    if (mag != 0.0f) {
        mag = 1.0f / sqrt(mag);
        r.x *= mag;
        r.y *= mag;
        r.z *= mag;
    }
  }

  static void _V(const point& a_v,float a_radius,
                 float* a_nms,float* a_vts,
                 unsigned int& a_inm,unsigned int& a_ivt) {
    point x;
    x = a_v;
    normalize(x);
    _set(a_nms,a_inm,x.x,x.y,x.z);
    _set(a_vts,a_ivt,a_radius*x.x,a_radius*x.y,a_radius*x.z);
  }

  static void lerp(const point& a,const point& b, float f, point& r) {
    // linearly interpolate between a & b, by fraction f.
    r.x = a.x + f*(b.x-a.x);
    r.y = a.y + f*(b.y-a.y);
    r.z = a.z + f*(b.z-a.z);
  }

  typedef struct {
    point pt[3];
  } triangle;

  // vertices of a unit icosahedron :
  static const triangle* icosahedron() {

    static const float CZ = 0.89442719099991f;   // 2/sqrt(5)
    static const float SZ = 0.44721359549995f;   // 1/sqrt(5)
    static const float C1 = 0.951056516f;        // cos(18)
    static const float S1 = 0.309016994f;        // sin(18)
    static const float C2 = 0.587785252f;        // cos(54)
    static const float S2 = 0.809016994f;        // sin(54)
    static const float X1 = C1*CZ;
    static const float Y1 = S1*CZ;
    static const float X2 = C2*CZ;
    static const float Y2 = S2*CZ;

    static const point Ip0 = {0.,    0.,     1.};
    static const point Ip1 = {-X2,   -Y2,    SZ};
    static const point Ip2 = {X2,    -Y2,    SZ};
    static const point Ip3 = {X1,    Y1,     SZ};
    static const point Ip4 = {0,     CZ,     SZ};
    static const point Ip5 = {-X1,   Y1,     SZ};

    static const point Im0 = {-X1,   -Y1,    -SZ};
    static const point Im1 = {0,     -CZ,    -SZ};
    static const point Im2 = {X1,    -Y1,    -SZ};
    static const point Im3 = {X2,    Y2,     -SZ};
    static const point Im4 = {-X2,   Y2,     -SZ};
    static const point Im5 = {0.,    0.,     -1.};

    static const triangle s_icosahedron[20]= {
        /* front pole */
        { {Ip0, Ip1, Ip2}, },
        { {Ip0, Ip5, Ip1}, },
        { {Ip0, Ip4, Ip5}, },
        { {Ip0, Ip3, Ip4}, },
        { {Ip0, Ip2, Ip3}, },

        /* mid */
        { {Ip1, Im0, Im1}, },
        { {Im0, Ip1, Ip5}, },
        { {Ip5, Im4, Im0}, },
        { {Im4, Ip5, Ip4}, },
        { {Ip4, Im3, Im4}, },
        { {Im3, Ip4, Ip3}, },
        { {Ip3, Im2, Im3}, },
        { {Im2, Ip3, Ip2}, },
        { {Ip2, Im1, Im2}, },
        { {Im1, Ip2, Ip1}, },

        /* back pole */
        { {Im3, Im2, Im5}, },
        { {Im4, Im3, Im5}, },
        { {Im0, Im4, Im5}, },
        { {Im1, Im0, Im5}, },
        { {Im2, Im1, Im5}, },
    };
    return s_icosahedron;
  }

  template <class T>
  static void visit(T& a_visitor,float a_radius,unsigned int a_maxlevel,draw_type a_style,bool a_as_triangles = false){
    int nrows = 1 << a_maxlevel;
    int s;

    float* vts = 0;
    unsigned int ivt = 0;
    float* nms = 0;
    unsigned int inm = 0;
    _new((3+2*nrows)*3,nms,inm,vts,ivt);

    /* iterate over the 20 sides of the icosahedron */
    for(s = 0; s < 20; s++) {
        int i;
        const triangle *t = icosahedron()+s;
        for(i = 0; i < nrows; i++) {
            /* create a tstrip for each row */
            /* number of triangles in this row is number in previous +2 */
            /* strip the ith trapezoid block */
            point v0, v1, v2, v3, va, vb;
            int j;
            lerp(t->pt[1], t->pt[0], (float)(i+1)/nrows, v0);
            lerp(t->pt[1], t->pt[0], (float)i/nrows, v1);
            lerp(t->pt[1], t->pt[2], (float)(i+1)/nrows, v2);
            lerp(t->pt[1], t->pt[2], (float)i/nrows, v3);

            ivt = 0;
            inm = 0;
            _V(v0,a_radius,nms,vts,inm,ivt);
            _V(v1,a_radius,nms,vts,inm,ivt);
            for(j = 0; j < i; j++) {
                /* calculate 2 more vertices at a time */
                lerp(v0, v2, (float)(j+1)/(i+1), va);
                lerp(v1, v3, (float)(j+1)/i, vb);
                _V(va,a_radius,nms,vts,inm,ivt);
                _V(vb,a_radius,nms,vts,inm,ivt);
            }
            _V(v2,a_radius,nms,vts,inm,ivt);

            if(a_style==draw_filled) {
              if(a_as_triangles) {
                a_visitor.add_triangle_strip_as_triangles(ivt,vts,nms);
              } else {
                a_visitor.add_triangle_strip_normal(ivt,vts,nms);
              }
            } else if(a_style==draw_lines) {
              a_visitor.add_line_strip(ivt,vts);
            } else if(a_style==draw_points) {
              a_visitor.add_points(ivt,vts);
            }
        }
     }

     _delete(nms,vts);
  }
};

}}

#endif
