// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_mf_list_item
#define inlib_sg_mf_list_item

#include "list_item"
#include "bmf"

#include "../HEADER"

namespace inlib {
namespace sg {

class mf_list_item : public bmf<list_item> {
  INLIB_HEADER(mf_list_item,inlib::sg::mf_list_item,bmf<list_item>)
public:
  virtual bool write(io::iwbuf& a_buffer) {
    if(!a_buffer.write((uint32)m_values.size())) return false;
    inlib_vforcit(list_item,m_values,it) {if(!(*it).write(a_buffer)) return false;}
    return true;
  }
  virtual bool read(io::irbuf& a_buffer) {
    uint32 num;
    if(!a_buffer.read(num)) return false;
    for(unsigned int index=0;index<num;index++) {
      list_item item;
      if(!item.read(a_buffer)) return false;
      add(item);
    }
    return true;
  }
  virtual bool dump(std::ostream&) {
    return true;
  }
  virtual bool s_value(std::string& a_s) const {a_s.clear();return false;}
  virtual bool s2value(const std::string&) {return false;}
public:
  mf_list_item():parent(){}
  virtual ~mf_list_item(){}
public:
  mf_list_item(const mf_list_item& a_from)
  :parent(a_from){}
  mf_list_item& operator=(const mf_list_item& a_from){
    parent::operator=(a_from);
    return *this;
  }
};

}}

#endif

