// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_camera_anim
#define inlib_sg_camera_anim

#include "base_anim"
#include "node"

#include "enums"

#include "../mathf"
#include "../curve"

namespace inlib {
namespace sg {

class base_cam_anim {
public:
  INLIB_SCLASS(inlib::sg::base_cam_anim)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<base_cam_anim>(this,a_class)) return p;
    return 0;
  }
public:
  base_cam_anim():m_curve(0){}
  virtual ~base_cam_anim(){delete m_curve;}
public:
  base_cam_anim(const base_cam_anim& a_from):m_curve(0) {
    if(a_from.m_curve) a_from.m_curve->copy(m_curve);
  }
  base_cam_anim& operator=(const base_cam_anim& a_from){
    delete m_curve;
    m_curve = 0;
    if(a_from.m_curve) a_from.m_curve->copy(m_curve);
    return *this;
  }
public:
  void set_curve(curve* a_curve) { //get ownership.
    delete m_curve;
    m_curve = a_curve;
  }
protected:
  curve* m_curve;
};

template <class CAMERA>
class camera_anim : public base_anim, public base_cam_anim, public CAMERA {
public:
  INLIB_T_SCLASS(CAMERA,inlib::sg::camera_anim)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<camera_anim>(this,a_class)) return p;
    if(void* p = base_anim::cast(a_class)) return p;
    if(void* p = base_cam_anim::cast(a_class)) return p;
    return CAMERA::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new camera_anim(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  virtual void begin_anim() {
    if((m_what==move_zoom_in_out)||(m_what==move_zoom_in_out_rot)) {
      delete m_zoom_save;
      m_zoom_save = (CAMERA*)CAMERA::copy();
    }
    base_anim::begin_anim();
  }
  virtual bool end_anim() {
    if((m_what==move_zoom_in_out)||(m_what==move_zoom_in_out_rot)) {
      delete m_zoom_save;
      m_zoom_save = 0;
    }
    base_anim::end_anim();
    return true;
  }
  virtual bool action(std::ostream&,const atime& a_now) {
    //float t = float(atime::diff(a_now,m_start).value());
    //float tp = float(atime::diff(m_prev,m_start).value());

    if(CAMERA::update_motion(m_what)) return true;

  //float _dx = CAMERA::dx.value();
    float _da = CAMERA::da.value();
    float _ds = CAMERA::ds.value();

    if(m_what==move_zoom_in_out) {
      float t = float(atime::diff(a_now,m_start).value());      //secs
      //float tp = float(atime::diff(m_prev,m_start).value());

      float cycle = m_cycle?float(m_cycle):10.0f; //secs
      float anim_rate = 1.0f/60.f;

      float r = t-int(t/cycle)*cycle; //[0,cycle]

      float zoom_factor;
      if(r<(0.5f*cycle)) { //start with a zoom in :
        unsigned int n = (unsigned int)(r/anim_rate);
        zoom_factor = fpow(_ds,float(n)); //zoom in.
      } else { //have to zoom out from the end of the previous zoom in :
        //unsigned int n_end_zin = (0.5f*cycle)/anim_rate;
        //unsigned int n = (r-0.5f*cycle)/anim_rate;
        //zoom_factor = fpow(_ds,n_end_zin)*fpow(1.0f/_ds,n);
        unsigned int n = (unsigned int)((cycle-r)/anim_rate);
        zoom_factor = fpow(_ds,float(n));
      }

      CAMERA::operator=(*m_zoom_save); //restore begin_anim() camera. It will copy fields.
      CAMERA::zoom(zoom_factor);

    } else if(m_what==move_zoom_in_out_rot) {
      float t = float(atime::diff(a_now,m_start).value());
      float tp = float(atime::diff(m_prev,m_start).value());

      float cycle = m_cycle?float(m_cycle):10.0f; //secs
      float anim_rate = 1.0f/60.f;

      float r = t-int(t/cycle)*cycle; //[0,cycle]

      if(r<(0.3f*cycle)) { //start with a zoom in :
        unsigned int n = (unsigned int)(r/anim_rate);
        float zoom_factor = fpow(_ds,float(n)); //zoom in.
        CAMERA::operator=(*m_zoom_save); //restore begin_anim() camera. It will copy fields.
        CAMERA::zoom(zoom_factor);
      } else if(r<(0.6f*cycle)) { //have to zoom out from the end of the previous zoom in :
        //unsigned int n_end_zin = (0.3f*cycle)/anim_rate;
        //unsigned int n = (r-0.3f*cycle)/anim_rate;
        //zoom_factor = fpow(_ds,n_end_zin)*fpow(1.0f/_ds,n);
        unsigned int n = (unsigned int)((0.6f*cycle-r)/anim_rate);
        float zoom_factor = fpow(_ds,float(n));
        CAMERA::operator=(*m_zoom_save); //restore begin_anim() camera. It will copy fields.
        CAMERA::zoom(zoom_factor);
      } else {
        _da = (t-tp)*3*fhalf_pi()/cycle;
        CAMERA::rotate_around_y_at_focal(-_da);
        m_zoom_save->rotate_around_y_at_focal(-_da);
      }

    } else if(m_what==move_curve) {
      float t = float(atime::diff(a_now,m_start).value());
      //float tp = float(atime::diff(m_prev,m_start).value());

      curve* _curve = m_curve;
      if(_curve) {

        float cycle = m_cycle?float(m_cycle):10;
        float omega = ftwo_pi()/cycle;
        float _s = omega*t;

        vec3f pos,tan,nor;
        if(!_curve->pos_tan_nor(_s,pos,tan,nor)) {}

        CAMERA::position = pos;

        CAMERA::orientation.value().set_value(vec3f(0,0,-1),tan);

        vec3f up;
        CAMERA::orientation.value().mul_vec(vec3f(0,1,0),up);
        CAMERA::orientation.value(CAMERA::orientation.value()*rotf(up,nor));
      }

    }

    return true;
  }
public:
  virtual void event(event_action& a_action) {
    node::event(a_action);
    do_event(a_action);
  }
public:
  camera_anim(const atime& a_start,int a_what,unsigned int a_cycle)
  :base_anim(a_start)
  ,base_cam_anim()
  ,CAMERA()
  ,m_what(a_what)
  ,m_cycle(a_cycle)
  ,m_zoom_save(0)
  {
    m_start_pos = CAMERA::position.value();
    m_start_rot = CAMERA::orientation.value();
  }
  camera_anim(CAMERA& a_camera,const atime& a_start,float,int a_what,unsigned int a_cycle)
  :base_anim(a_start)
  ,base_cam_anim()
  ,CAMERA(a_camera)
  ,m_what(a_what)
  ,m_cycle(a_cycle)
  ,m_zoom_save(0)
  {
    m_start_pos = CAMERA::position.value();
    m_start_rot = CAMERA::orientation.value();
  }
  virtual ~camera_anim(){
    delete m_zoom_save;
  }
public:
  camera_anim(const camera_anim& a_from)
  :base_anim(a_from)
  ,base_cam_anim(a_from)
  ,CAMERA(a_from)
  ,m_what(a_from.m_what)
  ,m_cycle(a_from.m_cycle)
  ,m_start_pos(a_from.m_start_pos)
  ,m_start_rot(a_from.m_start_rot)
  ,m_zoom_save(0)
  {}
  camera_anim& operator=(const camera_anim& a_from){
    base_anim::operator=(a_from);
    base_cam_anim::operator=(a_from);
    CAMERA::operator=(a_from);
    m_what = a_from.m_what;
    m_cycle = a_from.m_cycle;
    m_start_pos = a_from.m_start_pos;
    m_start_rot = a_from.m_start_rot;
    delete m_zoom_save;
    m_zoom_save = 0;
    return *this;
  }
//public:
//  CAMERA* copy_not_anim() const {return new CAMERA(*this);}
protected:
  int m_what;
  unsigned int m_cycle; //secs
  vec3f m_start_pos;
  rotf m_start_rot;
  CAMERA* m_zoom_save; //zoom_in_out
};

}}

#endif

/* trash :

    } else if(m_what==move_forback) {
      float t = float(atime::diff(a_now,m_start).value());
    //float tp = float(atime::diff(m_prev,m_start).value());

      float omega = ftwo_pi()/10.0f;

      vec3f dir;
      CAMERA::orientation.value().mul_vec(vec3f(0,0,-1),dir);

      float travel = CAMERA::focal.value()*0.95f;

      vec3f pos = m_start_pos;
      pos += dir * travel * (1.0f+fcos(fpi()+omega*t))*0.5f;

      CAMERA::position = pos;

*/



