// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_snow_anim
#define inlib_sg_snow_anim

#include "node"
#include "ui"
#include "separator"
#include "cube"
#include "parabolic_anim"
#include "acbk"
#include "nodekit"

#include "../sys/atime"
#include "../random"

namespace inlib {
namespace sg {

class snow_anim : public base_anim, public nodekit {
public:
  INLIB_NODE_NO_CAST(snow_anim,inlib::sg::snow_anim,nodekit)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<snow_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  sf<float> delay;
  sf<float> number_of_flakes;
  sf<float> sky_size;
  sf<float> flake_size;
  sf<float> start_height;
  sf_vec3f initial_speed;
  sf_vec3f acceleration;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::snow_anim)
    static const desc_fields s_v(parent::node_desc_fields(),7, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(number_of_flakes),
      INLIB_ARG_FIELD_DESC(sky_size),
      INLIB_ARG_FIELD_DESC(flake_size),
      INLIB_ARG_FIELD_DESC(start_height),
      INLIB_ARG_FIELD_DESC(initial_speed),
      INLIB_ARG_FIELD_DESC(acceleration)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&number_of_flakes);
    add_field(&sky_size);
    add_field(&flake_size);
    add_field(&start_height);
    add_field(&initial_speed);
    add_field(&acceleration);
  }
  static float grav_const() {return 9.81f;} //m/s2
protected:
  virtual void update_sg(std::ostream&) {
    m_ui.invalidate_works(snow_cbk::s_class()); //IMPORTANT.
    m_group.clear();
  }
public:
  virtual bool action(std::ostream&,const atime&) {return true;}
  virtual void event(event_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    parent::event(a_action); //does nothing
    m_group.event(a_action); //update existing flakes.
    sg::event& evt = a_action.get_event();
    if(anim_event* _e = event_cast<sg::event,anim_event>(evt)){

      atime _now(_e->seconds(),_e->micro_seconds());

      float t = float(atime::diff(_now,m_start).value());
      if((delay.value()<0)||(t<=delay.value())) {

        float dt = float(atime::diff(_now,m_prev).value());
        if(dt>=0.5f) {
          snow_cbk* _cbk = new snow_cbk(*this,m_rand,snow_cbk::action_create());
          _cbk->m_time = _now;
          _cbk->set_single_shoot(true); //important.
          m_ui.add_work(_cbk);

          m_prev = _now;
        }

        _e->set_some_found(true);
      }

    }
  }
public:
  snow_anim(ui& a_ui,const atime& a_start)
  :base_anim(a_start)
  ,parent()

  ,delay(-1)
  ,number_of_flakes(20)
  ,sky_size(10)
  ,flake_size(0.05f) //wall should be 0.03f
  ,start_height(5)    //m
  ,initial_speed(vec3f(0,0,0)) //m/s
  ,acceleration(vec3f(0,-grav_const()/6.0f,0)) //m/s2

  ,m_ui(a_ui)
  {
    add_fields();
  }
  virtual ~snow_anim(){
    m_ui.invalidate_works(snow_cbk::s_class()); //IMPORTANT.
  }
public:
  snow_anim(const snow_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)

  ,delay(a_from.delay)
  ,number_of_flakes(a_from.number_of_flakes)
  ,sky_size(a_from.sky_size)
  ,flake_size(a_from.flake_size)
  ,start_height(a_from.start_height)
  ,initial_speed(a_from.initial_speed)
  ,acceleration(a_from.acceleration)

  ,m_ui(a_from.m_ui)
  {
    add_fields();
  }
  snow_anim& operator=(const snow_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);

    delay = a_from.delay;
    number_of_flakes = a_from.number_of_flakes;
    sky_size = a_from.sky_size;
    flake_size = a_from.flake_size;
    start_height = a_from.start_height;
    initial_speed = a_from.initial_speed;
    acceleration = a_from.acceleration;

    return *this;
  }
protected:
  void create_snow(atime& a_time) {
    float y_start = start_height;

    const vec3f& v0 = initial_speed.value();
    const vec3f& acc = acceleration.value();

    // time to reach y0<x0.y() :
    // y0 = acc.y()/2*t*t+v0.y()*t+y_start
    float y0 = 0;

    // D = b2-4ac
    float D = v0.y()*v0.y()-2*acc.y()*(y_start-y0); //it should be >0

    float tmx = (-v0.y()-::sqrtf(D))/acc.y();
    //::printf("debug : %g\n",tmx);

    for(unsigned int index=0;index<number_of_flakes.value();index++) {

      separator* _sep = new separator;
      m_group.add(_sep);

      float x = sky_size*(float(m_rand.shoot())-0.5f);
      float z = sky_size*(float(m_rand.shoot())-0.5f);

      // we assume camera params are in meter.

      vec3f x0(x,y_start,z);

      parabolic_anim* m = new parabolic_anim(m_ui,a_time);
      m->delay = tmx;
      m->position = x0;
      m->speed = v0;
      m->acceleration = acc;
      snow_cbk* _cbk = new snow_cbk(*this,m_rand,snow_cbk::action_stop());
      _cbk->m_to_del = _sep;
      m->add_end_callback(_cbk);
      _sep->add(m);

      cube* _node = new cube();
      _node->width = flake_size;
      _node->height = flake_size;
      _node->depth = flake_size;
      _sep->add(_node);

    } //endfor
  }
protected:
  class snow_cbk : public acbk {
    INLIB_CBK(snow_cbk,inlib::sg::snow_anim::snow_cbk,acbk)
  public:
    static unsigned int action_create() {return 0;}
    static unsigned int action_stop() {return 2;}
  public:
    virtual return_action action() {
      //::printf("debug : snow cbk\n");
      if(m_action==action_create()) {
        m_this.create_snow(m_time);
        return return_to_render;

      } else if(m_action==action_stop()) {
        //WARNING : delete anim must be done in the main loop.
        //::printf("debug : stop\n");
        if(m_to_del && m_this.m_group.remove(m_to_del)) {
          delete m_to_del;
          m_to_del = 0;
        }
        //return return_to_render;
      }
      return return_none;
    }
  public:
    snow_cbk(snow_anim& a_this,
             random::flat& a_rand,
             unsigned int a_action)
    :parent(a_action)
    ,m_this(a_this)
    ,m_rand(a_rand)
    ,m_to_del(0)
    ,m_time(0,0)
    {}
    virtual ~snow_cbk(){}
  public:
    snow_cbk(const snow_cbk& a_from)
    :parent(a_from)
    ,m_this(a_from.m_this)
    ,m_rand(a_from.m_rand)
    ,m_to_del(a_from.m_to_del)
    ,m_time(a_from.m_time)
    {}
    snow_cbk& operator=(const snow_cbk& a_from){
      parent::operator=(a_from);
      m_rand = a_from.m_rand;
      m_to_del = a_from.m_to_del;
      m_time = a_from.m_time;
      return *this;
    }
  protected:
    snow_anim& m_this;
    random::flat& m_rand;
  public:
    separator* m_to_del;
    atime m_time;
  };
protected:
  ui& m_ui;
  random::flat m_rand;
};

}}

#endif
