// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_opener
#define inlib_opener

#include "iopener"

#include "../file_opener"
#include "../file_format"
#include "../rcmp"
#include "../vpair"

#include "guiv"

namespace inlib {

class opener : public file_opener {
public:
  typedef std::pair<std::string,iopener*> named_opener_t;
public:
  virtual bool open(uint64 a_sz,const char* a_buffer,const args& a_args,bool& a_done){

    a_done = false;

    std::ostream& out = m_gv.out();

    if(m_verbose) {
      out << "inlib::opener::open(buffer) :"
          << " open buffer of size " << a_sz << " ..."
          << std::endl;
    }


    inlib_vforcit(named_opener_t,m_openers,it){
      if(m_verbose) {
        out << "inlib::opener::open(buffer) :"
            << " try " << (*it).second->s_cls() << " ..."
            << std::endl;
      }

      bool is;
      if(!(*it).second->is(a_sz,a_buffer,is)) {
        m_gv.warn((*it).second->s_cls()+".is() failed.");
        return false;
      }
      if(is) {
        if(m_verbose) {
          out << "inlib::opener::open(buffer) :"
              << " is a."
              << std::endl;
        }

/*
#ifdef INLIB_MEM
        if(!m_gv.evd_is()) m_gv.evd_create_sg(2);
        m_gv.evd_detector().clear();
        m_gv.evd_event().clear();
        m_gv.evd_net_sg().clear();
        m_gv.meta_zone_had_been_shown();
        m_gv.hide_main_menu(); //may induce some object creation.

        static bool counter_inited = false;
        static int old_counter = 0;
        int mem_counter = mem::counter();
        if(counter_inited) {
          if(mem_counter!=old_counter) {
            ::printf("debug : load_exsg : balance %d\n",
              mem_counter-old_counter);
          }
        } else {
          counter_inited = true;
          old_counter = mem_counter;
          ::printf("debug : load_exsg : 010 : start counter %d\n",
              old_counter);
        }
#endif
*/

        bool done;
        if(!(*it).second->open(a_sz,a_buffer,m_gv,a_args,done)) {
          m_gv.warn((*it).second->s_cls()+".open(buffer) failed.");
          return false;
        }
        if(done) {
          if(m_verbose) {
            out << "inlib::opener::open(buffer) :"
                << " opened."
                << std::endl;
          }
          a_done = true;
          return true;
        }
      } else {
        if(m_verbose) {
          out << "inlib::opener::open(buffer) :"
              << " is not a."
              << std::endl;
        }
      }
    }
    return true;
  }

  //not in enum due to potential inheritance.
  //typedef std::string format_type;

  virtual bool open(const std::string& a_path,const format_type& a_format,const args& a_args,bool& a_done){
    a_done = false;

    std::ostream& out = m_gv.out();

    if(m_verbose) {
      out << "inlib::opener::open :"
          << " open file " << sout(a_path) << " ..."
          << std::endl;
    }

    if(!file::exists(a_path)) {
      out << "inlib::opener::open :"
          << " file " << sout(a_path) << " does not exist."
          << std::endl;
      m_gv.map_warn_not_existing_file();
      return false;
    }

    if(rcmp(a_format,file::s_format_guessed())){
      inlib_vforcit(named_opener_t,m_openers,it){
        if(m_verbose) {
          out << "inlib::opener::open :"
              << " try " << (*it).second->s_cls() << " ..."
              << std::endl;
        }
        bool is;
        if(!(*it).second->is(a_path,is)) {
          m_gv.warn((*it).second->s_cls()+".is() failed.");
          return false;
        }
        if(is) {
          if(m_verbose) {
            out << "inlib::opener::open :"
                << " is a."
                << std::endl;
          }
          bool done;
          if(!(*it).second->open(a_path,m_gv,a_args,done)) {
            m_gv.warn((*it).second->s_cls()+".open() failed.");
            return false;
          }
          if(done) {
            if(m_verbose) {
              out << "inlib::opener::open :"
                  << " opened."
                  << std::endl;
            }
            a_done = true;
            return true;
          }
        } else {
          if(m_verbose) {
            out << "inlib::opener::open() :"
                << " is not a."
                << std::endl;
          }
        }
      }
      return true;
    }

   {iopener* op;
    if(find(m_openers,a_format,op)) {
      bool done;
      if(!op->open(a_path,m_gv,a_args,done)) {
        m_gv.warn(op->s_cls()+".open() failed.");
        return false;
      }
      if(done) {
        if(m_verbose) {
          out << "inlib::opener::open :"
              << " opened for format " << a_format << "."
              << std::endl;
        }
        a_done = true;
        return true;
      }
    }}

    return true;
  }

/*
  virtual bool is_openable(const std::string& a_path,bool& a_done){
    a_done = false;
    if(!file::exists(a_path)) return false;
    inlib_vforcit(named_opener_t,m_openers,it){
      bool is;
      if(!(*it).second->is(a_path,is)) return false;
      if(is) {
        a_done = true;
        return true;
      }
    }
    return true;
  }
*/
public:
  opener(sg::guiv& a_gv,unsigned int a_mem_limit)
  :m_gv(a_gv)
  ,m_mem_limit(a_mem_limit)
  ,m_verbose(false)
  {}
  virtual ~opener(){clear_openers();}
public:
  opener(const opener& a_from)
  :file_opener(a_from)
  ,m_gv(a_from.m_gv)
  ,m_exts(a_from.m_exts)
  ,m_mem_limit(a_from.m_mem_limit)
  ,m_preferred_format(a_from.m_preferred_format)
  ,m_verbose(a_from.m_verbose)
  {
    copy_openers(a_from.m_openers);
  }
  opener& operator=(const opener& a_from){
    if(&a_from==this) return *this;
    m_exts = a_from.m_exts;
    m_mem_limit = a_from.m_mem_limit;
    m_preferred_format = a_from.m_preferred_format;
    m_verbose = a_from.m_verbose;
    copy_openers(a_from.m_openers);
    return *this;
  }
public:
  void set_preferred_format(const format_type& a_v) {m_preferred_format = a_v;}
  const std::string& preferred_format() const {return m_preferred_format;}
public:
  void add_ext(const std::string& a_ext) {if(!is_in(m_exts,a_ext)) m_exts.push_back(a_ext);}
  const std::vector<std::string>& exts() const {return m_exts;}
  void clear_exts() {m_exts.clear();}
  void add_opener(const std::string& a_name,iopener* a_op) {
    //if(!is_an_opener(a_name))
    m_openers.push_back(named_opener_t(a_name,a_op)); //take ownership of a_op.
  }
  const std::vector<named_opener_t>& openers() const {return m_openers;}
  //std::vector<named_opener_t>& openers() {return m_openers;}
protected:
  bool is_an_opener(const std::string& a_name) const {
    inlib_vforcit(named_opener_t,m_openers,it) {if((*it).first==a_name) return true;}
    return false;
  }

  void clear_openers(){
    inlib_vforit(named_opener_t,m_openers,it) delete (*it).second;
    m_openers.clear();
  }
  void copy_openers(const std::vector<named_opener_t>& a_from) {
    clear_openers();
    inlib_vforcit(named_opener_t,a_from,it){
      m_openers.push_back(named_opener_t((*it).first,(*it).second->copy()));
    }
  }
protected:
  sg::guiv& m_gv;
  std::vector<std::string> m_exts;
  unsigned int m_mem_limit;
  //have a vector (and not a map) since the order is important.
  std::vector<named_opener_t> m_openers;
  std::string m_preferred_format; //for Wt upload.
  bool m_verbose;
};

}

//inlib_build_use kernel

#endif
