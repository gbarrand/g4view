// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_button_grid
#define inlib_sg_button_grid

#include "separator"
#include "matrix"
#include "vertices"
#include "draw_style"
#include "rgba"
#include "cbks"
#include "sf_vec"

#include "back_area"

#include "../colorf"

namespace inlib {
namespace sg {

template <class BUTTON>
class button_grid : public node {
  INLIB_NODE_T(BUTTON,button_grid,inlib::sg::button_grid,node)
public:
  sf<float> width;
  sf<float> height;
  sf<unsigned int> cols;
  sf<unsigned int> rows;
  sf_vec<colorf,float> back_color;
  sf_vec<colorf,float> arm_color;
  sf<float> border_width;
  sf<float> border_height;
  sf_vec<colorf,float> border_color;
  sf<bool> auto_resize;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::button_grid)
    static const desc_fields s_v(parent::node_desc_fields(),10, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(cols),
      INLIB_ARG_FIELD_DESC(rows),
      INLIB_ARG_FIELD_DESC(back_color),
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(border_width),
      INLIB_ARG_FIELD_DESC(border_height),
      INLIB_ARG_FIELD_DESC(border_color),
      INLIB_ARG_FIELD_DESC(auto_resize)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&cols);
    add_field(&rows);
    add_field(&back_color);
    add_field(&arm_color);
    add_field(&border_width);
    add_field(&border_height);
    add_field(&border_color);
    add_field(&auto_resize);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.pick(a_action);
    if(a_action.done()) return;
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.bbox(a_action);
  }
  virtual void event(event_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.event(a_action);
    if(a_action.done()) return;

    if(!auto_resize.value()) return;
    if(!height.value()) return;
    if(!a_action.state().m_camera_ortho) return;

    const sg::event& evt = a_action.get_event();
    if(const size_event* sz_evt = event_cast<sg::event,size_event>(evt)){

      unsigned int ow = sz_evt->old_width();
      unsigned int oh = sz_evt->old_height();
      unsigned int w = sz_evt->width();
      unsigned int h = sz_evt->height();

      float old_aspect = width.value()/height.value();

      width = width*(float(w)/float(h))/(float(ow)/float(oh));

      height = width/old_aspect;

      update_sg();
      reset_touched();
    }
  }
public:
  button_grid()
  :parent()

  ,width(1)
  ,height(1)
  ,cols(1)
  ,rows(1)
  ,back_color(colorf_white())
  ,arm_color(colorf_grey())
  ,border_width(0)
  ,border_height(0)
  ,border_color(colorf_black())
  ,auto_resize(false)

  ,m_cbks()
  ,m_selected_col(0)
  ,m_selected_row(0)
  {
    add_fields();
  }
  virtual ~button_grid(){}
public:
  button_grid(const button_grid& a_from)
  :parent(a_from)

  ,width(a_from.width)
  ,height(a_from.height)
  ,cols(a_from.cols)
  ,rows(a_from.rows)
  ,back_color(a_from.back_color)
  ,arm_color(a_from.arm_color)
  ,border_width(a_from.border_width)
  ,border_height(a_from.border_height)
  ,border_color(a_from.border_color)
  ,auto_resize(a_from.auto_resize)

  ,m_cbks(a_from.m_cbks)
  ,m_selected_col(0)
  ,m_selected_row(0)
  {
    add_fields();
  }
  button_grid& operator=(const button_grid& a_from){
    parent::operator=(a_from);
    if(&a_from==this) return *this;

    width = a_from.width;
    height = a_from.height;
    cols = a_from.cols;
    rows = a_from.rows;

    back_color = a_from.back_color;
    arm_color = a_from.arm_color;

    border_width = a_from.border_width;
    border_height = a_from.border_height;
    border_color = a_from.border_color;

    auto_resize = a_from.auto_resize;

    m_cbks = a_from.m_cbks;
    m_selected_col = 0;
    m_selected_row = 0;
    return *this;
  }
public:
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.add(a_cbk);
    touch();
  }
  void copy_cbks(const sg::cbks& a_from,bool a_clear = true) {
    m_cbks.copy(a_from,a_clear);
    touch();
  }
  void clear_cbks(){
    m_cbks.clear();
    touch();
  }
public:
  bool back_selected() const {
    return ((m_selected_col==-1)&&(m_selected_row==-1))?true:false;
  }
public:
  const separator& container() const {return m_sep;} //must be consistent with pick().
  void update_sg() {
    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;
    if(!cols.value()) return;
    if(!rows.value()) return;

    if(border_width.value()<0) return;
    if(border_height.value()<0) return;

    bool back_button = ((border_width.value()>0) && (border_height.value()>0))?true:false;

    float bw = border_width;
    float bh = border_height;

    // external back button. It could be used to say "whole button_grid".
    if(back_button){
      // do it (first in m_sep) with four externals buttons to sort out
      // the case of of gui_viewer/gui which is not z depth testing.

      float zz = 0;

      // top :
     {separator* sep = new separator;
      m_sep.add(sep);

      float wbutton = width;
      float hbutton = bh;
      float x = 0;
      float y = height*0.5f-bh*0.5f;

      matrix* mtx = new matrix;
      mtx->set_translate(x,y,zz);
      sep->add(mtx);

      BUTTON* b = new BUTTON;

      b->back_area::border_visible = false;

      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      b->width = wbutton;
      b->height = hbutton;

      b->add_callback(new button_cbk(*this,-1,-1));
      b->copy_cbks(m_cbks,false);

      sep->add(b);}

      // bottom :
     {separator* sep = new separator;
      m_sep.add(sep);

      float wbutton = width;
      float hbutton = bh;
      float x = 0;
      float y = -height*0.5f+bh*0.5f;

      matrix* mtx = new matrix;
      mtx->set_translate(x,y,zz);
      sep->add(mtx);

      BUTTON* b = new BUTTON;

      b->back_area::border_visible = false;

      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      b->width = wbutton;
      b->height = hbutton;

      b->add_callback(new button_cbk(*this,-1,-1));
      b->copy_cbks(m_cbks,false);

      sep->add(b);}

      // left :
     {separator* sep = new separator;
      m_sep.add(sep);

      float wbutton = bw;
      float hbutton = height-2*bh;
      float x = -width*0.5f+bw*0.5f;
      float y = 0;

      matrix* mtx = new matrix;
      mtx->set_translate(x,y,zz);
      sep->add(mtx);

      BUTTON* b = new BUTTON;

      b->back_area::border_visible = false;

      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      b->width = wbutton;
      b->height = hbutton;

      b->add_callback(new button_cbk(*this,-1,-1));
      b->copy_cbks(m_cbks,false);

      sep->add(b);}

      // right :
     {separator* sep = new separator;
      m_sep.add(sep);

      float wbutton = bw;
      float hbutton = height-2*bh;
      float x = width*0.5f-bw*0.5f;
      float y = 0;

      matrix* mtx = new matrix;
      mtx->set_translate(x,y,zz);
      sep->add(mtx);

      BUTTON* b = new BUTTON;

      b->back_area::border_visible = false;

      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      b->width = wbutton;
      b->height = hbutton;

      b->add_callback(new button_cbk(*this,-1,-1));
      b->copy_cbks(m_cbks,false);

      sep->add(b);}

    }

    float wbutton = (width-2*bw)/cols.value();
    float hbutton = (height-2*bh)/rows.value();
    float bx = -width*0.5f+bw;
    float by = -height*0.5f+bh;

    float dy = hbutton;
    float y = by+hbutton*0.5f;

    float zz = 1;

    for(unsigned int row=0;row<rows.value();row++,y+=dy) {
      float dx = wbutton;
      float x = bx+wbutton*0.5f;

      for(unsigned int col=0;col<cols.value();col++,x+=dx) {
        separator* sep = new separator;
        m_sep.add(sep);

        matrix* mtx = new matrix;
        mtx->set_translate(x,y,0);
        sep->add(mtx);

        BUTTON* b = new BUTTON;

        b->back_area::color = back_color;
        b->back_area::border_color = border_color;
        b->arm_color = arm_color;

        b->width = wbutton;
        b->height = hbutton;

        b->add_callback(new button_cbk(*this,col,row));
        b->copy_cbks(m_cbks,false);

        sep->add(b);
      }
    }

    if(back_button) {
      //border :
      float xb = -width*0.5f;
      float xe =  width*0.5f;
      float yb = -height*0.5f;
      float ye =  height*0.5f;

      rgba* mat = new rgba();
      mat->color = border_color;
      m_sep.add(mat);

      draw_style* ds = new draw_style;
      ds->style = draw_lines;
      ds->line_width = 1;
      m_sep.add(ds);

      vertices* vtxs = new vertices;
      vtxs->mode = gl::line_strip();
      m_sep.add(vtxs);

      vtxs->add(xb,yb,zz);
      vtxs->add(xe,yb,zz);
      vtxs->add(xe,ye,zz);
      vtxs->add(xb,ye,zz);
      vtxs->add(xb,yb,zz);
    }

  }

protected:

  class button_cbk : public bcbk {
    typedef bcbk parent;
  public:
    virtual return_action action() {
      m_button_grid.m_selected_col = m_col;
      m_button_grid.m_selected_row = m_row;
      return return_none;
    }
    virtual bcbk* copy() const {return new button_cbk(*this);}
  public:
    button_cbk(button_grid& a_button_grid,int a_col,int a_row)
    :parent()
    ,m_button_grid(a_button_grid)
    ,m_col(a_col)
    ,m_row(a_row)
    {}
    virtual ~button_cbk(){}
  public:
    button_cbk(const button_cbk& a_from)
    :parent(a_from)
    ,m_button_grid(a_from.m_button_grid)
    ,m_col(a_from.m_col)
    ,m_row(a_from.m_row)
    {}
    button_cbk& operator=(const button_cbk& a_from){
      parent::operator=(a_from);
      m_col = a_from.m_col;
      m_row = a_from.m_row;
      return *this;
    }
  protected:
    button_grid& m_button_grid;
    int m_col;
    int m_row;
  };

protected:
  separator m_sep;
  sg::cbks m_cbks;
public:
  int m_selected_col; //-1 = back button.
  int m_selected_row; //-1 = back button.
};

}}

#endif

