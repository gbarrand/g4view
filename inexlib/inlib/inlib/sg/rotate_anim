// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_rotate_anim
#define inlib_sg_rotate_anim

#include "base_anim"
#include "matrix"

#include "sf_vec3f"
#include "../mathf"

namespace inlib {
namespace sg {

class rotate_anim : public base_anim, public matrix {
public:
  INLIB_NODE_NO_CAST(rotate_anim,inlib::sg::rotate_anim,matrix)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<rotate_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  virtual bool action(std::ostream&,const atime& a_now) {
    float t = float(atime::diff(a_now,m_start).value());
    float tp = float(atime::diff(m_prev,m_start).value());
    mul_rotate(axis.value(),(t-tp)*omega.value());
    return true;
  }
public:
  virtual void event(event_action& a_action) {
    parent::event(a_action);
    do_event(a_action);
  }
public:
  sf_vec3f axis;
  sf<float> omega; //rad/sec
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::rotate_anim)
    static const desc_fields s_v(parent::node_desc_fields(),3, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(axis),
      INLIB_ARG_FIELD_DESC(omega)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&axis);
    add_field(&omega);
  }
public:
  rotate_anim(const atime& a_start)
  :base_anim(a_start)
  ,parent()

  ,axis(vec3f(0,0,1))     //rotate around z.
  ,omega(ftwo_pi()/1.0f)  // turn/s  (one turn per second).
  {
    add_fields();
  }
  virtual ~rotate_anim(){}
public:
  rotate_anim(const rotate_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)

  ,axis(a_from.axis)
  ,omega(a_from.omega)
  {
    add_fields();
  }
  rotate_anim& operator=(const rotate_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);
    axis = a_from.axis;
    omega = a_from.omega;
    return *this;
  }
};

}}

#endif
