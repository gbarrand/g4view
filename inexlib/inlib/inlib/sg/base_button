// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_base_button
#define inlib_sg_base_button

#include "cbks"

#include "sf_vec"
#include "../colorfs"

namespace inlib {
namespace sg {

class base_button {
public:
  INLIB_SCLASS(inlib::sg::base_button)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<base_button>(this,a_class)) return p;
    return 0;
  }
public:
  sf_vec<colorf,float> arm_color;
public:
  base_button(sf_vec<colorf,float>& a_field)
  :arm_color(colorf_grey())
  ,m_cbks()
  ,m_color_sf(a_field)

  ,m_is_armed(false)
  {}
  virtual ~base_button(){}
public:
  base_button(const base_button& a_from)
  :arm_color(a_from.arm_color)
  ,m_cbks(a_from.m_cbks)
  ,m_color_sf(a_from.m_color_sf)

  ,m_is_armed(a_from.m_is_armed)
  {}
  base_button& operator=(const base_button& a_from){
    m_cbks = a_from.m_cbks;
    arm_color = a_from.arm_color;
    m_is_armed = a_from.m_is_armed;
    return *this;
  }
public:
  const sg::cbks& cbks() const {return m_cbks;}
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.callbacks().push_back(a_cbk);
  }
  void copy_cbks(const sg::cbks& a_from,bool a_clear = true) {
    m_cbks.copy(a_from,a_clear);
  }
  void clear_cbks(){m_cbks.clear();}
public:

  void arm() {
    if(m_is_armed) return; //done.
    m_saved_color = m_color_sf.value();
    m_color_sf = arm_color;
    m_is_armed = true;
  }
  void disarm() {
    if(!m_is_armed) return;
    m_color_sf = m_saved_color;
    m_is_armed = false;
  }

  bool is_armed() const {return m_is_armed;}

public: //for inlib::sg::text_button
  sg::field* arm_color_address() {return &arm_color;}
protected:
  sg::cbks m_cbks;
  sf_vec<colorf,float>& m_color_sf;
  colorf m_saved_color;
  bool m_is_armed;
};

}}

#endif
