// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_bsg_factories
#define inlib_sg_bsg_factories

#include "fac_args"

#include <string>
#include <map>

namespace inlib {
namespace sg {

class node;

class bsg_factories {
public:
  typedef node* (*factory)(fac_args&,bool&);
  typedef std::map<std::string,factory> factories;
public:
  bsg_factories(){}
  virtual ~bsg_factories(){}
public:
  bsg_factories(const bsg_factories& a_from)
  :m_factories(a_from.m_factories)
  {}
  bsg_factories& operator=(const bsg_factories& a_from){
    if(&a_from==this) return *this;
    m_factories = a_from.m_factories;
    return *this;
  }
public:
  void add_factory(const std::string& a_class,factory a_factory,bool a_check = false){
    if(a_check) {if(find_factory(a_class)) return;}
//  if(find_factory(a_class)) {
//    ::printf("debug : bsg_factories::add_factory : %s already here.\n",
//        a_class.c_str());
//  }
    m_factories[a_class] = a_factory;
  }

public:
  template <class T>
  static node* create_node(fac_args&,bool& a_composite) {
    a_composite = false;
    return new T;
  }

  template <class T>
  static node* create_composite(fac_args&,bool& a_composite) {
    a_composite = true;
    return new T;
  }

public:
  template <class T>
  void add_factory(){add_factory(T::s_class(),create_node<T>);}

  template <class T>
  void add_factory_composite(){add_factory(T::s_class(),create_composite<T>);}

protected:
  void clear_factories() {m_factories.clear();}
public:
  factory find_factory(const std::string& a_class) const {
   {std::map<std::string,factory>::const_iterator it = m_factories.find(a_class);
    if(it!=m_factories.end()) return (*it).second;}

    //for protocol 1 todel<T> :
   {std::string::size_type pos = a_class.find('<');
    if(pos!=std::string::npos){
      std::string scls = a_class.substr(0,pos);
      std::map<std::string,factory>::const_iterator it = m_factories.find(scls);
      if(it!=m_factories.end()) return (*it).second;
    }}

    return 0;
  }

protected:
  factories m_factories;
};

}}

//inlib_build_use kernel

#endif
