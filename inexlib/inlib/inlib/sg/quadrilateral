// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_quadrilateral
#define inlib_sg_quadrilateral

#include "render_action"
#include "pick_action"
#include "bbox_action"
#include "gstos"

#include "mf"

namespace inlib {
namespace sg {

class quadrilateral : public node, public gstos {
  INLIB_NODE_NO_CAST(quadrilateral,inlib::sg::quadrilateral,node)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<quadrilateral>(this,a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  mf_vec<vec3f,float> corners;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::quadrilateral)
    static const desc_fields s_v(parent::node_desc_fields(),1, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(corners)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&corners);
  }
protected: //gstos
  virtual unsigned int create_gsto(std::ostream&,sg::render_manager& a_mgr) {
    std::vector<float> gsto_data;

   {//one triangle fan with four points :
    size_t nxyzs = 4*3; //4 points * 3 coords
    size_t ngsto = nxyzs*2;   //xyz+nms
    size_t sz = gsto_data.size();
    gsto_data.resize(sz+ngsto);
    float* pxyz = vec_data<float>(gsto_data)+sz;
    f12 tris,nms;
    _front(tris,nms);
    ::memcpy(pxyz,tris,nxyzs*sizeof(float));
    ::memcpy(pxyz+nxyzs,nms,nxyzs*sizeof(float));
    m_gsto_tris_sz = nxyzs;}

    if(gsto_data.empty()) return 0;

    return a_mgr.create_gsto_from_data(gsto_data);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    if(corners.size()!=4) return;

    const state& state = a_action.state();

    if(state.m_use_gsto) {
      unsigned int _id = get_gsto_id(a_action.out(),a_action.render_manager());
      if(_id) {
        bufpos ptris = 0;
        bufpos pnms  = ptris+m_gsto_tris_sz*sizeof(float);
        a_action.begin_gsto(_id);
        a_action.draw_gsto_vn(gl::triangle_fan(),m_gsto_tris_sz/3,ptris,pnms);
        a_action.end_gsto();
        return;

      } else { //!_id
        // use immediate rendering.
      }

    } else {
      clean_gstos(&a_action.render_manager());
    }

    // immediate rendering :
    f12 tris,nms;
    _front(tris,nms);
    a_action.draw_vertex_normal_array(gl::triangle_fan(),12,tris,nms);
  }

  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    if(corners.size()!=4) return;
    f12 tris,nms;
    _front(tris,nms);
    a_action.add__primitive(*this,gl::triangle_fan(),12,tris,true);
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    if(corners.size()!=4) return;
    f12 tris,nms;
    _front(tris,nms);
    a_action.add_points(12,tris);
  }
public:
  virtual void clear_gstos() {gstos::clean_gstos();}
public:
  quadrilateral()
  :parent()
  ,corners()
  ,m_gsto_tris_sz(0)
  {
    add_fields();
    float w2 = 0.5f;
    corners.add(vec3f(-w2,-w2,0));
    corners.add(vec3f( w2,-w2,0));
    corners.add(vec3f( w2, w2,0));
    corners.add(vec3f(-w2, w2,0));
  }
  virtual ~quadrilateral(){}
public:
  quadrilateral(const quadrilateral& a_from)
  :parent(a_from)
  ,gstos(a_from)
  ,corners(a_from.corners)
  ,m_gsto_tris_sz(0)
  {
    add_fields();
  }
  quadrilateral& operator=(const quadrilateral& a_from){
    parent::operator=(a_from);
    gstos::operator=(a_from);
    if(&a_from==this) return *this;
    corners = a_from.corners;
    return *this;
  }

protected:
  virtual void update_sg(std::ostream&) {
    clean_gstos();
    plane<vec3f> plane(corners[0],corners[1],corners[2]);
    m_normal = plane.normal();
  }
protected:
  typedef float f12[12];
  void _front(f12& a_front,f12& a_nms,float a_epsil = 0.0f) {
    const std::vector<vec3f>& cs = corners.values();

    a_front[0] =  cs[0].x()-a_epsil;
    a_front[1] =  cs[0].y()-a_epsil;
    a_front[2] =  cs[0].z();

    a_front[3] =  cs[1].x()+a_epsil;
    a_front[4] =  cs[1].y()-a_epsil;
    a_front[5] =  cs[1].z();

    a_front[6] =  cs[2].x()+a_epsil;
    a_front[7] =  cs[2].y()+a_epsil;
    a_front[8] =  cs[2].z();

    a_front[ 9] = cs[3].x()-a_epsil;
    a_front[10] = cs[3].y()+a_epsil;
    a_front[11] = cs[3].z();

    a_nms[0] = m_normal.x();
    a_nms[1] = m_normal.y();
    a_nms[2] = m_normal.z();

    a_nms[3] = m_normal.x();
    a_nms[4] = m_normal.y();
    a_nms[5] = m_normal.z();

    a_nms[6] = m_normal.x();
    a_nms[7] = m_normal.y();
    a_nms[8] = m_normal.z();

    a_nms[9]  = m_normal.x();
    a_nms[10] = m_normal.y();
    a_nms[11] = m_normal.z();
  }

protected:
  size_t m_gsto_tris_sz;
  vec3f m_normal;
};

}}

#endif
