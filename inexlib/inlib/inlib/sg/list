// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_list
#define inlib_sg_list

#include "base_list"
#include "ilist"
#include "text_button"
#include "image_text_button"
#include "texts"

#include "mf_list_item"

#include "../nostream"

namespace inlib {
namespace sg {

class list : public virtual ilist, public base_list {
  INLIB_NODE(list,inlib::sg::list,base_list)
public:
  mf_list_item items;
  sf<float> text_wmargin_factor;
  sf<float> text_hmargin_factor;
  sf_enum<layout_policy> item_layout;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::list)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(items),
      INLIB_ARG_FIELD_DESC(text_wmargin_factor),
      INLIB_ARG_FIELD_DESC(text_hmargin_factor),
      INLIB_ARG_FIELD_DESC(item_layout)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&items);
    add_field(&text_wmargin_factor);
    add_field(&text_hmargin_factor);
    add_field(&item_layout);
  }
public:
  list(const base_freetype& a_ttf)
  :parent()
  ,items()
  ,text_wmargin_factor(0.9f)
  ,text_hmargin_factor(0.9f)
  ,item_layout(layout_text_under_image)
  ,m_ttf(a_ttf)
  {
    add_fields();
  }
  virtual ~list(){}
public:
  list(const list& a_from)
  :ilist(a_from)
  ,parent(a_from)
  ,items(a_from.items)
  ,text_wmargin_factor(a_from.text_wmargin_factor)
  ,text_hmargin_factor(a_from.text_hmargin_factor)
  ,item_layout(a_from.item_layout)
  ,m_ttf(a_from.m_ttf)
  {
    add_fields();
  }
  list& operator=(const list& a_from){
    parent::operator=(a_from);
    items = a_from.items;
    text_wmargin_factor = a_from.text_wmargin_factor;
    text_hmargin_factor = a_from.text_hmargin_factor;
    item_layout = a_from.item_layout;
    return *this;
  }
public: //inlib::sg::list
  virtual void add(const std::string& a_label,bcbk* a_cbk,bool a_dir = false) {
    items.add(list_item(a_label,a_cbk,a_dir));
  }
public:
  void add(const std::vector<std::string>& a_strings,bcbk* a_cbk,bool a_dir = false) {
    items.add(list_item(a_strings,a_cbk,a_dir));
  }
/*
  void add(const img_byte& a_img,
           bcbk* a_cbk,
           bool a_dir = false) {
    items.add(list_item(a_img,a_cbk,a_dir));
  }
*/
  void add(const std::string& a_label,
           const img_byte& a_img,
           bcbk* a_cbk,
           bool a_dir = false) {
    items.add(list_item(a_label,a_img,a_cbk,a_dir));
  }

  bool add_at_top(const std::string& a_label,
                  bcbk* a_cbk,  //we take ownerhsip
                  bool a_dir = false) {
    if(items.empty()) {delete a_cbk;return false;}
    items.insert(items.values().begin(),list_item(a_label,a_cbk,a_dir));
    return true;
  }

  bool add_at_top(const std::string& a_label,
                  const img_byte& a_img,
                  bcbk* a_cbk,  //we take ownerhsip
                  bool a_dir = false) {
    if(items.empty()) {delete a_cbk;return false;}
    items.insert(items.values().begin(),list_item(a_label,a_img,a_cbk,a_dir));
    return true;
  }

  bool add_before(const std::string& a_item,
                  const std::string& a_label,
                  bcbk* a_cbk,  //we take ownerhsip
                  bool a_dir = false) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        items.insert(it,list_item(a_label,a_cbk,a_dir));
        return true;
      }
    }
    delete a_cbk;
    return false;
  }

  bool add_before(const std::string& a_item,
                  const std::string& a_label,
                  const img_byte& a_img,
                  bcbk* a_cbk,
                  bool a_dir = false) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        items.insert(it,list_item(a_label,a_img,a_cbk,a_dir));
        return true;
      }
    }
    delete a_cbk;
    return false;
  }

  bool add_after(const std::string& a_item,
                 const std::string& a_label,
                 bcbk* a_cbk,
                 bool a_dir = false) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        items.insert(it+1,list_item(a_label,a_cbk,a_dir));
        return true;
      }
    }
    delete a_cbk;
    return false;
  }

  bool add_after(const std::string& a_item,
                 const std::string& a_label,
                 const img_byte& a_img,
                 bcbk* a_cbk,
                 bool a_dir = false) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        items.insert(it+1,list_item(a_label,a_img,a_cbk,a_dir));
        return true;
      }
    }
    delete a_cbk;
    return false;
  }

  bool add_callback(const std::string& a_item,
                    bcbk* a_cbk,
                    bool a_clear = false) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        if(a_clear) (*it).clear_cbks();
        (*it).add_callback(a_cbk);
        return true;
      }
    }
    delete a_cbk;
    return false;
  }

  bool remove_item(const std::string& a_item) {
    std::vector<std::string> ss;
    ss.push_back(a_item);
    inlib_vforit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        items.values().erase(it);
        return true;
      }
    }
    return false;
  }

  bool has_item(const std::string& a_label) const {
    std::vector<std::string> ss;
    ss.push_back(a_label);
    inlib_vforcit(list_item,items.values(),it) {
      if((*it).strings()==ss) return true;
    }
    return false;
  }

  const list_item* find_item(const std::string& a_label) const {
    std::vector<std::string> ss;
    ss.push_back(a_label);
    inlib_vforcit(list_item,items.values(),it) {
      if((*it).strings()==ss) {
        return &(*it);
      }
    }
    return 0;
  }

  bool find_exec_item(const std::string& a_label) const {
    const list_item* item = find_item(a_label);
    if(!item) return false;
    item->cbks().do_actions();
    return true;
  }

  std::vector<base_button*> buttons() {
    nostream out;
    if(touched()) {
      update_sg(out);
      reset_touched();
    }
    //used in gui_viewer tab system.
    search_action sac(out);
    sac.set_class(base_button::s_class());
    m_sep.search(sac);
    std::vector<base_button*> v;
    inlib_vforcit(void*,sac.objs(),it) v.push_back((base_button*)(*it));
    return v;
  }

  void clear() {
    items.clear();
    parent::clear();
  }

public: //for ArcheryTune.
  virtual unsigned int number_of_items() const {return (unsigned int)items.values().size();}
protected:

  virtual node* create_item(std::ostream&,unsigned int a_index) {
    const list_item& item = items.values()[a_index];

    if(item.img().size()) {
      image_text_button* b = new image_text_button(m_ttf);

      b->img = item.img();

      b->text().strings = item.strings();
      b->text().font = font;
      b->text().font_modeling = font_modeling;

      b->color = back_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;
      b->hmargin_factor = text_hmargin_factor;

      b->layout = item_layout;
      b->back_area::corner_radius = corner_radius;

      b->width = witem();
      b->height = hitem();

      b->copy_cbks(item.cbks());

      if(item.is_dir()) {
        b->back_area::color = dir_color;
      }

    //m_texts.add(new noderef(*b));
      
      return b;

    } else {

      text_button* b = new text_button(m_ttf);

      b->strings = item.strings();
      b->font = font;
      b->font_modeling = font_modeling;

      if(item_layout.value()==layout_text_at_left_of_image){
        b->hjust = left;
      } else {
        b->hjust = text_hjust;
      }

      b->color = front_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;
      b->wmargin_factor = text_wmargin_factor;
      b->hmargin_factor = text_hmargin_factor;

      b->back_area::corner_radius = corner_radius;

      b->width = witem();
      b->height = hitem();

      b->copy_cbks(item.cbks());

      if(item.is_dir()) {
        b->back_area::color = dir_color;
      }

    //m_texts.add(new noderef(*b));

      return b;

    }
  }

  virtual node* create_cancel() const {
    text_button* b = new text_button(m_ttf);

    b->set_label(cancel_label.value());
    b->font = font;
    b->font_modeling = font_modeling;

    b->color = front_color;
    b->back_area::color = back_color;
    b->back_area::border_color = border_color;
    b->arm_color = arm_color;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->back_area::corner_radius = corner_radius;

    b->width = witem();
    b->height = hitem()*0.95f;

    b->hjust = center;

    b->copy_cbks(m_cancel_cbks);

    return b;
  }

  virtual node* create_label() const {
    float wtext = witem();
    float htext = hitem();

    text* b = new text(m_ttf);
    b->width = wtext;
    b->height = htext;
  //b->back_area::color = back_color;
    b->back_area::color = label_back_color;
    b->back_area::border_color = border_color;
    b->confine = label_confine;
    b->color = front_color;
    b->font = font;
    b->font_modeling = font_modeling;
    b->wmargin_factor = text_wmargin_factor;
    b->hmargin_factor = text_hmargin_factor;

    b->back_area::corner_radius = corner_radius;

    b->strings.clear();
    b->strings.add(label.value());

    return b;
  }
  virtual void enforce_common_text_height(std::ostream& a_out) {
    sg::enforce_common_text_height(a_out,parent::m_sep);
  }
protected:
  const base_freetype& m_ttf;
};

}}

#endif

