// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_infos
#define inlib_sg_infos

#include "node"

#include "mf"

namespace inlib {
namespace sg {

class infos : public node {
public:
  INLIB_NODE(infos,inlib::sg::infos,node)
public:
  mf_string strings;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::infos)
    static const desc_fields s_v(parent::node_desc_fields(),1, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(strings)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&strings);
  }
public:
  infos()
  :parent()
  {
    add_fields();
  }
  virtual ~infos(){}
public:
  infos(const infos& a_from)
  :parent(a_from)
  ,strings(a_from.strings)
  {
    add_fields();
  }
  infos& operator=(const infos& a_from){
    parent::operator=(a_from);
    strings = a_from.strings;
    return *this;
  }
public:
  void add_keyval(const std::string& a_key,const std::string& a_value) {
    strings.add(a_key);
    strings.add(a_value);
  }
  bool find_keyval(const std::string& a_key,std::string& a_value,const std::string& a_def = "") const {
    const std::vector<std::string>& vs = strings.values();
    std::vector<std::string>::const_iterator it;
    for(it=vs.begin();it!=vs.end();it+=2) {
      if(*it==a_key) {
        it++;
        if(it==vs.end()) {a_value=a_def;return false;}
        a_value = *it;
        return true;
      }
    }
    a_value = a_def;
    return false;
  }
public:
  INLIB_CLASS_STRING(title);
  void add_title(const std::string& a_value) {add_keyval(s_title(),a_value);}
  bool find_title(std::string& a_value) const {return find_keyval(s_title(),a_value);}
};

}}

#endif
