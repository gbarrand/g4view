// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_lrbt
#define inlib_sg_lrbt

#include "base_camera"

namespace inlib {
namespace sg {

class lrbt : public base_camera {
  INLIB_NODE(lrbt,inlib::sg::lrbt,base_camera)
public:
  virtual float near_height() const {
    return top.value()-bottom.value();
  }
  virtual void zoom(float a_fac) {
    //for exa :
    //  a_fac = 0.99f is a zoom in
    //  a_fac = 1.01f is a zoom out
    top.value(top.value()*a_fac);
    bottom.value(bottom.value()*a_fac);
    left.value(left.value()*a_fac);
    right.value(right.value()*a_fac);
  }
  virtual camera_type type() const {return camera_ortho;}
public:
  sf<float> left;
  sf<float> right;
  sf<float> bottom;
  sf<float> top;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::lrbt)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(left),
      INLIB_ARG_FIELD_DESC(right),
      INLIB_ARG_FIELD_DESC(bottom),
      INLIB_ARG_FIELD_DESC(top)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&left);
    add_field(&right);
    add_field(&bottom);
    add_field(&top);
  }
public:
  lrbt()
  :parent()
  ,left(-0.5f)
  ,right(0.5f)
  ,bottom(-0.5f)
  ,top(0.5f)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  virtual ~lrbt(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  lrbt(const lrbt& a_from)
  :parent(a_from)
  ,left(a_from.left)
  ,right(a_from.right)
  ,bottom(a_from.bottom)
  ,top(a_from.top)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  lrbt& operator=(const lrbt& a_from){
    parent::operator=(a_from);
    left = a_from.left;
    right = a_from.right;
    bottom = a_from.bottom;
    top = a_from.top;
    return *this;
  }
public: //operators:
  bool operator==(const lrbt& a_from) const{
    if(!parent::operator==(a_from)) return false;
    if(left!=a_from.left) return false;
    if(right!=a_from.right) return false;
    if(bottom!=a_from.bottom) return false;
    if(top!=a_from.top) return false;
    return true;
  }
  bool operator!=(const lrbt& a_from) const {
    return !operator==(a_from);
  }
public:
  void dump(std::ostream& a_out) {
    parent::dump(a_out);
    a_out << " left " << left.value() << std::endl;
    a_out << " right " << right.value() << std::endl;
    a_out << " bottom " << bottom.value() << std::endl;
    a_out << " top " << top.value() << std::endl;
  }

protected:
  virtual void get_lrbt(unsigned int,unsigned int,
                        float& a_l,float& a_r,float& a_b,float& a_t) {
    a_l = left.value();
    a_r = right.value();
    a_b = bottom.value();
    a_t = top.value();
  }
};

inline lrbt* cast_lrbt(base_camera& a_bcam) {return safe_cast<base_camera,lrbt>(a_bcam);}

}}

#endif
