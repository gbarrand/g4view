// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_matrix4manip
#define inlib_sg_matrix4manip

#include "matrix"

namespace inlib {
namespace sg {

class matrix4manip : public matrix {
  INLIB_NODE(matrix4manip,inlib::sg::matrix4manip,matrix)
public:
  sf<unsigned int> shape_mask;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::matrix4manip)
    static const desc_fields s_v(parent::node_desc_fields(),1, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(shape_mask)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&shape_mask);
  }
public:
  matrix4manip()
  :parent()
//,shape_mask(cube_manip::shape_all())
  ,shape_mask(0)
  {
    add_fields();
  }
  virtual ~matrix4manip(){}
public:
  matrix4manip(const matrix4manip& a_from)
  :parent(a_from)
  ,shape_mask(a_from.shape_mask)
  {
    add_fields();
  }
  matrix4manip& operator=(const matrix4manip& a_from){
    parent::operator=(a_from);
    shape_mask = a_from.shape_mask;
    return *this;
  }
};

}}

#endif
