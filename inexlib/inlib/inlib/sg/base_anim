// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_base_anim
#define inlib_sg_base_anim

#include "../sys/atime"
#include "event_action"

#include "sf"

namespace inlib {
namespace sg {

class base_anim {
public:
  INLIB_SCLASS(inlib::sg::base_anim)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<base_anim>(this,a_class)) return p;
    return 0;
  }
public:
  // return false = m_prev handled in action().
  virtual bool action(std::ostream&,const atime& a_now) = 0;
  virtual void begin_anim() {}
  virtual bool end_anim() {return true;}
public:
  sf<float> delay;
public:
  base_anim(const atime& a_start)
  :delay(-1)

  ,m_start(a_start)
  ,m_prev(a_start)
  ,m_stopped(false)
  {}
  virtual ~base_anim(){}
public:
  base_anim(const base_anim& a_from)
  :delay(a_from.delay)

  ,m_start(a_from.m_start)
  ,m_prev(a_from.m_prev)
  ,m_stopped(a_from.m_stopped)
  {}
  base_anim& operator=(const base_anim& a_from){
    delay = a_from.delay;

    m_start = a_from.m_start;
    m_prev = a_from.m_prev;
    m_stopped = a_from.m_stopped;
    return *this;
  }
public:
  void stop() {m_stopped = true;}
  void start() {m_stopped = false;}
  bool stopped() const {return m_stopped;}
  void set_start(const atime& a_v) {m_start = a_v;m_prev = m_start;} //used in exa/spinor_pauli.
protected:
  void do_event(event_action& a_action) {
    if(m_stopped) return;

    sg::event& evt = a_action.get_event();
    if(anim_event* _e = event_cast<sg::event,anim_event>(evt)){

      if(m_prev==m_start) begin_anim(); //for parabolic_anim

      atime _now(_e->seconds(),_e->micro_seconds());

      float t = float(atime::diff(_now,m_start).value());
      float tp = float(atime::diff(m_prev,m_start).value());

      bool do_it = false;
      if(delay.value()<0) {
        do_it = true;
      } else if(t<=delay.value()) {
        do_it = true;
      } else if(tp<=delay.value()) { //not finished
        t = delay.value();
        do_it = true;
      }

      if(do_it) {
        if(action(a_action.out(),_now)) m_prev = _now;

        _e->set_some_found(true);

      } else { //finished.
        if(!end_anim()) _e->set_some_found(true);
      }

    }
  }
protected:
  atime m_start;
  atime m_prev;
  bool m_stopped;
};

}}

#endif
