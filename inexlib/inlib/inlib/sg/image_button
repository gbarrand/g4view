// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_image_button
#define inlib_sg_image_button

#include "nodekit"
#include "back_area"
#include "base_button"
#include "noderef"
#include "matrix"
#include "tex_rect"

namespace inlib {
namespace sg {

class image_button : public back_area, public base_button {
  INLIB_NODE_NO_CAST(image_button,inlib::sg::image_button,back_area)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<image_button>(this,a_class)) return p;
    if(void* p = base_button::cast(a_class)) return p;
    return parent::cast(a_class);
  }
public:
  sf<bool> back_visible;
  sf_vec<colorf,float> color;
  //sf<float> transparency;
  sf_img<inlib::byte> img;
  sf<float> hmargin_factor;
  sf_enum<sg::hjust> hjust;
  sf_enum<sg::vjust> vjust;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::image_button)
    static const desc_fields s_v(parent::node_desc_fields(),7, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(back_visible),
      INLIB_ARG_FIELD_DESC(color),
      INLIB_ARG_FIELD_DESC(img),
      INLIB_ARG_FIELD_DESC(hmargin_factor),
      INLIB_ARG_FIELD_DESC(hjust),
      INLIB_ARG_FIELD_DESC(vjust)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&arm_color); //base_button is not an sg::node.
    add_field(&back_visible);
    add_field(&color);
    add_field(&img);
    add_field(&hmargin_factor);
    add_field(&hjust);
    add_field(&vjust);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(back_visible.value()) m_back_sep.render(a_action);
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(back_visible.value()) {
      nodekit_pick(a_action,m_back_sep,this);
    }
    //m_sep.pick(a_action);
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(back_visible.value()) {
      m_back_sep.search(a_action);
      if(a_action.done()) return;
    }
    m_sep.search(a_action);
    if(a_action.done()) return;
  }
public:
  image_button()
  :parent()
  ,base_button(back_area::color)
  ,back_visible(true)
  ,color(colorf_white())
  //,transparency(0)
  ,img(img_byte())
  ,hmargin_factor(0.9f)
  ,hjust(center)
  //,hjust(right)
  //,hjust(left)
  ,vjust(middle)
  {
    add_fields();
  }
  virtual ~image_button(){}
public:
  image_button(const image_button& a_from)
  :parent(a_from)
  ,base_button(a_from)
  ,back_visible(a_from.back_visible)
  ,color(a_from.color)
  //,transparency(a_from.transparency)
  ,img(a_from.img)
  ,hmargin_factor(a_from.hmargin_factor)
  ,hjust(a_from.hjust)
  ,vjust(a_from.vjust)
  {
    add_fields();
  }
  image_button& operator=(const image_button& a_from){
    parent::operator=(a_from);
    base_button::operator=(a_from);
    back_visible = a_from.back_visible;
    color = a_from.color;
    //transparency = a_from.transparency;
    img = a_from.img;
    hmargin_factor = a_from.hmargin_factor;
    hjust = a_from.hjust;
    vjust = a_from.vjust;
    return *this;
  }
public:
  //void set_label(const std::string& a_label) {
  //  strings.clear();
  //  strings.add(a_label);
  //}
protected:
  void update_sg() {
    parent::update_sg(); //z=0

    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;

    if(img.value().is_empty()) return;

    m_mat.color = color;
    m_sep.add(new noderef(m_mat));

    //sf<float> zfront ?
    float zz = back_visible.value()?0.01f:0;

    float himg = height * hmargin_factor;
    float aimg = float(img.value().width())/float(img.value().height());
    float wimg = aimg*himg;
    float hmarg = height * (1.0f-hmargin_factor) * 0.5f;
    float wmarg = hmarg;

    float x = 0;
    if(hjust.value()==center) {
    } else if(hjust.value()==left) {
      x = -width*0.5f+wimg*0.5f+wmarg;
    } else if(hjust.value()==right) {
      x =  width*0.5f-wimg*0.5f-wmarg;
    }
    float y = 0;
    if(vjust.value()==middle) {
    } else if(vjust.value()==bottom) {
      y = -height*0.5f+himg*0.5f+hmarg;
    } else if(vjust.value()==top) {
      y =  height*0.5f-himg*0.5f-hmarg;
    }

    m_tsf.set_translate(x,y,zz); //in front back_area.

    m_tsf.mul_scale(himg,himg,1); //applied first.

    m_sep.add(new noderef(m_tsf));

    m_sep.add(new normal);

    //OPTIMIZATION : m_img and below touched() logic.
    if(color.touched()) m_img.back_color = color;
    if(img.touched()) m_img.img = img; //WARNING : induces an image data copy.
    m_sep.add(new noderef(m_img));

  }
protected:
  separator m_sep;
  rgba m_mat;
  matrix m_tsf;
  tex_rect m_img;
};

}}

#endif
