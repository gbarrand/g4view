// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_base_list
#define inlib_sg_base_list

#include "acbk"
#include "matrix"
#include "arrow_button"
#include "sf_string"
#include "strings"

#include "../platform"

namespace inlib {
namespace sg {

class base_list : public node {
public:
  INLIB_HEADER(base_list,inlib::sg::base_list,node)
protected:
  virtual unsigned int number_of_items() const = 0;
  virtual node* create_item(std::ostream&,unsigned int) = 0;
  virtual node* create_cancel() const = 0;
  virtual void enforce_common_text_height(std::ostream&) = 0;
  virtual node* create_label() const = 0;
protected:
  virtual bool show_cancel() const { //overriden by sg::entries
    return m_cancel_cbks.is_empty()?false:true;
  }
public:
  sf<float> width;
  sf<float> height;
  sf<unsigned int> visible_items;
  sf<float> scroll_width;
  sf_vec<colorf,float> label_back_color;
  sf<bool> label_confine;
  sf_vec<colorf,float> back_color;
  sf_vec<colorf,float> front_color;
  sf_vec<colorf,float> dir_color;
  sf_vec<colorf,float> arm_color;
  sf_vec<colorf,float> border_color;
  sf<bool> text_common_height;
  sf_string cancel_label;
  sf_string label;
  sf_enum<sg::hjust> text_hjust;
  sf<float> buttons_to_arrows_factor;
  sf<float> corner_radius;
  sf_string font;
  sf_enum<sg::font_modeling> font_modeling;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::base_list)
    static const desc_fields s_v(parent::node_desc_fields(),19, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(visible_items),
      INLIB_ARG_FIELD_DESC(scroll_width),
      INLIB_ARG_FIELD_DESC(label_back_color),
      INLIB_ARG_FIELD_DESC(label_confine),
      INLIB_ARG_FIELD_DESC(back_color),
      INLIB_ARG_FIELD_DESC(front_color),
      INLIB_ARG_FIELD_DESC(dir_color),
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(border_color),
      INLIB_ARG_FIELD_DESC(text_common_height),
      INLIB_ARG_FIELD_DESC(cancel_label),
      INLIB_ARG_FIELD_DESC(label),
      INLIB_ARG_FIELD_DESC(text_hjust),
      INLIB_ARG_FIELD_DESC(buttons_to_arrows_factor),
      INLIB_ARG_FIELD_DESC(corner_radius),

      INLIB_ARG_FIELD_DESC_OPTS_BEG(font,8)
        font_hershey().c_str(),
        font_arial_ttf().c_str(),
        font_arialbd_ttf().c_str(),
        font_timesbd_ttf().c_str(),
        font_symbol_ttf().c_str(),
        font_stixgeneral_otf().c_str(),
        font_helvetica_ttf().c_str(),
        font_times_roman_ttf().c_str()
      INLIB_ARG_FIELD_DESC_OPTS_END,

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(font_modeling,3)
        INLIB_ARG_ENUM(font_outline),
        INLIB_ARG_ENUM(font_filled),
        INLIB_ARG_ENUM(font_pixmap)
      INLIB_ARG_FIELD_DESC_ENUMS_END
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&visible_items);
    add_field(&scroll_width);
    add_field(&label_back_color);
    add_field(&label_confine);
    add_field(&back_color);
    add_field(&front_color);
    add_field(&dir_color);
    add_field(&arm_color);
    add_field(&border_color);
    add_field(&text_common_height);
    add_field(&cancel_label);
    add_field(&label);
    add_field(&text_hjust);
    add_field(&buttons_to_arrows_factor);
    add_field(&corner_radius);
    add_field(&font);
    add_field(&font_modeling);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    m_sep.pick(a_action);
    if(a_action.done()) return;
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    node::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg(a_action.out());
      reset_touched();
    }
    m_sep.bbox(a_action);
  }
public:
  base_list()
  :parent()
  ,width(1)
  ,height(1)
  ,visible_items(5)
  ,scroll_width(0.2f)
  ,label_back_color(colorf_white())
  ,label_confine(false)
  ,back_color(colorf_white())
  ,front_color(colorf_black())
  ,dir_color(colorf_lightgrey())
  ,arm_color(colorf_grey())
  ,border_color(colorf_black())
  ,text_common_height(false) //each item text matches button height and
                             //is truncated at right if needed.
  ,cancel_label("cancel")
  ,label()
  ,text_hjust(left)
  ,buttons_to_arrows_factor(0.2f)
  ,corner_radius(0)
  ,font(font_hershey())
  ,font_modeling(font_filled)

  ,m_first_item(0)
  ,m_cancel_cbks()
  {
    add_fields();
  }
  virtual ~base_list(){}
public:
  base_list(const base_list& a_from)
  :parent(a_from)
  ,width(a_from.width)
  ,height(a_from.height)
  ,visible_items(a_from.visible_items)
  ,scroll_width(a_from.scroll_width)
  ,label_back_color(a_from.label_back_color)
  ,label_confine(a_from.label_confine)
  ,back_color(a_from.back_color)
  ,front_color(a_from.front_color)
  ,dir_color(a_from.dir_color)
  ,arm_color(a_from.arm_color)
  ,border_color(a_from.border_color)
  ,text_common_height(a_from.text_common_height)
  ,cancel_label(a_from.cancel_label)
  ,label(a_from.label)
  ,text_hjust(a_from.text_hjust)
  ,buttons_to_arrows_factor(a_from.buttons_to_arrows_factor)
  ,corner_radius(a_from.corner_radius)
  ,font(a_from.font)
  ,font_modeling(a_from.font_modeling)

  ,m_first_item(a_from.m_first_item)
  ,m_cancel_cbks(a_from.m_cancel_cbks)
  {
    add_fields();
  }
  base_list& operator=(const base_list& a_from){
    parent::operator=(a_from);

    width = a_from.width;
    height = a_from.height;
    visible_items = a_from.visible_items;
    scroll_width = a_from.scroll_width;
    label_back_color = a_from.label_back_color;
    label_confine = a_from.label_confine;
    back_color = a_from.back_color;
    front_color = a_from.front_color;
    dir_color = a_from.dir_color;
    arm_color = a_from.arm_color;
    border_color = a_from.border_color;
    text_common_height = a_from.text_common_height;
    cancel_label = a_from.cancel_label;
    label = a_from.label;
    text_hjust = a_from.text_hjust;
    buttons_to_arrows_factor = a_from.buttons_to_arrows_factor;
    corner_radius = a_from.corner_radius;
    font = a_from.font;
    font_modeling = a_from.font_modeling;

    m_first_item = a_from.m_first_item;
    m_cancel_cbks = a_from.m_cancel_cbks;

    return *this;
  }

  void clear() {
    m_first_item = 0;
  }

  const separator& container() const {return m_sep;} //must be consistent with pick().
public:
  void add_cancel_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cancel_cbks.callbacks().push_back(a_cbk);
    touch();
  }
  void clear_cancel_cbks(){
    m_cancel_cbks.clear();
    touch();
  }

public:
  bool show_arrows() const {
    return (number_of_items()>visible_items.value()?true:false);
  }
  float warrow() const {
    return show_arrows()?scroll_width.value():0;
  }
  float witem() const {
    return width-warrow()-warrow()*buttons_to_arrows_factor;
  }
  float extra_items() const {
    unsigned int number = 0;
    if(show_cancel()) number++;
    if(_show_label()) number++;
    return float(number);
  }
  float hitem() const {
    float number = float(visible_items.value())+extra_items();
    return height.value()/float(number);
  }

protected:
  bool _show_label() const {
    return label.value().size()?true:false;
  }

  void update_sg(std::ostream& a_out) {

    m_sep.clear();
    m_texts.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;
    if(!visible_items.value()) return;

    // list is centered around (0,0) and in the xy plan.

    // all items fit in width x height.

    float top_btns = 0;
    float left_btns = -width*0.5f;

    if(_show_label()) {

      separator* sep = new separator;
      m_sep.add(sep);

      float y = height*0.5f-hitem()*0.5f;
      matrix* m = new matrix;
      m->set_translate(left_btns+witem()*0.5f,y,0);
      sep->add(m);

      sep->add(create_label());

      top_btns = height*0.5f-hitem();
    } else {
      top_btns = height*0.5f;
    }

    bool draw_border = false;

    float hbtns = hitem()*visible_items;
    float down_btns = top_btns-hbtns;

    if(number_of_items()) {

    float hmid_btns = (top_btns+down_btns)*0.5f;

    float left_arrows = left_btns+witem()+warrow()*buttons_to_arrows_factor;

    unsigned int beg = m_first_item;
    //012345 : 6 items
    //  2
    unsigned int remain = m_first_item>number_of_items()?0:number_of_items()-m_first_item;

    unsigned int nvis = mn<unsigned int>(visible_items.value(),remain);

   {// center dialog in middle of screen :
    float dy = -hitem();
    float y = top_btns-hitem()*0.5f;
    for(unsigned int index=0;index<nvis;index++,y+=dy) {
      separator* sep = new separator;
      m_sep.add(sep);

      matrix* m = new matrix;
      m->set_translate(left_btns+witem()*0.5f,y,0);
      sep->add(m);

      sep->add(create_item(a_out,beg+index));

    }}

    if(text_common_height) enforce_common_text_height(a_out);

    if(show_arrows()) {
      if(nvis<visible_items.value()) draw_border = true;

      // add up/down arrows on the right.

      float harrow = hbtns*(device::small_screen()?0.35f:0.4f);
      float htopbot = hbtns*(device::small_screen()?0.15f:0.1f);

      // top button :
     {separator* sep = new separator;
      m_sep.add(sep);

      matrix* m = new matrix;
      m->set_translate(left_arrows+warrow()*0.5f,top_btns-htopbot*0.5f,0);
      sep->add(m);

      arrow_button* b = new arrow_button;
      b->width = warrow();
      b->height = htopbot;
      b->orientation = arrow_up;
      b->add_callback(new arrow_cbk(*this,arrow_cbk::action_top()));
      b->color = front_color;
      b->arm_color = arm_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->back_area::corner_radius = corner_radius;
      b->back_area::corner_mask =
        back_area::corner_top_left()|back_area::corner_top_right();

      sep->add(b);}

      // up button :
     {separator* sep = new separator;
      m_sep.add(sep);

      matrix* m = new matrix;
      m->set_translate(left_arrows+warrow()*0.5f,hmid_btns+harrow*0.5f,0);
      sep->add(m);

      arrow_button* b = new arrow_button;
      b->width = warrow();
      b->height = harrow;
      b->orientation = arrow_up;
      b->add_callback(new arrow_cbk(*this,arrow_cbk::action_up()));
      b->color = front_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      sep->add(b);}

      // down button :
     {separator* sep = new separator;
      m_sep.add(sep);

      matrix* m = new matrix;
      m->set_translate(left_arrows+warrow()*0.5f,hmid_btns-harrow*0.5f,0);
      sep->add(m);

      arrow_button* b = new arrow_button;
      b->width = warrow();
      b->height = harrow;
      b->orientation = arrow_down;
      b->add_callback(new arrow_cbk(*this,arrow_cbk::action_down()));
      b->color = front_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->arm_color = arm_color;

      sep->add(b);}

      // bottom button :
     {separator* sep = new separator;
      m_sep.add(sep);

      matrix* m = new matrix;
      m->set_translate(left_arrows+warrow()*0.5f,down_btns+htopbot*0.5f,0);
      sep->add(m);

      arrow_button* b = new arrow_button;
      b->width = warrow();
      b->height = htopbot;
      b->orientation = arrow_down;
      b->add_callback(new arrow_cbk(*this,arrow_cbk::action_bottom()));
      b->color = front_color;
      b->arm_color = arm_color;
      b->back_area::color = back_color;
      b->back_area::border_color = border_color;
      b->back_area::corner_radius = corner_radius;
      b->back_area::corner_mask =
        back_area::corner_bottom_left()|back_area::corner_bottom_right();

      sep->add(b);}

    }

    } //end if(number_of_items())

    if(show_cancel()) {

      separator* sep = new separator;
      m_sep.add(sep);

      float y = 0;
      if(number_of_items()<=visible_items.value()) {
        float dy = -hitem();
        y = top_btns-hitem()*0.5f+number_of_items()*dy;
      } else {
        y = down_btns-hitem()*0.5f;
      }

      matrix* m = new matrix;
      m->set_translate(left_btns+witem()*0.5f,y,0);
      sep->add(m);

      sep->add(create_cancel());

    }

    if(draw_border) {
      separator* sep = new separator;
      m_sep.add(sep);

      rgba* mat = new rgba();
      mat->color = colorf_black();
      m_sep.add(mat);

      vertices* vtxs = new vertices;
      vtxs->mode = gl::line_strip();
      m_sep.add(vtxs);

      float xb = left_btns;
      float xe = left_btns+witem();
      float yb = top_btns;
      float ye = top_btns-hbtns;

      float zz = 1;
      vtxs->add(xb,yb,zz);
      vtxs->add(xe,yb,zz);
      vtxs->add(xe,ye,zz);
      vtxs->add(xb,ye,zz);
      vtxs->add(xb,yb,zz);
    }

  }

protected:

  class arrow_cbk : public acbk {
  public:
    static unsigned int action_up()     {return 0;}
    static unsigned int action_down()   {return 1;}
    static unsigned int action_top()    {return 2;}
    static unsigned int action_bottom() {return 3;}
  public:
    virtual return_action action() {
      unsigned int nvis = m_list.visible_items;

      if(m_action==action_top()) {
        m_list.m_first_item = 0;
        m_list.touch();

      } else if(m_action==action_up()) {
        if((int(m_list.m_first_item)-int(nvis))>=0) {
          m_list.m_first_item -= nvis;
        } else {
          m_list.m_first_item = 0;
        }
        m_list.touch();

      } else if(m_action==action_down()) {
        unsigned int num = m_list.number_of_items();
        if((m_list.m_first_item+nvis)<num) {
          m_list.m_first_item += nvis;
          m_list.touch();
        }

      } else if(m_action==action_bottom()) {
        unsigned int num = m_list.number_of_items();
        if(num>=nvis) {
          m_list.m_first_item = num-nvis;
        } else {
          m_list.m_first_item = 0;
        }
        m_list.touch();

      }
      return return_to_render;
    }
    virtual bcbk* copy() const {return new arrow_cbk(*this);}
  public:
    arrow_cbk(base_list& a_list,unsigned int a_action)
    :acbk(a_action)
    ,m_list(a_list)
    {}
    virtual ~arrow_cbk(){}
  public:
    arrow_cbk(const arrow_cbk& a_from)
    :acbk(a_from)
    ,m_list(a_from.m_list)
    {}
    arrow_cbk& operator=(const arrow_cbk& a_from){
      acbk::operator=(a_from);
      return *this;
    }
  protected:
    base_list& m_list;
  };

protected:
  separator m_sep;
  unsigned int m_first_item;
  cbks m_cancel_cbks;
  group m_texts;
};

}}

#endif

