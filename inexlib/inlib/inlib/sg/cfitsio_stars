// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_cfitsio_stars
#define inlib_sg_cfitsio_stars

#include "cfitsio"

#include "add_stars"

#include "../wget"
#include "../astro/SDSS"
#include "../astro/radecs"
#include "../astro/simbad"
#include "../buf2lines"
#include "../sto"
#include "../sout"
#include "../astro/sastro"

#ifdef EMSCRIPTEN
#include <emscripten.h>
#endif

namespace inlib {
namespace sg {

class cfitsio_stars : public cfitsio {
  INLIB_NODE(cfitsio_stars,inlib::sg::cfitsio_stars,cfitsio)
public:
  sf_string show_stars;
  sf<double> sky_radius;
  sf<double> stars_radius;
  sf<float> ring_min;
  sf<float> ring_max;
  mf<double> radecs; //8 numbers in dec deg.
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::cfitsio_stars)
    static const desc_fields s_v(parent::node_desc_fields(),6, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC_OPTS_BEG(show_stars,2)
        s_stars_none().c_str(),
        s_stars_simbad().c_str()
      //s_stars_stripe82().c_str()
      INLIB_ARG_FIELD_DESC_OPTS_END,

      INLIB_ARG_FIELD_DESC(sky_radius),
      INLIB_ARG_FIELD_DESC(stars_radius),
      INLIB_ARG_FIELD_DESC(ring_min),
      INLIB_ARG_FIELD_DESC(ring_max),
      INLIB_ARG_FIELD_DESC(radecs)
    );
    return s_v;
  }
private:
  bool local_touched() {
    if(show_stars.touched()) return true;
    if(sky_radius.touched()) return true;
    if(stars_radius.touched()) return true;
    if(ring_min.touched()) return true;
    if(ring_max.touched()) return true;
    return false;
  }
  void add_fields(){
    add_field(&show_stars);
    add_field(&sky_radius);
    add_field(&stars_radius);
    add_field(&ring_min);
    add_field(&ring_max);
    add_field(&radecs);
  }
public:
  virtual void render(render_action& a_action) {
    if(local_touched()) {
      update_sg(a_action.out());
      show_stars.reset_touched();
      sky_radius.reset_touched();
      stars_radius.reset_touched();
      ring_min.reset_touched();
      ring_max.reset_touched();
    }
    parent::render(a_action);
    m_stars_stripe82.render(a_action);
    m_stars_simbad.render(a_action);
  }
/*
  virtual void pick(pick_action& a_action) {
    if(!sub_pick(a_action,m_stars_stripe82)) {
      if(sub_pick(a_action,m_stars_simbad)) return;
    }
    parent::pick(a_action);
  }
*/
public:
  cfitsio_stars(const base_freetype& a_ttf /*template ttf node*/,
                const wget& a_simbad_wget, //warning : we keep the ref.
                bool a_stars_local,
                const wget& a_stars_wget, //warning : we keep the ref.
                const std::string& a_stars_host,unsigned int a_stars_port,const std::string& a_stars_dir,
                SDSS::catalog& a_stars_catalog /*warning : we keep the ref.*/)
  :parent()
  ,show_stars(s_stars_none())
  ,sky_radius(default_sky_radius())
  ,stars_radius(999.99)
  ,ring_min(0.05f)
  ,ring_max(0.065f)
  ,radecs()

  ,m_ttf(a_ttf)
  ,m_simbad_wget(a_simbad_wget)
  ,m_stars_local(a_stars_local)
  ,m_stars_wget(a_stars_wget)
  ,m_stars_host(a_stars_host)
  ,m_stars_port(a_stars_port)
  ,m_stars_dir(a_stars_dir)
  ,m_stars_catalog(a_stars_catalog)
  {
    add_fields();
  }
  virtual ~cfitsio_stars(){}
public:
  cfitsio_stars(const cfitsio_stars& a_from)
  :parent(a_from)
  ,show_stars(a_from.show_stars)
  ,sky_radius(a_from.sky_radius)
  ,stars_radius(a_from.stars_radius)
  ,ring_min(a_from.ring_min)
  ,ring_max(a_from.ring_max)
  ,radecs(a_from.radecs)

  ,m_ttf(a_from.m_ttf)
  ,m_simbad_wget(a_from.m_simbad_wget)
  ,m_stars_local(a_from.m_stars_local)
  ,m_stars_wget(a_from.m_stars_wget)
  ,m_stars_host(a_from.m_stars_host)
  ,m_stars_port(a_from.m_stars_port)
  ,m_stars_dir(a_from.m_stars_dir)
  ,m_stars_catalog(a_from.m_stars_catalog)
  {
    add_fields();
  }
  cfitsio_stars& operator=(const cfitsio_stars& a_from) {
    parent::operator=(a_from);
    if(&a_from==this) return *this;
    show_stars = a_from.show_stars;
    sky_radius = a_from.sky_radius;
    stars_radius = a_from.stars_radius;
    ring_min = a_from.ring_min;
    ring_max = a_from.ring_max;
    radecs = a_from.radecs;

    m_stars_local = a_from.m_stars_local;
    m_stars_host = a_from.m_stars_host;
    m_stars_port = a_from.m_stars_port;
    m_stars_dir = a_from.m_stars_dir;

    return *this;
  }
protected:
  void update_sg(std::ostream& a_out) {
    update_sg_stars_simbad(a_out);
    update_sg_stars_stripe82(a_out);
  }

/*
*/
  INLIB_CLASS_STRING(stripe82_get_stars)
  bool get_stripe82_stars(std::ostream& a_out,std::vector<SDSS::star>& a_stars) {
    a_stars.clear();

    std::string cmd;
    cmd += s_stripe82_get_stars();
   {const double* _radecs = vec_data<double>(radecs.values());
    for(unsigned int index=0;index<8;index++) {
      cmd += " ";
      numas(_radecs[index],cmd);
    }}

    char* doc;uint64 ldoc;
    //NOTE : doc should be deleted with [].
    std::string icookie;
    std::string ocookie;
    if(!m_stars_wget.post(m_stars_host,m_stars_port,"cmd="+cmd,doc,ldoc,icookie,ocookie)) {
      a_out << "inlib::sg::cfitsio_stars::get_stripe82_stars : post() failed." << std::endl;
      return false;
    }
    std::vector<std::string> lines;
    buf2lines(doc,lines); //it is assumed that doc finished with 0.
    delete [] doc;

   {std::vector<std::string> wrds;
    inlib_vforcit(std::string,lines,it) {
      if((*it).empty()) continue; //last line.
      words(*it,",",false,wrds);
      if(wrds.size()<2) {
        a_out << "inlib::sg::cfitsio_stars::get_stripe82_stars :"
              << " not two words in line " << sout(*it)
              << std::endl;
        a_stars.clear();
        return false;
      }
      double ra;
      if(!to<double>(wrds[0],ra)) {
        a_out << "inlib::sg::cfitsio_stars::get_stripe82_stars :"
              << " " << wrds[0] << " not a double."
              << std::endl;
        a_stars.clear();
        return false;
      }
      double dec;
      if(!to<double>(wrds[1],dec)) {
        a_out << "inlib::sg::cfitsio_stars::get_stripe82_stars :"
              << " " << wrds[1] << " not a double."
              << std::endl;
        a_stars.clear();
        return false;
      }
      double vals[36];
     {for(unsigned int index=0;index<36;index++) vals[index] = 0;}
      vals[0] = ra;
      vals[1] = dec;
      a_stars.push_back(SDSS::star(vals));
    }}
    return true;
  }

  void update_sg_stars_stripe82(std::ostream& a_out) {
    m_stars_stripe82.clear();

    if(show_stars.value()!=s_stars_stripe82()) return;
    if(radecs.size()!=8) return;

    const double* _radecs = vec_data<double>(radecs.values());

    std::vector<SDSS::star> stars;

    if(m_stars_local) {
      if(m_stars_catalog.empty()) {
        if(!SDSS::read_catalog(m_stars_catalog,m_stars_dir+"/stripe82calibStars_v2.6.dat")) {
          a_out << "inlib::sg::cfitsio_stars : can't get stripe82calibStars_v2.6.dat file." << std::endl;
          return;
        }
      }
      search_stars(m_stars_catalog,_radecs,sky_radius.value(),stars);
      //::printf("debug : inlib::sg::cfitsio_stars::update_sg_stars_stripe82 : stars %lu\n",stars.size());
    } else {
      if(!get_stripe82_stars(a_out,stars)) return;
    }

    vec3f _center;
   {std::vector<vec3f> vcs;
    radecs_center(_radecs,sky_radius.value(),vcs,_center);}

    add_stars(m_stars_stripe82,stars,m_ttf,_center,stars_radius.value(),ring_min.value(),ring_max.value());
  }

  void update_sg_stars_simbad(std::ostream& a_out) {
    m_stars_simbad.clear();

    if(show_stars.value()!=s_stars_simbad()) return;
    if(radecs.size()!=8) return;

    const double* _radecs = vec_data<double>(radecs.values());
    double angle;
    if(!solid_angle(_radecs,sky_radius.value(),angle)) return;
    angle = ::sqrt(::fabs(angle))*rad2deg();

    // SDSS 0.165 (the upper gives 0.192)

    std::string host = simbad::s_host_simbad();

    std::string request;
    if(!simbad::build_request(a_out,radecs[0],radecs[1],angle,request)) return;

    bool verbose = false;

    if(verbose) {
      a_out << "host " << host << std::endl;
      a_out << "request :" << std::endl << request << std::endl;
    }

#ifdef EMSCRIPTEN
    // it coworks with inlib/sg/simbad_opener.
    std::string sargs;

    // dangerous logic :
   {std::string _s;
    if(!inlib::p2s(&m_stars_simbad,_s)) {}
    sargs += "node="+_s;}

   {std::string _s;
    if(!inlib::p2s(&m_ttf,_s)) {}
    sargs += "\\nttf="+_s;}

    sargs += "\\ncorner_0=";numas(_radecs[0],sargs);
    sargs += "\\ncorner_1=";numas(_radecs[1],sargs);
    sargs += "\\ncorner_2=";numas(_radecs[2],sargs);
    sargs += "\\ncorner_3=";numas(_radecs[3],sargs);
    sargs += "\\ncorner_4=";numas(_radecs[4],sargs);
    sargs += "\\ncorner_5=";numas(_radecs[5],sargs);
    sargs += "\\ncorner_6=";numas(_radecs[6],sargs);
    sargs += "\\ncorner_7=";numas(_radecs[7],sargs);
    sargs += "\\nstars_radius=";numas(stars_radius.value(),sargs);
    sargs += "\\nsky_radius=";numas(sky_radius.value(),sargs);
    sargs += "\\nring_min=";numas(ring_min.value(),sargs);
    sargs += "\\nring_max=";numas(ring_max.value(),sargs);

  //std::string file("response.simbad");

    std::string url = "https://"+host;
    if(request.size()&&(request[0]!='/')) url += "/";
    url += request;
    std::ostringstream script;
    script << "var request = new XMLHttpRequest();"
           << "request.open('GET','" << url << "',true);"
           << "request.responseType = 'arraybuffer';"
           << "request.onreadystatechange = () => {"
           << "  if (request.readyState == 4) {"
           << "    if (request.status == 200 || request.status == 0) {"
           << "      var sargs = '" << sargs << "';"
           << "      upload_buffer(new Int8Array(request.response),sargs);"
           << "    }"
           << "  }"
           << "};"
           << "request.send();";
    ::emscripten_run_script(script.str().c_str());
#else
    unsigned int port = 80;
    char* doc;
    uint64 ldoc;
    std::string icookie,ocookie;
    if(!m_simbad_wget.get(host,port,request,doc,ldoc,icookie,ocookie)) return;  //it does http and not https.
    //::printf("debug : simbad \n%s\n",doc);
    if(verbose) {
      a_out << "get cookie :" << std::endl << ocookie << std::endl;
      //a_out << "query elapsed : " << atime::elapsed(begin) << std::endl;
      a_out << "file : length " << ldoc << std::endl;
    }
    if( (ldoc>=simbad::s_failed().size()) &&
        (!::strncmp(doc,simbad::s_failed().c_str(),simbad::s_failed().size())) ) {
      a_out << doc << std::endl;
      delete [] doc;
      return;
    }
    std::vector<star> simbad_stars;
    std::string type;
    simbad::read_catalog(ldoc,doc,type,simbad_stars);
    delete [] doc;

    //::printf("debug : simbad : %g %g, ra %s, dec %s, stars %d\n",
    //   radecs[0],radecs[1],sra.c_str(),sdec.c_str(),stars.size());
    std::vector<star> stars;
    search_stars(simbad_stars,_radecs,sky_radius.value(),stars);
    vec3f _center;
   {std::vector<vec3f> vcs;
    radecs_center(_radecs,sky_radius.value(),vcs,_center);}
    add_stars(m_stars_simbad,stars,m_ttf,_center,stars_radius.value(),ring_min.value(),ring_max.value());
#endif
  }

/*
  static bool sub_pick(pick_action& a_action,node& a_sg) {
    if(a_action.stop_at_first()){
      a_sg.pick(a_action);
      if(!a_action.done()) return false;
      a_action.save_state(a_action.state());
      return true;
    } else {
      // have a local pick_action to override node in the found pick list.
      pick_action action(a_action);
      a_sg.pick(action);
      typedef pick_action::pick_t pick_t;
      const std::vector<pick_t>& pks = action.picks();
      inlib_vforcit(pick_t,pks,it) {
        node& _node = const_cast<node&>((*it).node());
        a_action.add_pick(_node,(*it).zs(),(*it).ws(),(*it).state());
      }
      return false;
    }
  }
*/
protected:
  const base_freetype& m_ttf;

  const wget& m_simbad_wget;
  separator m_stars_simbad;

  const wget& m_stars_wget;
  bool m_stars_local;
  std::string m_stars_host;
  unsigned int m_stars_port;
  std::string m_stars_dir;

  SDSS::catalog& m_stars_catalog;
  separator m_stars_stripe82;
};

}}

#endif
