// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_entry
#define inlib_sg_entry

#include "text_button"
#include "noderef"

namespace inlib {
namespace sg {

class entry : public node {
  INLIB_NODE(entry,inlib::sg::entry,node)
public:
  sf<float> width;
  sf<float> height;
  sf_vec<colorf,float> back_color;
  sf_vec<colorf,float> front_color;
  sf_vec<colorf,float> border_color;
  sf_vec<colorf,float> arm_color;
  sf_string label;
  sf_string value;
  sf<float> text_wmargin_factor;
  sf<float> text_hmargin_factor;
  sf<float> label_result_factor; //*width = sz of label
  sf_vec<colorf,float> label_back_color;
  sf<float> corner_radius;
  sf_string font;
  sf_enum<sg::font_modeling> font_modeling;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::entry)
    static const desc_fields s_v(parent::node_desc_fields(),15, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(back_color),
      INLIB_ARG_FIELD_DESC(front_color),
      INLIB_ARG_FIELD_DESC(border_color),
      INLIB_ARG_FIELD_DESC(arm_color),
      INLIB_ARG_FIELD_DESC(label),
      INLIB_ARG_FIELD_DESC(value),
      INLIB_ARG_FIELD_DESC(text_wmargin_factor),
      INLIB_ARG_FIELD_DESC(text_hmargin_factor),
      INLIB_ARG_FIELD_DESC(label_result_factor),
      INLIB_ARG_FIELD_DESC(label_back_color),
      INLIB_ARG_FIELD_DESC(corner_radius),

      INLIB_ARG_FIELD_DESC_OPTS_BEG(font,8)
        font_hershey().c_str(),
        font_arial_ttf().c_str(),
        font_arialbd_ttf().c_str(),
        font_timesbd_ttf().c_str(),
        font_symbol_ttf().c_str(),
        font_stixgeneral_otf().c_str(),
        font_helvetica_ttf().c_str(),
        font_times_roman_ttf().c_str()
      INLIB_ARG_FIELD_DESC_OPTS_END,

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(font_modeling,3)
        INLIB_ARG_ENUM(font_outline),
        INLIB_ARG_ENUM(font_filled),
        INLIB_ARG_ENUM(font_pixmap)
      INLIB_ARG_FIELD_DESC_ENUMS_END
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
    add_field(&back_color);
    add_field(&front_color);
    add_field(&border_color);
    add_field(&arm_color);
    add_field(&label);
    add_field(&value);
    add_field(&text_wmargin_factor);
    add_field(&text_hmargin_factor);
    add_field(&label_result_factor);
    add_field(&label_back_color);
    add_field(&corner_radius);
    add_field(&font);
    add_field(&font_modeling);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    m_sep.pick(a_action);
    if(a_action.done()) return;
  }
  virtual void search(search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }
public:
  entry(const base_freetype& a_ttf)
  :parent()

  ,width(1)
  ,height(1)
  ,back_color(colorf_white())
  ,front_color(colorf_black())
  ,border_color(colorf_black())
  ,arm_color(colorf_grey())
  ,label("")
  ,value("")
  ,text_wmargin_factor(0.9f)
  ,text_hmargin_factor(0.9f)
  ,label_result_factor(0.6f)
  ,label_back_color(colorf_white())
  ,corner_radius(0)
  ,font(font_hershey())
  ,font_modeling(font_filled)

  ,m_cbks()
  ,m_label(a_ttf)
  ,m_result(a_ttf)
  {
    add_fields();
  }
  virtual ~entry(){}
public:
  entry(const entry& a_from)
  :parent(a_from)

  ,width(a_from.width)
  ,height(a_from.height)
  ,back_color(a_from.back_color)
  ,front_color(a_from.front_color)
  ,border_color(a_from.border_color)
  ,arm_color(a_from.arm_color)
  ,label(a_from.label)
  ,value(a_from.value)
  ,text_wmargin_factor(a_from.text_wmargin_factor)
  ,text_hmargin_factor(a_from.text_hmargin_factor)
  ,label_result_factor(a_from.label_result_factor)
  ,label_back_color(a_from.label_back_color)
  ,corner_radius(a_from.corner_radius)
  ,font(a_from.font)
  ,font_modeling(a_from.font_modeling)

  ,m_cbks(a_from.m_cbks)
  ,m_label(a_from.m_label)
  ,m_result(a_from.m_result)
  {
    add_fields();
  }
  entry& operator=(const entry& a_from){
    parent::operator=(a_from);

    width = a_from.width;
    height = a_from.height;
    back_color = a_from.back_color;
    front_color = a_from.front_color;
    border_color = a_from.border_color;
    arm_color = a_from.arm_color;
    label = a_from.label;
    value = a_from.value;
    text_wmargin_factor = a_from.text_wmargin_factor;
    text_hmargin_factor = a_from.text_hmargin_factor;
    label_result_factor = a_from.label_result_factor;
    label_back_color = a_from.label_back_color;
    corner_radius = a_from.corner_radius;
    font = a_from.font;
    font_modeling = a_from.font_modeling;

    m_cbks = a_from.m_cbks;

    return *this;
  }
public:
  const separator& container() const {return m_sep;} //must be consistent with pick().
  void add_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_cbks.add(a_cbk);
    touch();
  }
  void clear_cbks(){
    m_cbks.clear();
    touch();
  }
public:
  text& label_widget() {return m_label;}
  text_button& result_widget() {return m_result;}
public:
  void update_sg() {
    m_sep.clear();

    if(width.value()<=0) return;
    if(height.value()<=0) return;

    m_sep.add(create_label());
    m_sep.add(create_result());
  }

protected:
  separator* create_label() {
    separator* sep = new separator;

    float wtext = width*label_result_factor;

    float xx = -width*0.5f+wtext*0.5f;
    float yy = 0;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    m_label.width = wtext;
    m_label.height = height;

    m_label.back_area::color = label_back_color;
    m_label.back_area::border_color = border_color;
    m_label.corner_radius = corner_radius;
    m_label.corner_mask = back_area::corner_top_left()|back_area::corner_bottom_left();

    m_label.color = front_color;
    m_label.font = font;
    m_label.font_modeling = font_modeling;
    m_label.wmargin_factor = text_wmargin_factor;
    m_label.hmargin_factor = text_hmargin_factor;

    m_label.strings.clear();
    m_label.strings.add(label.value());

    m_label.confine = true;

    sep->add(new noderef(m_label));

    return sep;
  }
  separator* create_result() {
    separator* sep = new separator;

    float wtext = width*(1.0f-label_result_factor);

    float xx = width*0.5f-wtext*0.5f;
    float yy = 0;
    matrix* m = new matrix;
    m->set_translate(xx,yy,0);
    sep->add(m);

    m_result.width = wtext;
    m_result.height = height;

    //FIXME : handle the three below from res.
    m_result.back_area::color = colorf_white();
    m_result.back_area::border_color = colorf_black();
    m_result.corner_radius = corner_radius;
    m_result.corner_mask = back_area::corner_top_right()|back_area::corner_bottom_right();

    m_result.color = colorf_black();

    m_result.font = font;
    m_result.font_modeling = font_modeling;
    m_result.wmargin_factor = text_wmargin_factor;
    m_result.hmargin_factor = text_hmargin_factor;

    m_result.strings.clear();
    m_result.strings.add(value.value()); //important.

    m_result.confine = true;

    m_result.copy_cbks(m_cbks);
    m_result.arm_color = arm_color;

    sep->add(new noderef(m_result));

    return sep;
  }
protected:
  sg::cbks m_cbks;
  separator m_sep;
  text m_label;
  text_button m_result;
};

}}

#endif
