// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_guiv
#define inlib_sg_guiv

#include "guib"
#include "viewer"
#include "../xml/styles"

namespace inlib {
namespace sg {

class guiv : public viewer, public guib {
  INLIB_HEADER(guiv,inlib::sg::guiv,viewer)
public:
  INLIB_CLASS_STRING(default)
public:
  guiv(std::ostream& a_out,unsigned int a_width,unsigned int a_height,bool a_verbose)
  :parent(a_out,a_width,a_height)
  ,guib(a_verbose)
  ,m_styles(a_out)
  ,m_gui_style(s_default()) //=  m_params cstor doing a set_gui_default().
  {}
  virtual ~guiv(){}
public:
  guiv(const guiv& a_from)
  :ui(a_from)
  ,alert(a_from)
  ,parent(a_from)
  ,guib(a_from)
  ,m_styles(parent::m_out)
  ,m_gui_style(a_from.m_gui_style)
  {}
  guiv& operator=(const guiv& a_from){
    parent::operator=(a_from);
    guib::operator=(a_from);
    //if(&a_from==this) return *this;
    m_styles = a_from.m_styles;
    m_gui_style = a_from.m_gui_style;
    return *this;
  }
public:
  const xml::styles& styles() const {return m_styles;}
  xml::styles& styles() {return m_styles;}

protected:
  void set_gui_style(const std::string& a_style) {

    std::string style;
    m_styles.is_alias(a_style,style);
    const xml::styles::style_t* sty = m_styles.find_style(style);
    if(!sty) return;
    m_gui_style = style;

    if(!m_styles.res_color(*sty,"screen_color",m_params.m_gui_screen_color,style)){}

    if(!find<std::string,std::string>(*sty,"gui_font",m_params.m_gui_font)){} //FIXME : should check that val is a font name.
   {std::string val;
    if(find<std::string,std::string>(*sty,"gui_font_modeling",val)){
           if(val==s_font_outline()) m_params.m_gui_font_modeling = font_outline;
      else if(val==s_font_filled())  m_params.m_gui_font_modeling = font_filled;
      else if(val==s_font_pixmap())  m_params.m_gui_font_modeling = font_pixmap;
    }}

    if(!m_styles.res_color(*sty,"back_color",
                           m_params.m_gui_back_color,style)){}
    if(!m_styles.res_color(*sty,"front_color",
                           m_params.m_gui_front_color,style)){}
    if(!m_styles.res_color(*sty,"dir_color",
                           m_params.m_gui_dir_color,style)){}
    if(!m_styles.res_color(*sty,"arm_color",
                           m_params.m_gui_arm_color,style)){}
    if(!m_styles.res_color(*sty,"border_color",
                           m_params.m_gui_border_color,style)){}
    if(!m_styles.res_color(*sty,"text_back_color",
                           m_params.m_gui_text_back_color,style)){}
    if(!m_styles.res_color(*sty,"text_front_color",
                           m_params.m_gui_text_front_color,style)){}
    if(!m_styles.res_color(*sty,"text_border_color",
                           m_params.m_gui_text_border_color,style)){}
    if(!m_styles.res_color(*sty,"warn_back_color",
                           m_params.m_gui_warn_back_color,style)){}
    if(!m_styles.res_color(*sty,"warn_ok_color",
                           m_params.m_gui_warn_ok_color,style)){}
    if(!m_styles.res_color(*sty,"warn_front_color",
                           m_params.m_gui_warn_front_color,style)){}
    if(!m_styles.res_color(*sty,"warn_border_color",
                           m_params.m_gui_warn_border_color,style)){}

    if(!m_styles.res_value(*sty,"image_buttons",
                           m_params.m_image_buttons,style)){}
    if(!m_styles.res_value(*sty,"list_visible_items",
                           m_params.m_list_visible_items,style)){}

    if(!m_styles.res_color(*sty,"label_back_color",
                           m_params.m_gui_label_back_color,style)){}
    if(!m_styles.res_value(*sty,"list_item_layout",
                           m_params.m_list_item_layout,style)){}
    if(!m_styles.res_value(*sty,"corner_radius",
                           m_params.m_corner_radius,style)){}
  }

protected:
  xml::styles m_styles;
  std::string m_gui_style;
};

}}

//inlib_build_use kernel

#endif
