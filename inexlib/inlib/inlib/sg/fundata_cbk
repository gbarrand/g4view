// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_funata_cbk
#define inlib_sg_funata_cbk

#include "bcbk"

#include "pos_data"

namespace inlib {
namespace sg {

template <class VIEWER,class WIDGET,class DATA,class PARENT = bcbk>
class fundata_cbk : public PARENT {
  INLIB_T3_CBK(VIEWER,WIDGET,DATA,fundata_cbk,inlib::sg::fundata_cbk,PARENT)
public:
  typedef return_action (*cbk_func)(VIEWER&,const PARENT&,WIDGET&,const DATA&);
  typedef return_action (*cbk_widget_data_func)(VIEWER&,WIDGET&,const DATA&);
  typedef return_action (*cbk_widget_func)(VIEWER&,WIDGET&);
  typedef return_action (*cbk_gv_func)(VIEWER&);
  typedef return_action (*cbk_gv_data_func)(VIEWER&,const DATA&);
public:
  virtual return_action action() {
         if(m_func)             return m_func(m_gv,*this,m_widget,m_data);
    else if(m_widget_data_func) return m_widget_data_func(m_gv,m_widget,m_data);
    else if(m_widget_func)      return m_widget_func(m_gv,m_widget);
    else if(m_gv_func)          return m_gv_func(m_gv);
    else if(m_gv_data_func)     return m_gv_data_func(m_gv,m_data);
    return return_none;
  }
public:
  fundata_cbk(VIEWER& a_gv,WIDGET& a_widget,cbk_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv),m_widget(a_widget)
  ,m_func(a_func)
  ,m_widget_data_func(0)
  ,m_widget_func(0)
  ,m_gv_func(0)
  ,m_gv_data_func(0)
  ,m_data(a_data)
  {}
  fundata_cbk(VIEWER& a_gv,WIDGET& a_widget,cbk_widget_data_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv),m_widget(a_widget)
  ,m_func(0)
  ,m_widget_data_func(a_func)
  ,m_widget_func(0)
  ,m_gv_func(0)
  ,m_gv_data_func(0)
  ,m_data(a_data)
  {}
  fundata_cbk(VIEWER& a_gv,WIDGET& a_widget,cbk_widget_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv),m_widget(a_widget)
  ,m_func(0)
  ,m_widget_data_func(0)
  ,m_widget_func(a_func)
  ,m_gv_func(0)
  ,m_gv_data_func(0)
  ,m_data(a_data)
  {}
  fundata_cbk(VIEWER& a_gv,WIDGET& a_widget,cbk_gv_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv),m_widget(a_widget)
  ,m_func(0)
  ,m_widget_data_func(0)
  ,m_widget_func(0)
  ,m_gv_func(a_func)
  ,m_gv_data_func(0)
  ,m_data(a_data)
  {}
  fundata_cbk(VIEWER& a_gv,WIDGET& a_widget,cbk_gv_data_func a_func,const DATA& a_data)
  :parent()
  ,m_gv(a_gv),m_widget(a_widget)
  ,m_func(0)
  ,m_widget_data_func(0)
  ,m_widget_func(0)
  ,m_gv_func(0)
  ,m_gv_data_func(a_func)
  ,m_data(a_data)
  {}
  virtual ~fundata_cbk(){}
public:
  fundata_cbk(const fundata_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv),m_widget(a_from.m_widget)
  ,m_func(a_from.m_func)
  ,m_widget_data_func(a_from.m_widget_data_func)
  ,m_widget_func(a_from.m_widget_func)
  ,m_gv_func(a_from.m_gv_func)
  ,m_gv_data_func(a_from.m_gv_data_func)
  ,m_data(a_from.m_data)
  {}
  fundata_cbk& operator=(const fundata_cbk& a_from){
    parent::operator=(a_from);
    m_func=a_from.m_func;
    m_widget_data_func = a_from.m_widget_data_func;
    m_widget_func = a_from.m_widget_func;
    m_gv_func = a_from.m_gv_func;
    m_gv_data_func = a_from.m_gv_data_func;
    m_data=a_from.m_data;
    return *this;
  }
protected:
  VIEWER& m_gv;
  WIDGET& m_widget;
  cbk_func m_func;
  cbk_widget_data_func m_widget_data_func;
  cbk_widget_func m_widget_func;
  cbk_gv_func m_gv_func;
  cbk_gv_data_func m_gv_data_func;
  DATA m_data;
};

}}

#include "pos_data"

namespace inlib {
namespace sg {

class gui_viewer;

template <class WIDGET,class FUNC,class DATA>
inline void add_callback(gui_viewer& a_gv,WIDGET& a_widget,FUNC a_func,const DATA& a_data) {
  a_widget.add_callback(new fundata_cbk<gui_viewer,WIDGET,DATA>(a_gv,a_widget,a_func,a_data));
}

template <class WIDGET,class FUNC>
inline void add_callback(gui_viewer& a_gv,WIDGET& a_widget,FUNC a_func) {
  add_callback<WIDGET,FUNC,pos_data>(a_gv,a_widget,a_func,pos_data(false,0,0));
}

template <class WIDGET,class FUNC,class DATA>
inline void add_cancel_callback(gui_viewer& a_gv,WIDGET& a_widget,FUNC a_func,const DATA& a_data) {
  a_widget.add_cancel_callback(new fundata_cbk<gui_viewer,WIDGET,DATA>(a_gv,a_widget,a_func,a_data));
}

template <class WIDGET,class FUNC>
inline void add_cancel_callback(gui_viewer& a_gv,WIDGET& a_widget,FUNC a_func) {
  add_cancel_callback<WIDGET,FUNC,pos_data>(a_gv,a_widget,a_func,pos_data(false,0,0));
}

}}

#endif
