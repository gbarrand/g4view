// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_circle_arc
#define inlib_sg_circle_arc

#include "node"
#include "sf_vec3f"
#include "render_action"
#include "pick_action"
#include "bbox_action"
#include "../mathf"

namespace inlib {
namespace sg {

class circle_arc : public node {
  INLIB_NODE(circle_arc,inlib::sg::circle_arc,node)
public:
  sf_vec3f center;
  sf<float> radius;
  sf<float> sweep_angle; //rad
  sf<unsigned int> number_of_triangles; //for 2 pi.
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::circle_arc)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(center),
      INLIB_ARG_FIELD_DESC(radius),
      INLIB_ARG_FIELD_DESC(sweep_angle),
      INLIB_ARG_FIELD_DESC(number_of_triangles)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&center);
    add_field(&radius);
    add_field(&sweep_angle);
    add_field(&number_of_triangles);
  }
protected:
  typedef float* floatp;
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(!m_sz) return;
    a_action.draw_vertex_normal_array(gl::line_strip(),m_sz,m_vts,m_nms);
  }

  virtual void pick(pick_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(!m_sz) return;
    a_action.add__line_strip(*this,m_sz,m_vts);
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    if(!m_sz) return;
    a_action.add_line_strip(m_sz,m_vts);
  }
public:
  circle_arc()
  :parent()
  ,center()
  ,radius(1.0f)
  ,sweep_angle(ftwo_pi())
  ,number_of_triangles(60)
  ,m_sz(0)
  ,m_vts(0)
  ,m_nms(0)
  {
    add_fields();
  }
  virtual ~circle_arc(){
    delete [] m_vts;
    delete [] m_nms;
  }
public:
  circle_arc(const circle_arc& a_from)
  :parent(a_from)

  ,center(a_from.center)
  ,radius(a_from.radius)
  ,sweep_angle(a_from.sweep_angle)
  ,number_of_triangles(a_from.number_of_triangles)
  ,m_sz(0)
  ,m_vts(0)
  ,m_nms(0)
  {
    add_fields();
  }
  circle_arc& operator=(const circle_arc& a_from){
    parent::operator=(a_from);

    center = a_from.center;
    radius = a_from.radius;
    sweep_angle = a_from.sweep_angle;
    number_of_triangles = a_from.number_of_triangles;

    return *this;
  }
protected:
  void update_sg(){
    m_sz = 0;
    delete [] m_vts;
    delete [] m_nms;

    int nslice =
      (int)(float(number_of_triangles)*sweep_angle.value()/ftwo_pi());
    if(nslice<3) nslice = 3;
    m_sz = nslice*3;
    m_vts = new float[m_sz];
    m_nms = new float[m_sz];
    if(!m_vts||!m_nms) {
      m_sz = 0;
      delete [] m_vts;
      delete [] m_nms;
      return;
    }

    float dangle = sweep_angle.value()/float(nslice);
    float R = radius.value();
    float Xc = center.value().x();
    float Yc = center.value().y();
    float Zc = center.value().z();

    float angle = 0;
    floatp vts = m_vts;
    floatp nms = m_nms;
    for(int i=0;i<nslice;i++,angle+=dangle) {
      *vts = R*fcos(angle)+Xc;vts++;
      *vts = R*fsin(angle)+Yc;vts++;
      *vts = Zc;vts++;

      *nms = 0;nms++;
      *nms = 0;nms++;
      *nms = 1;nms++;
    }
  }
protected:
  unsigned int m_sz;
  float* m_vts;
  float* m_nms;
};

}}

#endif
