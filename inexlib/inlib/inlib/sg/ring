// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_ring
#define inlib_sg_ring

#include "node"
#include "sf"
#include "render_action"
#include "pick_action"
#include "bbox_action"
#include "gstos"

#include "../mathf"

namespace inlib {
namespace sg {

class ring : public node, public gstos {
  INLIB_NODE(ring,inlib::sg::ring,node)
public:
  sf<float> rmin;
  sf<float> rmax;
  sf<float> angle; //rad
  sf<unsigned int> steps;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::ring)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(rmin),
      INLIB_ARG_FIELD_DESC(rmax),
      INLIB_ARG_FIELD_DESC(angle),
      INLIB_ARG_FIELD_DESC(steps)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&rmin);
    add_field(&rmax);
    add_field(&angle);
    add_field(&steps);
  }
protected:
  typedef float* floatp;
protected: //gstos
  virtual unsigned int create_gsto(std::ostream& a_out,sg::render_manager& a_mgr) {
    std::vector<float> gsto_data;

    size_t num = m_xys.size()/2;

    if(num<3) {
      a_out << "inlib::sg::ring::create_gsto : triangle strip or fan with " << num << " points." << std::endl;
      return 0;
    }

    size_t ntri = num-2;
    size_t ngsto = ntri*3*3;
    size_t sz = gsto_data.size();
    gsto_data.resize(sz+ngsto);
    float* pxys = vec_data<float>(gsto_data)+sz;

    const float* data = vec_data<float>(m_xys);
    if(m_mode==gl::triangle_fan()) {
      gl::triangle_fan_to_triangles_2to3(num,data,pxys);
    } else if(m_mode==gl::triangle_strip()) {
      gl::triangle_strip_to_triangles_2to3(num,data,pxys);
    }

    m_xys.clear(); //ok, but take care of pick(), bbox().

    m_gsto_sz = gsto_data.size();
    if(gsto_data.empty()) return 0;
    return a_mgr.create_gsto_from_data(gsto_data);
  }

public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }

    const state& state = a_action.state();

    if(state.m_use_gsto) {
      unsigned int _id = get_gsto_id(a_action.out(),a_action.render_manager());
      if(_id) {
        a_action.begin_gsto(_id);
        a_action.draw_gsto_v(gl::triangles(),m_gsto_sz/3,0);
        a_action.end_gsto();
        return;

      } else { //!_id
        // use immediate rendering.
      }

    } else {
      clean_gstos(&a_action.render_manager());
    }

    if(m_xys.empty()) update_sg();

    // immediate rendering :
    if(m_mode==gl::triangle_fan()) {
      a_action.draw_vertex_array_xy(gl::triangle_fan(),m_xys.size(),vec_data<float>(m_xys));
    } else if(m_mode==gl::triangle_strip()) {
      a_action.draw_vertex_array_xy(gl::triangle_strip(),m_xys.size(),vec_data<float>(m_xys));
    }

  }

  virtual void pick(pick_action& a_action) {
    if(touched()||m_xys.empty()) { //m_xys.empty() because gsto clear m_xys; we have to rebuild it.
      update_sg();
      reset_touched();
    }
    //WARNING : for ArcheyTune, the ring cache must not be pickable.
    if(!m_is_pickable) return;
    a_action.add__primitive_xy(*this,m_mode,m_xys);
  }
  virtual void bbox(bbox_action& a_action) {
    if(touched()||m_xys.empty()) {
      update_sg();
      reset_touched();
    }
    a_action.add_points_xy(m_xys);
  }
public:  
  virtual void clear_gstos() {gstos::clean_gstos();}
public:
  ring()
  :parent()
  ,rmin(0.25f)
  ,rmax(0.5f)
  ,angle(ftwo_pi())
  ,steps(48)

  ,m_mode(gl::triangle_strip())
  ,m_is_pickable(true)
  {
    add_fields();
  }
  virtual ~ring(){}
public:
  ring(const ring& a_from)
  :parent(a_from)
  ,gstos(a_from)
  ,rmin(a_from.rmin)
  ,rmax(a_from.rmax)
  ,angle(a_from.angle)
  ,steps(a_from.steps)

  ,m_mode(a_from.m_mode)
  ,m_is_pickable(a_from.m_is_pickable)
  {
    add_fields();
  }
  ring& operator=(const ring& a_from){
    parent::operator=(a_from);
    gstos::operator=(a_from);

    rmin = a_from.rmin;
    rmax = a_from.rmax;
    angle = a_from.angle;
    steps = a_from.steps;

    m_mode = a_from.m_mode;
    m_is_pickable = a_from.m_is_pickable;

    return *this;
  }
public:
  void set_pickable(bool a_value) {m_is_pickable = a_value;}
protected:
  void update_sg() {
    clean_gstos(); //must reset for all render_manager.
    m_gsto_sz = 0;

    size_t nstep = steps.value();
    float rmn = rmin.value();
    float rmx = rmax.value();

    if(!nstep || (angle.value()<=0) || (rmn>=rmx) ) {
      m_xys.clear();
      return;
    }

    float dangle = angle.value()/nstep;

    if(rmn<=0) {
      // build a triangle fan :
      m_mode = gl::triangle_fan();

      m_xys.resize((nstep+2)*2);
      size_t findex = 0;

      m_xys[findex] = 0;findex++;
      m_xys[findex] = 0;findex++;

      float _angle = 0;
      for(size_t index=0;index<=nstep;index++,_angle+=dangle) {
        m_xys[findex] = rmx*fcos(_angle);findex++;
        m_xys[findex] = rmx*fsin(_angle);findex++;
      }

    } else {
      // build a triangle strip :
      m_mode = gl::triangle_strip();

      m_xys.resize((nstep+1)*4);
      size_t findex = 0;

      float _angle = 0;
      float ca,sa;
      for(size_t index=0;index<=nstep;index++,_angle+=dangle) {
        ca = fcos(_angle);
        sa = fsin(_angle);
        m_xys[findex] = rmn*ca;findex++;
        m_xys[findex] = rmn*sa;findex++;
        m_xys[findex] = rmx*ca;findex++;
        m_xys[findex] = rmx*sa;findex++;
      }
    }
  }
protected:
  std::vector<float> m_xys; //front
  gl::mode_t m_mode;
  size_t m_gsto_sz;
  bool m_is_pickable;
};

}}

#endif
