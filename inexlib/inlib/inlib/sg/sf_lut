// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_sf_lut
#define inlib_sg_sf_lut

#include "sf"

#include "../lut"

namespace inlib {
namespace sg {

template <class TB>
class sf_lut : public bsf< lut<TB> > {
  typedef bsf< lut<TB> > parent;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::sg::sf_lut<"+stype(TB())+">");
    return s_v;
  }
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast< sf_lut<TB> >(this,a_class)) {return p;}
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  virtual bool write(io::iwbuf& a_buffer) {
    const lut<TB>& _lut = parent::m_value;
    if(!a_buffer.write(_lut.mn())) return false;
    if(!a_buffer.write(_lut.mx())) return false;
    if(!a_buffer.write(uint32(_lut.coln()))) return false;
    return true;
  }
  virtual bool read(io::irbuf& a_buffer) {
    TB mn,mx;
    uint32 coln;
    if(!a_buffer.read(mn)) return false;
    if(!a_buffer.read(mx)) return false;
    if(!a_buffer.read(coln)) return false;
    parent::m_value = lut<TB>(mn,mx,coln);
    return true;
  }
  virtual bool dump(std::ostream&) {
    //a_out << parent::m_value << std::endl;
    return true;
  }
  virtual bool s_value(std::string& a_s) const {a_s.clear();return false;}
  virtual bool s2value(const std::string&) {return false;}
public:
  sf_lut():parent(){}
  sf_lut(const lut<TB>& a_value):parent(a_value){}
  virtual ~sf_lut(){}
public:
  sf_lut(const sf_lut& a_from):parent(a_from){}
  sf_lut& operator=(const sf_lut& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  sf_lut& operator=(const lut<TB>& a_value){
    parent::operator=(a_value);
    return *this;
  }
};

}}

#endif
