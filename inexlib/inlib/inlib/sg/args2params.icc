
#define INLIB_ARGS2PARAMS_BOOL(a__name) \
        bool changed;\
        if(!to<bool>(m_params.m_##a__name,val,changed)) {\
          if(a_warn) {\
            map_warn_nab();\
            return false;\
          } else {\
            m_out << "inlib::sg::gui_viewer::args2params : not a boolean." << std::endl;\
            status = false; /*not fatal.*/\
          }\
        } else if(changed)

#define INLIB_ARGS2PARAMS_UINT(a__name) \
        bool changed;\
        if(!to<unsigned int>(m_params.m_##a__name,val,changed)) {\
          if(a_warn) {\
            map_warn_naui();\
            return false;\
          } else {\
            m_out << "inlib::sg::gui_viewer::args2params : not an unsigned int." << std::endl;\
            status = false; /*not fatal.*/\
          }\
        } else if(changed)

#define INLIB_ARGS2PARAMS_FLOAT(a__name) \
        bool changed;\
        if(!to<float>(m_params.m_##a__name,val,changed)) {\
          if(a_warn) {\
            map_warn_nan();\
            return false;\
          } else {\
            m_out << "inlib::sg::gui_viewer::args2params : not a float." << std::endl;\
            status = false; /*not fatal.*/\
          }\
        } else if(changed)

  typedef std::pair<std::string,std::string> arg;
  bool args2params(const std::vector<arg>& a_args,bool a_warn){
    // WARNING : used in for wall/screen_dispatch rwc_set_params protocol.
    bool status = true;

    for(unsigned int index=0;index<a_args.size();index++) {
      const std::string& label = a_args[index].first;
      const std::string& val = a_args[index].second;

      if(rcmp(label,gui_params::s_vr_mode())) {
        INLIB_ARGS2PARAMS_BOOL(vr_mode) {
          m_vr_mode = m_params.m_vr_mode;
          ask_to_rebuild_gui();
        }

      } else if(rcmp(label,gui_params::s_auto_hide_scene())) {
        INLIB_ARGS2PARAMS_BOOL(auto_hide_scene) {
          //we just click on the "param ok button", then ui is mapped.
          if(m_params.m_auto_hide_scene) {
            m_scene_switch.which = HIDDEN();
            //NOTE : we should stop any scene animation !
          } else {
	    m_scene_switch.which = SHOWN();
          }
        }

      } else if(rcmp(label,gui_params::s_scene_screen_color())) {
        float r,g,b,a;
        if(!entries_color(val,r,g,b,a)) {
          if(a_warn) {
            map_warn("get color failed");
            return false;
          } else {
            m_out << "inlib::sg::gui_viewer::args2params :"
                          << " get color failed."
                          << std::endl;
            status = false; //not fatal.
          }
        } else {
          set_scene_clear_color(r,g,b,a);
        }

      } else if(rcmp(label,gui_params::s_image_buttons())) {
        INLIB_ARGS2PARAMS_BOOL(image_buttons) {
          push_home(); //to reset style of central menu.
        }

      } else if(rcmp(label,gui_params::s_plane_viewer())) {
        INLIB_ARGS2PARAMS_BOOL(plane_viewer) {
          set_camera_menu_labels();
        }

      } else if(rcmp(label,gui_params::s_touch_move())) {
        INLIB_ARGS2PARAMS_BOOL(touch_move) {
        }

      } else if(rcmp(label,gui_params::s_light_on())) {
        INLIB_ARGS2PARAMS_BOOL(light_on) {
          set_scene_light_on(m_params.m_light_on);
        }

      } else if(rcmp(label,gui_params::s_blend_on())) {
        INLIB_ARGS2PARAMS_BOOL(blend_on) {
          set_scene_blend_on(m_params.m_blend_on);
        }

      } else if(rcmp(label,gui_params::s_smooth_on())) {
        INLIB_ARGS2PARAMS_BOOL(smooth_on) {
          set_scene_smooth_on(m_params.m_smooth_on);
        }

      } else if(rcmp(label,gui_params::s_solid())) {
        INLIB_ARGS2PARAMS_BOOL(solid) {
          // should force update_sg ?
        }

      } else if(rcmp(label,gui_params::s_reduced_wire_frame())) {
        INLIB_ARGS2PARAMS_BOOL(reduced_wire_frame) {
          // should force update_sg ?
        }

      } else if(rcmp(label,gui_params::s_max_depth())) {
        INLIB_ARGS2PARAMS_UINT(max_depth) {
        }

      } else if(rcmp(label,gui_params::s_use_gsto()) ||
                rcmp(label,gui_params::s_use_vbo())  ){ // old apps -> wall.
        INLIB_ARGS2PARAMS_BOOL(use_gsto) {
          set_use_gsto(m_params.m_use_gsto);
        }

      } else if(rcmp(label,s_gsto_mode())) {
        if(val!=m_params.m_gsto_mode) {
          typedef sg::gsto_mode mode_t;
          mode_t mode;
          if(s2gsto_mode(val,mode)) {
            m_params.m_gsto_mode = val;
            set_use_gsto(m_params.m_use_gsto);
          }
        }

      } else if(rcmp(label,gui_params::s_store_mode())) { //old apps -> wall.

        bool value = m_render_manager.get_gsto_mode()==sg::gsto_memory?false:true;

        bool changed;
        if(!to<bool>(value,val,changed)) {
          if(a_warn) {
            map_warn_nab();
            return false;
          } else {
            m_out << "inlib::sg::gui_viewer::args2params :"
                          << " not a boolean."
                          << std::endl;
            status = false; //not fatal.
          }
        } else if(changed) {
          std::string sv;
          m_render_manager.available_not_memory_gsto_mode(sv);
          if(sv.size()) {
            m_params.m_gsto_mode = sv;
            set_use_gsto(m_params.m_use_gsto);
          }
        }

      } else if(rcmp(label,gui_params::s_image_expand())) {
        INLIB_ARGS2PARAMS_BOOL(image_expand) {
          // should force update_sg ?
        }

      } else if(rcmp(label,gui_params::s_node_height())) {
        INLIB_ARGS2PARAMS_FLOAT(node_height) {
          // should force update_sg ?
          if(m_params.m_node_height<0) m_params.m_node_height = 0;
        }

      } else if(rcmp(label,gui_params::s_node_color())) {
        m_params.m_node_color = val;

      } else if(rcmp(label,gui_params::s_sliders_pos())) {
        bool changed = val==m_params.m_sliders_pos?false:true;
        m_params.m_sliders_pos = val;
        if(changed) set_sliders_layout();

      } else if(rcmp(label,gui_params::s_time_interval())) {
        INLIB_ARGS2PARAMS_UINT(time_interval) {
        }

      } else if(rcmp(label,gui_params::s_anim_interval())) {
        INLIB_ARGS2PARAMS_UINT(anim_interval) {
        }

      } else if(rcmp(label,gui_params::s_cycle_secs())) {
        INLIB_ARGS2PARAMS_UINT(cycle_secs) {
        }

      } else if(rcmp(label,gui_params::s_console_scale())) {
        INLIB_ARGS2PARAMS_FLOAT(console_scale) {
          if(m_params.m_console_scale<=0) m_params.m_console_scale = 1;
          set_console_layout();
        }

      } else if(rcmp(label,gui_params::s_console_width())) {
        INLIB_ARGS2PARAMS_FLOAT(console_width) {
          if(m_params.m_console_width<=0) m_params.m_console_width = 0.3F;
          set_console_layout();
        }

      } else if(rcmp(label,gui_params::s_console_height())) {
        INLIB_ARGS2PARAMS_FLOAT(console_height) {
          if(m_params.m_console_height<=0) m_params.m_console_height = 0.05F;
          set_console_layout();
        }

      } else if(rcmp(label,gui_params::s_camera_tiled())) {
        INLIB_ARGS2PARAMS_BOOL(cam_tiled) {
        }

      } else if(rcmp(label,gui_params::s_plot_col())) {
        INLIB_ARGS2PARAMS_UINT(plot_col) {
        }

      } else if(rcmp(label,gui_params::s_plot_row())) {
        INLIB_ARGS2PARAMS_UINT(plot_row) {
        }

      } else if(rcmp(label,gui_params::s_gui_font())) {
        //FIXME : should check that val is a font name.
        bool changed = val!=m_params.m_gui_font;
        m_params.m_gui_font = val;
        if(changed) ask_to_rebuild_gui();

      } else if(rcmp(label,gui_params::s_gui_font_modeling())) {
             if(val==s_font_outline()) {
          bool changed = m_params.m_gui_font_modeling!=font_outline;
          m_params.m_gui_font_modeling = font_outline;
          if(changed) ask_to_rebuild_gui();

        } else if(val==s_font_filled())  {
          bool changed = m_params.m_gui_font_modeling!=font_filled;
          m_params.m_gui_font_modeling = font_filled;
          if(changed) ask_to_rebuild_gui();

        } else if(val==s_font_pixmap())  {
          bool changed = m_params.m_gui_font_modeling!=font_pixmap;
          m_params.m_gui_font_modeling = font_pixmap;
          if(changed) ask_to_rebuild_gui();

        } else {
          m_out << "inlib::sg::gui_viewer::args2params : not a font_modeling enum." << std::endl;
          status = false; /*not fatal.*/
        }

      } else {
        if(a_warn) {
          map_warn(std::string("unknown param ")+label);
          return false;
        } else {
          m_out << "inlib::sg::gui_viewer::args2params : unknown param " << label << std::endl;
          status = false;      //not fatal.
        }
      }
    }
    return status;
  }

#undef INLIB_ARGS2PARAMS_BOOL
#undef INLIB_ARGS2PARAMS_UINT
#undef INLIB_ARGS2PARAMS_FLOAT
