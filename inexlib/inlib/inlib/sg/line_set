// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_line_set
#define inlib_sg_line_set

#include "node"

#include "mf"
#include "../stype"
#include "render_action"
#include "pick_action"
#include "bbox_action"

namespace inlib {
namespace sg {

class line_set : public node {
  INLIB_NODE(line_set,inlib::sg::line_set,node)
public:
  mf_std_vec<float> lines;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::line_set)
    static const desc_fields s_v(parent::node_desc_fields(),1, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(lines)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&lines);
  }
public:
  typedef std::vector<float> line_t;

  virtual void render(render_action& a_action) {
    inlib_vforcit(line_t,lines.values(),it) {
      a_action.draw_vertex_array(gl::line_strip(),*it);
    }
  }

  virtual void pick(pick_action& a_action) {
    if(a_action.stop_at_first()){
      inlib_vforcit(line_t,lines.values(),it) {
        a_action.add_line_strip(*it);
        if(a_action.done()) {
          a_action.set_node(this);
          return;
        }
      }
    } else {
      inlib_vforcit(line_t,lines.values(),it) {
        a_action.set_done(false);
        a_action.zs().clear();
        a_action.ws().clear();
        a_action.add_line_strip(*it);
        if(a_action.done()) {
          a_action.add_pick(*this,a_action.zs(),a_action.ws(),a_action.state());
          a_action.set_done(false);
        }
      }
    }
  }

  virtual void bbox(bbox_action& a_action) {
    inlib_vforcit(line_t,lines.values(),it) {
      a_action.add_points(*it);
    }
  }

public:
  line_set()
  :parent()
  ,lines()
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  virtual ~line_set(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  line_set(const line_set& a_from)
  :parent(a_from)
  ,lines(a_from.lines)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  line_set& operator=(const line_set& a_from){
    parent::operator=(a_from);
    lines = a_from.lines;
    return *this;
  }
public:
  bool add(const line_t& a_line) {
    size_t npoint = a_line.size()/3;
    if(npoint*3!=a_line.size()) return false;
    lines.add(a_line);
    return true;
  }
  void clear() {lines.clear();}
};

}}

#endif
