// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_texts
#define inlib_sg_texts

#include "text"

namespace inlib {
namespace sg {

inline void enforce_common_text_height(std::ostream& a_out,group& a_group){
  search_action action(a_out);
  action.set_class(text::s_class());
  a_group.search(action);

  float mnh = FLT_MAX;
 {inlib_vforcit(void*,action.objs(),it) {
    text* item = (text*)*it;

//::printf("debug : xxx \"%s\"\n",item->strings.values()[0].c_str());

    item->confine = true; //so that text is not truncated at right.
    item->update_sg();
    if(!item->is_empty() && (item->text_height()>0)) {
      mnh = mn(mnh,item->text_height());
    }
  }}

  //enforce mnh to all text items :
  if(mnh!=FLT_MAX){
    inlib_vforcit(void*,action.objs(),it) {
      text* item = (text*)*it;
      item->enforce_front_height = true;
      item->front_height = mnh;
    }
  }
}

}}

/*
#include "image_text_button"

namespace inlib {
namespace sg {

inline void enforce_common_text_height_2(std::ostream& a_out,group& a_group){
  float mnh = FLT_MAX;
 {inlib_vforcit(node*,a_group.children(),it) {
    noderef* _ref = safe_cast<node,noderef>(*(*it));
    if(!_ref) continue;
    if(image_text_button* _button = safe_cast<node,image_text_button>(_ref->node())) {
      _button->update_sg();
      text& _text = _button->text();
      _text.confine = true;
      _text.update_sg();
      if(!_text.is_empty() && (_text.text_height()>0)) {
        mnh = mn(mnh,_text.text_height());
      }
    } else if(text* _text = safe_cast<node,text>(_ref->node())) {
      _text->confine = true;
      _text->update_sg();
      if(!_text->is_empty() && (_text->text_height()>0)) {
        mnh = mn(mnh,_text->text_height());
      }
    }
  }}

  //::printf("debug : mnh %g\n",mnh);
  
  //enforce mnh to all text items :
  if(mnh!=FLT_MAX){
    inlib_vforcit(node*,a_group.children(),it) {
      noderef* _ref = safe_cast<node,noderef>(*(*it));
      if(!_ref) continue;
      if(image_text_button* _button = safe_cast<node,image_text_button>(_ref->node())) {
        text& _text = _button->text();
        _text.enforce_front_height = true;
        _text.front_height = mnh;
      } else if(text* _text = safe_cast<node,text>(_ref->node())) {
        _text->enforce_front_height = true;
        _text->front_height = mnh;
      }
    }
  }
}

}}
*/

#endif
