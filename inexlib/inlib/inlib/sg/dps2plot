// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_dps2plot
#define inlib_sg_dps2plot

#include "plottables"

#include "../histo/dps"
#include "../words"
#include "../num2s"

namespace inlib {
namespace sg {

class dps2plot : public virtual bins1D {
public: //plottable
  virtual plottable* copy() const {return new dps2plot(*this);}
  virtual bool is_valid() const {return true;}
  virtual const std::string& name() const {return m_name;}
  virtual void set_name(const std::string& a_s) {m_name = a_s;}

  virtual const std::string& title() const {return m_data.title();}
  virtual const std::string& legend() const {return m_legend;}
  virtual void set_legend(const std::string& a_s) {m_legend = a_s;}

  virtual void infos(const std::string& a_opts,std::string& a_sinfos) const {
    a_sinfos.clear();
    std::string f_lf("\n");
    std::vector<std::string> _words;
    words(a_opts," ",false,_words);
    std::vector<std::string>::const_iterator it;

    for(it=_words.begin();it!=_words.end();++it) {
      if(((*it)=="name") && m_name.size()) {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "Name";
        a_sinfos += f_lf;
        a_sinfos += m_name;

      } else if((*it)=="entries") {
        if(a_sinfos.size()) a_sinfos += f_lf;
        a_sinfos += "Entries";
        a_sinfos += f_lf;
        if(!numas<unsigned int>(m_data.size(),a_sinfos)){}
      }
    }
  }
public: //bins1D
  virtual bool is_profile() const {return false;}

  virtual void bins_Sw_range(float& a_min,float& a_max,bool) const {
    a_min = 0;
    a_max = 0;
    size_t number = m_data.size();
    if(!number) return;
    unsigned int coord = (m_rep==1?1:m_coordinate);
    float vmin = (float)m_data.point(0).coordinate(coord).value();
    float vmax = (float)m_data.point(0).coordinate(coord).value();
    for(size_t index=1;index<number;index++) {
      float value = (float)m_data.point(index).coordinate(coord).value();
      vmin = mn(vmin,value);
      vmax = mx(vmax,value);
    }
    a_min = vmin;
    a_max = vmax;
  }
  virtual unsigned int bins() const {return m_data.size();}
  virtual float axis_min() const {
    if(m_rep==1) {
      size_t number = m_data.size();
      if(!number) return 0;

      const histo::data_point& point = m_data.point(0);
      const histo::measurement& mes = point.coordinate(0);
      float _mn = (float)(mes.value()-mes.error_minus());

      for(size_t index=1;index<number;index++) {
        const histo::data_point& point = m_data.point(index);
        const histo::measurement& mes = point.coordinate(0);
        _mn = mn(_mn,(float)(mes.value()-mes.error_minus()));
      }

      return _mn;
    } else {
      return (float)1;
    }
  }
  virtual float axis_max() const {
    if(m_rep==1) {
      size_t number = m_data.size();
      if(!number) return 0;

      const histo::data_point& point = m_data.point(0);
      const histo::measurement& mes = point.coordinate(0);
      float _mx = (float)(mes.value()+mes.error_plus());

      for(size_t index=1;index<number;index++) {
        const histo::data_point& point = m_data.point(index);
        const histo::measurement& mes = point.coordinate(0);
        _mx = mx(_mx,(float)(mes.value()+mes.error_plus()));
      }

      return _mx;
    } else {
      return (float)(m_data.size()+1);
    }
  }
  virtual float bin_lower_edge(int a_I) const {
    if(m_rep==1) {
      //NOTE : points may be not ordered according coordinate(0) !
      const histo::data_point& point = m_data.point(a_I);
      const histo::measurement& mes = point.coordinate(0);
      return (float)(mes.value() - mes.error_minus());
    } else {
      return (float)(a_I+1);
    }
  }
  virtual float bin_upper_edge(int a_I) const {
    if(m_rep==1) {
      //NOTE : points may be not ordered according coordinate(0) !
      const histo::data_point& point = m_data.point(a_I);
      const histo::measurement& mes = point.coordinate(0);
      return (float)(mes.value() + mes.error_plus());
    } else {
      return (float)(a_I+2);
    }
  }
  //virtual int getBinNumberOfEntries(int a_I) const {return 1;}
  virtual bool has_entries_per_bin() const {return true;}
  virtual unsigned int bin_entries(int) const {return 1;}
  virtual float bin_Sw(int a_I) const {
    const histo::data_point& point = m_data.point(a_I);
    unsigned int coord = (m_rep==1?1:m_coordinate);
    const histo::measurement& mes = point.coordinate(coord);
    return (float)mes.value();
  }

  virtual float bin_error(int a_I) const {
    //FIXME : for m_rep=1, the sg::plotter will display "bin bar"
    //        half/half of the value, which is not correct if
    //        errorMinus is not the same than errorPlus.
    const histo::data_point& point = m_data.point(a_I);
    unsigned int coord = (m_rep==1?1:m_coordinate);
    const histo::measurement& mes = point.coordinate(coord);
    return float(mes.error_minus()+mes.error_plus());
  }
public:
  dps2plot(const histo::dps& a_data,unsigned int a_rep,unsigned int a_coord)
  :m_data(a_data) //WARNING : we handle a ref.
  ,m_name()
  ,m_rep(a_rep)
  ,m_coordinate(a_coord) // Displayed coordinate if m_rep=0.
  {
    // m_rep = 0
    //   Expect a DPS of any dimension>0.
    //   X axis will be from [1,dps.size()+1] with dps.size() bins.
    //   Y axis will display the m_coordinate measurement.
    // m_rep = 1 (used in gopaw /GRAPHICS/HPLOT/ERRORS).
    //   Expect a DPS of dim 2.
    //   Coordinate 0 will be displayed on plotter X axis.
    //   Coordinate 1 will be displayed on plotter Y axis.
  }
  virtual ~dps2plot(){}
protected:
  dps2plot(const dps2plot& a_from)
  :plottable(a_from),bins1D(a_from)
  ,m_data(a_from.m_data)
  ,m_name(a_from.m_name)
  ,m_legend(a_from.m_legend)
  ,m_rep(a_from.m_rep)
  ,m_coordinate(a_from.m_coordinate)
  {}
  dps2plot& operator=(const dps2plot& a_from){
    m_name = a_from.m_name;
    m_legend = a_from.m_legend;
    m_rep = a_from.m_rep;
    m_coordinate = a_from.m_coordinate;
    return *this;
  }
private:
  const histo::dps& m_data;
protected:
  std::string m_name;
  std::string m_legend;
  unsigned int m_rep;
  unsigned int m_coordinate;
};

class dps2plot_cp : public dps2plot {
  typedef dps2plot parent;
public:
  dps2plot_cp(const histo::dps& a_data,unsigned int a_rep,unsigned int a_coord)
  :parent(m_cp,a_rep,a_coord) //give ref of m_cp to dps2plot. Warning m_cp is virgin at this level.
  ,m_cp(a_data)   //do a local copy.
  {}
  virtual ~dps2plot_cp(){}
protected:
  dps2plot_cp(const dps2plot_cp& a_from)
  :plottable(a_from),bins1D(a_from)
  ,parent(m_cp,a_from.m_rep,a_from.m_coordinate)
  ,m_cp(a_from.m_cp)
  {}
  dps2plot_cp& operator=(const dps2plot_cp& a_from){
    parent::operator=(a_from);
    m_cp = a_from.m_cp;
    return *this;
  }
protected:
  histo::dps m_cp;
};

}}

#endif
