// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_switch_anim
#define inlib_sg_switch_anim

#include "base_anim"
#include "_switch"

namespace inlib {
namespace sg {

class switch_anim : public base_anim, public node {
public:
  INLIB_NODE_NO_CAST(switch_anim,inlib::sg::switch_anim,node)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<switch_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  sf<unsigned int> time_interval; //msecs
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::switch_anim)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(time_interval)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&time_interval);
  }
public: //base_anim
  virtual void after_next() {}
  virtual bool action(std::ostream&,const atime& a_now) {
    if(m_switch.empty()) return true;

    if(time_interval.value()) {
      unsigned int elaps = (unsigned int)atime::diff(a_now,m_prev).milli_seconds();
      if(elaps<=time_interval.value()) return false; //do not set m_prev.
    }

    m_switch.which.value()++;
    if(m_switch.which.value()>=int(m_switch.size())) m_switch.which = 0;

    after_next();

    return true;
  }
public: //node
  virtual void event(event_action& a_action) {
    node::event(a_action);
    if(touched()) {
      reset_touched();
    }
    do_event(a_action);
  }
public:
  switch_anim(const atime& a_start,_switch& a_switch)
  :base_anim(a_start)
  ,parent()
  ,time_interval(0)
  ,m_switch(a_switch)
  {
    add_fields();
  }
  virtual ~switch_anim(){}
public:
  switch_anim(const switch_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)
  ,time_interval(a_from.time_interval)
  ,m_switch(a_from.m_switch)
  {
    add_fields();
  }
  switch_anim& operator=(const switch_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);
    time_interval = a_from.time_interval;
    return *this;
  }
protected:
  _switch& m_switch;
};

}}

#endif
