// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_selection
#define inlib_sg_selection

#include "separator"
#include "cbks"
#include "ecbk"
#include "sf"

namespace inlib {
namespace sg {

//inherit separator. Same logic as Inventor.

class selection : public separator {
  INLIB_NODE(selection,inlib::sg::selection,separator)
public:
  sf<bool> stop_at_first;
  sf<bool> verbose;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::selection)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(stop_at_first),
      INLIB_ARG_FIELD_DESC(verbose)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&stop_at_first);
    add_field(&verbose);
  }
public:
  virtual void event(event_action& a_action) {
    separator::event(a_action);
    if(a_action.done()) {
      if(verbose.value()) {
        a_action.out() << "inlib::sg::selection::event :"
                       << " separator has treated the event."
                       << std::endl;
      }
      return;
    }

    const sg::event& evt = a_action.get_event();

    if(const mouse_up_event* uevt = event_cast<sg::event,mouse_up_event>(evt)){
      if(m_up_cbks.is_empty()) return;

      float z,w;
      node* nd = do_pick(a_action,uevt->x(),uevt->y(),z,w);
      if(nd) {
        if(verbose.value()) {
          a_action.out() << "inlib::sg::selection::event :"
                         << " up : pick node cls " << nd->s_cls()
                         << std::endl;
        }
        ecbk::exec_event_cbks(m_up_cbks.callbacks(),evt,&a_action,nd,z,w);
        //a_action done decided by cbks.
      } else {
        ecbk::exec_event_cbks(m_up_cbks.callbacks(),evt,&a_action,0,0,0); //it is ok.
      }

    } else if(const mouse_down_event* devt = event_cast<sg::event,mouse_down_event>(evt)){
      if(m_down_cbks.is_empty()) return;

      float z,w;
      node* nd = do_pick(a_action,devt->x(),devt->y(),z,w);
      if(nd) {
        if(verbose.value()) {
          a_action.out() << "inlib::sg::selection::event :"
                         << " down : pick node cls " << nd->s_cls()
                         << std::endl;
        }
        ecbk::exec_event_cbks(m_down_cbks.callbacks(),evt,&a_action,nd,z,w);
        //a_action done decided by cbks.
      } else {
        ecbk::exec_event_cbks(m_down_cbks.callbacks(),evt,&a_action,0,0,0); //it is ok.
      }

    } else if(const mouse_move_event* mevt = event_cast<sg::event,mouse_move_event>(evt)){
      if(m_move_cbks.is_empty()) return;

      float z,w;
      node* nd = do_pick(a_action,mevt->x(),mevt->y(),z,w);
      if(nd) {
        if(verbose.value()) {
          a_action.out() << "inlib::sg::selection::event :"
                         << " move : pick node cls " << nd->s_cls()
                         << std::endl;
        }
        ecbk::exec_event_cbks(m_move_cbks.callbacks(),evt,&a_action,nd,z,w);
        //a_action done decided by cbks.
      } else {
        ecbk::exec_event_cbks(m_move_cbks.callbacks(),evt,&a_action,0,0,0); //it is ok.
      }

    }
  }
public:
  selection()
  :parent()
  ,stop_at_first(false)
  ,verbose(false)

  ,m_up_cbks()
  ,m_down_cbks()
  ,m_move_cbks()
  {
    add_fields();
  }
  virtual ~selection(){}
public:
  selection(const selection& a_from)
  :parent(a_from)
  ,stop_at_first(a_from.stop_at_first)
  ,verbose(a_from.verbose)

  ,m_up_cbks(a_from.m_up_cbks)
  ,m_down_cbks(a_from.m_down_cbks)
  ,m_move_cbks(a_from.m_move_cbks)
  {
    add_fields();
  }
  selection& operator=(const selection& a_from){
    parent::operator=(a_from);
    stop_at_first = a_from.stop_at_first;
    verbose = a_from.verbose;

    m_up_cbks = a_from.m_up_cbks;
    m_down_cbks = a_from.m_down_cbks;
    m_move_cbks = a_from.m_move_cbks;
    return *this;
  }
public:
  void clear_cbks(){
    m_up_cbks.clear();
    m_down_cbks.clear();
    m_move_cbks.clear();
  }
  const cbks& up_cbks() const {return m_up_cbks;}
  const cbks& down_cbks() const {return m_down_cbks;}
  const cbks& move_cbks() const {return m_move_cbks;}

  cbks& up_cbks() {return m_up_cbks;}
  cbks& down_cbks() {return m_down_cbks;}
  cbks& move_cbks() {return m_move_cbks;}
protected:
  //virtual for wall::sg::selection.
  virtual node* do_pick(event_action& a_action,int a_x,int a_y,float& a_z,float& a_w) {

    float hsize = 2;
    float l = a_x-hsize; //could be negative.
    float r = a_x+hsize;
    float b = a_y-hsize; //could be negative.
    float t = a_y+hsize;

    pick_action action(a_action.out(),
                       a_action.state().m_ww,a_action.state().m_wh,
                       l,r,b,t);
    action.set_stop_at_first(stop_at_first.value());

    action.matrix_action::operator=(a_action); //IMPORTANT.

    int old_cur = action.cur(); //not 0.
    pick(action);
    if(action.cur()!=old_cur) {
      a_action.out() << "inlib::sg::selection::do_pick :"
                     << " bad pick_action end."
                     << std::endl;
      a_z = 0;
      a_w = 0;
      return 0;
    } else {
      if(stop_at_first.value()) {
        if(action.node()){
          a_action.save_state(action.saved_state());
          //minimum(action.zs(),a_z);

         {const std::vector<float>& zs = action.zs();
          const std::vector<float>& ws = action.ws();
          if(zs.empty()) {
            a_z = 0;
            a_w = 0;
          } else {
            a_z = zs.front();
            a_w = ws.front();
            std::vector<float>::const_iterator zit = zs.begin();
            std::vector<float>::const_iterator wit = ws.begin();
            for(;zit!=zs.end();++zit,++wit){
              if(*zit<a_z) {
                a_z = *zit;
                a_w = *wit;
              }
            }
          }}

          return action.node();
        } else {
          if(verbose) {
            a_action.out() << "inlib::sg::selection::do_pick :"
                           << " stop_at_first : pick nothing."
                           << std::endl;
          }
          a_z = 0;
          a_w = 0;
          return 0;
        }
      } else {
        if(verbose.value()) action.dump_picks();
        pick_element* _pick = action.closest_pick();
        if(_pick) {
          if(verbose.value()) {
            a_action.out() << "inlib::sg::selection::do_pick :"
                           << " closest node cls " << _pick->node().s_cls()
                           << std::endl;
          }
          a_action.save_state(_pick->state());

         {const std::vector<float>& zs = _pick->zs();
          const std::vector<float>& ws = _pick->ws();
          if(zs.empty()) {
            a_z = 0;
            a_w = 0;
          } else {
            a_z = zs.front();
            a_w = ws.front();
            std::vector<float>::const_iterator zit = zs.begin();
            std::vector<float>::const_iterator wit = ws.begin();
            for(;zit!=zs.end();++zit,++wit){
              if(*zit<a_z) {
                a_z = *zit;
                a_w = *wit;
              }
            }
          }}

          return &(_pick->node());
        } else {
          if(verbose) {
            a_action.out() << "inlib::sg::selection::do_pick :"
                           << " closest pick : pick nothing."
                           << std::endl;
          }
          a_z = 0;
          a_w = 0;
          return 0;
        }
      }
    }
  }
protected:
  cbks m_up_cbks;
  cbks m_down_cbks;
  cbks m_move_cbks;
};

}}

#endif
