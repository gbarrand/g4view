// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_cube_manip
#define inlib_sg_cube_manip

#include "separator"
#include "matrix"
#include "draw_style"
#include "noderef"
#include "cube"
//#include "_switch"
#include "rgba"
#include "cbks"
#include "ecbk"
#include "sf_vec3f"

#include <map>

namespace inlib {
namespace sg {

class cube_manip : public matrix {
  INLIB_NODE(cube_manip,inlib::sg::cube_manip,matrix)
public:
  static unsigned int shape_scale()         {return 1<<0;}
  static unsigned int shape_translate_xy()  {return 1<<1;}
  static unsigned int shape_translate_yz()  {return 1<<2;}
  static unsigned int shape_translate_zx()  {return 1<<3;}
  static unsigned int shape_rotate_x()      {return 1<<4;}
  static unsigned int shape_rotate_y()      {return 1<<5;}
  static unsigned int shape_rotate_z()      {return 1<<6;}
  static unsigned int shape_all() {
    return shape_scale()|
           shape_translate_xy()|
           shape_translate_yz()|
           shape_translate_zx()|
           shape_rotate_x()|
           shape_rotate_y()|
           shape_rotate_z();
  }
  static unsigned int shape_trans_rot() {
    return shape_translate_xy()|
           shape_translate_yz()|
           shape_translate_zx()|
           shape_rotate_x()|
           shape_rotate_y()|
           shape_rotate_z();
  }
public:
  sf_vec3f center;
  sf<float> width;
  sf<float> height;
  sf<float> depth;
  sf_vec<colorf,float> color;
  sf_vec<colorf,float> drag_color;
  sf<unsigned int> shape_mask;
  //sf<bool> rotate_as_translate;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::cube_manip)
    static const desc_fields s_v(parent::node_desc_fields(),7, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(center),
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(depth),
      INLIB_ARG_FIELD_DESC(color),
      INLIB_ARG_FIELD_DESC(drag_color),
      INLIB_ARG_FIELD_DESC(shape_mask)
      //INLIB_ADD_FIELD_DESC(rotate_as_translate)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&center);
    add_field(&width);
    add_field(&height);
    add_field(&depth);
    add_field(&color);
    add_field(&drag_color);
    add_field(&shape_mask);
    //add_field(&rotate_as_translate);
  }
public:
  virtual void render(render_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::render(a_action);
    m_sep.render(a_action);
  }

  virtual void pick(pick_action& a_action) {
    parent::pick(a_action);

    if(a_action.stop_at_first()){
      m_sep.pick(a_action);
      if(a_action.done()) a_action.set_node(this);
    } else {
      //pick_action action(a_action);
      //m_sep.pick(action);

      m_sep.pick(a_action);
    }
  }

  virtual void search(sg::search_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::search(a_action); //will do a node::search()
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_push(this);
    m_sep.search(a_action);
    if(a_action.done()) return;
    if(a_action.do_path()) a_action.path_pop();
  }

  virtual void event(event_action& a_action) {
    if(touched()) {
      update_sg();
      reset_touched();
    }
    parent::event(a_action);

    if(m_active) {

      if(event_cast<sg::event,sg::mouse_move_event>(a_action.get_event())){
        ecbk::exec_event_cbks(m_move_cbks.callbacks(),a_action.get_event(),&a_action,this);

      } else if(event_cast<sg::event,sg::mouse_up_event>(a_action.get_event())){
        set_active_node(0);
        a_action.set_done(true);
      }

    } else {
      m_sep.event(a_action);
    }
  }

public:
  cube_manip()
  :parent()

  ,center(vec3f())
  ,width(1.0f)
  ,height(1.0f)
  ,depth(1.0f)
  ,color(colorf_dimgrey())
  ,drag_color(colorf_lightgrey())
  ,shape_mask(shape_all())
  //,rotate_as_translate(false)

  ,m_ref_matrix(0)
  ,m_delete_ref_matrix(false)

  ,m_move_cbks()
  ,m_active(0)

  ,m_gidx(-1)
  {
    add_fields();
  }
  virtual ~cube_manip() {
    if(m_delete_ref_matrix) delete m_ref_matrix;
  }
public:
  cube_manip(const cube_manip& a_from)
  :parent(a_from)

  ,center(a_from.center)
  ,width(a_from.width)
  ,height(a_from.height)
  ,depth(a_from.depth)
  ,color(a_from.color)
  ,drag_color(a_from.drag_color)
  ,shape_mask(a_from.shape_mask)
  //,rotate_as_translate(a_from.rotate_as_translate)

  ,m_ref_matrix(0)
  ,m_delete_ref_matrix(false)

  ,m_move_cbks(a_from.m_move_cbks)
  ,m_active(a_from.m_active)
  ,m_active_state(a_from.m_active_state)

  ,m_path(a_from.m_path)
  ,m_gidx(a_from.m_gidx)
  {
    add_fields();
  }
  cube_manip& operator=(const cube_manip& a_from){
    parent::operator=(a_from);

    center = a_from.center;
    width = a_from.width;
    height = a_from.height;
    depth = a_from.depth;
    color = a_from.color;
    drag_color = a_from.drag_color;
    shape_mask = a_from.shape_mask;
    //rotate_as_translate = a_from.rotate_as_translate;

    m_move_cbks = a_from.m_move_cbks;
    m_active = a_from.m_active;
    m_active_state = a_from.m_active_state;

    m_path = a_from.m_path;
    m_gidx = a_from.m_gidx;
    return *this;
  }
public:
  matrix* ref_matrix() {return m_ref_matrix;}
  void set_ref_matrix(matrix* a_matrix,bool a_delete_matrix) {
    if(m_delete_ref_matrix) delete m_ref_matrix;
    m_ref_matrix = a_matrix;
    m_delete_ref_matrix = a_delete_matrix;
  }
  void set_delete_ref_matrix(bool a_value) {m_delete_ref_matrix = a_value;}

  const separator& container() const {return m_sep;} //must be consistent with pick().

  void set_active_node(cube* a_cb) {
    if(m_active) {
      sg::rgba& clr = get_color(*m_active);
      clr.color = color.value();
      m_active = 0;
    }
    if(a_cb) {
      sg::rgba& clr = get_color(*a_cb);
      clr.color = drag_color.value();
    }
    m_active = a_cb;
  }
  const cube* active_node() const {return m_active;}

  const mat4f& get_mtx(const cube& a_cube) const {
    std::map<cube*,matrix*>::const_iterator it = m_mtxs.find(const_cast<cube*>(&a_cube));
    return (*it).second->mtx.value();
  }

  const cbks& move_cbks() const {return m_move_cbks;}
  cbks& move_cbks() {return m_move_cbks;}

  bool to_scale(const cube& a_cube) const {
    if(&a_cube==&m_111) return true;
    if(&a_cube==&m_011) return true;
    if(&a_cube==&m_101) return true;
    if(&a_cube==&m_110) return true;
    if(&a_cube==&m_001) return true;
    if(&a_cube==&m_010) return true;
    if(&a_cube==&m_100) return true;
    if(&a_cube==&m_000) return true;
    return false;
  }

  bool to_rotate_y(const cube& a_cube) const {
    if(&a_cube==&m_plus_z_left) return true;
    if(&a_cube==&m_plus_z_right) return true;
    if(&a_cube==&m_minus_z_left) return true;
    if(&a_cube==&m_minus_z_right) return true;
    return false;
  }
  bool to_rotate_x(const cube& a_cube) const {
    if(&a_cube==&m_plus_z_top) return true;
    if(&a_cube==&m_plus_z_bottom) return true;
    if(&a_cube==&m_minus_z_top) return true;
    if(&a_cube==&m_minus_z_bottom) return true;
    return false;
  }
  bool to_rotate_z(const cube& a_cube) const {
    if(&a_cube==&m_plus_x_top) return true;
    if(&a_cube==&m_plus_x_bottom) return true;
    if(&a_cube==&m_minus_x_top) return true;
    if(&a_cube==&m_minus_x_bottom) return true;
    return false;
  }

  bool to_translate_yz(const cube& a_cube) const {
    if(&a_cube==&m_minus_x) return true;
    if(&a_cube==&m_plus_x) return true;
    return false;
  }
  bool to_translate_zx(const cube& a_cube) const {
    if(&a_cube==&m_minus_y) return true;
    if(&a_cube==&m_plus_y) return true;
    return false;
  }
  bool to_translate_xy(const cube& a_cube) const {
    if(&a_cube==&m_minus_z) return true;
    if(&a_cube==&m_plus_z) return true;
    return false;
  }

protected:
  void update_sg() {
    m_sep.clear(); //it does not delete cbks.

    if(width.value()<=0)  return;
    if(height.value()<=0) return;
    if(depth.value()<=0)  return;

    m_mtxs.clear();
    m_clrs.clear();

    //m_sep.down_cbks().add(new mcbk(*this));

   {matrix* mx = new matrix();
    mx->set_translate(center.value());
    m_sep.add(mx);}

   {draw_style* ds = new draw_style();
    ds->style = draw_filled;
    m_sep.add(ds);}

   {sg::rgba* mat = new sg::rgba();
    mat->color = color;
    m_sep.add(mat);}

    float w2 = width.value()*0.5f;
    float h2 = height.value()*0.5f;
    float d2 = depth.value()*0.5f;

    //float fcor = 0.1f;
    float fcor = 0.08f;

    //corners :
    if(shape_mask.value() & shape_scale()) {
     {float xsg[8] = {1,-1, 1, 1,-1,-1, 1,-1};
      float ysg[8] = {1, 1,-1, 1,-1, 1,-1,-1};
      float zsg[8] = {1, 1, 1,-1, 1,-1,-1,-1};

      cube* cbs[8];
      cbs[0] = &m_111;
      cbs[1] = &m_011;
      cbs[2] = &m_101;
      cbs[3] = &m_110;
      cbs[4] = &m_001;
      cbs[5] = &m_010;
      cbs[6] = &m_100;
      cbs[7] = &m_000;

      for(unsigned int index=0;index<8;index++){
        separator* _sep = new separator;
        m_sep.add(_sep);

        sg::rgba* mat = new sg::rgba();
        mat->color = color;
        _sep->add(mat);

        matrix* mx = new matrix();
        mx->set_translate
          (xsg[index]*w2,ysg[index]*h2,zsg[index]*d2);
        _sep->add(mx);

        cube* cb = cbs[index];
        cb->width = width.value()*fcor;
        cb->height = height.value()*fcor;
        cb->depth = depth.value()*fcor;
        _sep->add(new noderef(*cb));

        m_clrs[cb] = mat;
        m_mtxs[cb] = mx;
      }}
    }

    float fedg = fcor*0.5f;

    /////////////////////////////////
    /// edges : /////////////////////
    /////////////////////////////////
    if(shape_mask.value() & shape_rotate_x()) {
      //+z top :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,h2,d2);
      _sep->add(mx);
      m_plus_z_top.width = width.value()*(1.0f-fcor);
      m_plus_z_top.height = height.value()*fedg;
      m_plus_z_top.depth = depth.value()*fedg;
      _sep->add(new noderef(m_plus_z_top));
      m_clrs[&m_plus_z_top] = mat;
      m_mtxs[&m_plus_z_top] = mx;}

      //+z bottom :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,-h2,d2);
      _sep->add(mx);
      m_plus_z_bottom.width = width.value()*(1.0f-fcor);
      m_plus_z_bottom.height = height.value()*fedg;
      m_plus_z_bottom.depth = depth.value()*fedg;
      _sep->add(new noderef(m_plus_z_bottom));
      m_clrs[&m_plus_z_bottom] = mat;
      m_mtxs[&m_plus_z_bottom] = mx;}
    }

    if(shape_mask.value() & shape_rotate_y()) {
      //+z left :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(-w2,0,d2);
      _sep->add(mx);
      m_plus_z_left.width = width.value()*fedg;
      m_plus_z_left.height = height.value()*(1.0f-fcor);
      m_plus_z_left.depth = depth.value()*fedg;
      _sep->add(new noderef(m_plus_z_left));
      m_clrs[&m_plus_z_left] = mat;
      m_mtxs[&m_plus_z_left] = mx;}

      //+z right :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(w2,0,d2);
      _sep->add(mx);
      m_plus_z_right.width = width.value()*fedg;
      m_plus_z_right.height = height.value()*(1.0f-fcor);
      m_plus_z_right.depth = depth.value()*fedg;
      _sep->add(new noderef(m_plus_z_right));
      m_clrs[&m_plus_z_right] = mat;
      m_mtxs[&m_plus_z_right] = mx;}
    }

    if(shape_mask.value() & shape_rotate_x()) {
      //-z top :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,h2,-d2);
      _sep->add(mx);
      m_minus_z_top.width = width.value()*(1.0f-fcor);
      m_minus_z_top.height = height.value()*fedg;
      m_minus_z_top.depth = depth.value()*fedg;
      _sep->add(new noderef(m_minus_z_top));
      m_clrs[&m_minus_z_top] = mat;
      m_mtxs[&m_minus_z_top] = mx;}

      //-z bottom :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,-h2,-d2);
      _sep->add(mx);
      m_minus_z_bottom.width = width.value()*(1.0f-fcor);
      m_minus_z_bottom.height = height.value()*fedg;
      m_minus_z_bottom.depth = depth.value()*fedg;
      _sep->add(new noderef(m_minus_z_bottom));
      m_clrs[&m_minus_z_bottom] = mat;
      m_mtxs[&m_minus_z_bottom] = mx;}
    }

    if(shape_mask.value() & shape_rotate_y()) {
      //-z left :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(-w2,0,-d2);
      _sep->add(mx);
      m_minus_z_left.width = width.value()*fedg;
      m_minus_z_left.height = height.value()*(1.0f-fcor);
      m_minus_z_left.depth = depth.value()*fedg;
      _sep->add(new noderef(m_minus_z_left));
      m_clrs[&m_minus_z_left] = mat;
      m_mtxs[&m_minus_z_left] = mx;}

      //-z right :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(w2,0,-d2);
      _sep->add(mx);
      m_minus_z_right.width = width.value()*fedg;
      m_minus_z_right.height = height.value()*(1.0f-fcor);
      m_minus_z_right.depth = depth.value()*fedg;
      _sep->add(new noderef(m_minus_z_right));
      m_clrs[&m_minus_z_right] = mat;
      m_mtxs[&m_minus_z_right] = mx;}
   }

    if(shape_mask.value() & shape_rotate_z()) {
      //+x top :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(w2,h2,0);
      _sep->add(mx);
      m_plus_x_top.width = width.value()*fedg;
      m_plus_x_top.height = height.value()*fedg;
      m_plus_x_top.depth = depth.value()*(1.0f-fcor);
      _sep->add(new noderef(m_plus_x_top));
      m_clrs[&m_plus_x_top] = mat;
      m_mtxs[&m_plus_x_top] = mx;}

      //+x bottom :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(w2,-h2,0);
      _sep->add(mx);
      m_plus_x_bottom.width = width.value()*fedg;
      m_plus_x_bottom.height = height.value()*fedg;
      m_plus_x_bottom.depth = depth.value()*(1.0f-fcor);
      _sep->add(new noderef(m_plus_x_bottom));
      m_clrs[&m_plus_x_bottom] = mat;
      m_mtxs[&m_plus_x_bottom] = mx;}

      //-x top :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(-w2,h2,0);
      _sep->add(mx);
      m_minus_x_top.width = width.value()*fedg;
      m_minus_x_top.height = height.value()*fedg;
      m_minus_x_top.depth = depth.value()*(1.0f-fcor);
      _sep->add(new noderef(m_minus_x_top));
      m_clrs[&m_minus_x_top] = mat;
      m_mtxs[&m_minus_x_top] = mx;}

      //-x bottom :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(-w2,-h2,0);
      _sep->add(mx);
      m_minus_x_bottom.width = width.value()*fedg;
      m_minus_x_bottom.height = height.value()*fedg;
      m_minus_x_bottom.depth = depth.value()*(1.0f-fcor);
      _sep->add(new noderef(m_minus_x_bottom));
      m_clrs[&m_minus_x_bottom] = mat;
      m_mtxs[&m_minus_x_bottom] = mx;}
    }

    ////////////////////////////////////////
    /// faces : ////////////////////////////
    ////////////////////////////////////////
/*
    m_switch.clear();
    separator* __sep = new separator;
    m_switch.add(__sep);
    m_switch.add(new separator());
    m_sep.add(new noderef(m_switch));
    //m_switch.which = 1; //hidden
    m_switch.which = 0; //visible
*/

    float fface = 0.01f;
    float szf = 1.0f-fcor;
    szf *= fcor; //so that inside object still pickable.

    if(shape_mask.value() & shape_translate_yz()) {

      //-x :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(-w2,0,0);
      _sep->add(mx);
      m_minus_x.width  = width.value()*fface;
      m_minus_x.height = height.value()*szf;
      m_minus_x.depth  = depth.value()*szf;
      _sep->add(new noderef(m_minus_x));
      m_clrs[&m_minus_x] = mat;
      m_mtxs[&m_minus_x] = mx;}

      //+x :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(w2,0,0);
      _sep->add(mx);
      m_plus_x.width  = width.value()*fface;
      m_plus_x.height = height.value()*szf;
      m_plus_x.depth  = depth.value()*szf;
      _sep->add(new noderef(m_plus_x));
      m_clrs[&m_plus_x] = mat;
      m_mtxs[&m_plus_x] = mx;}
    }

    if(shape_mask.value() & shape_translate_zx()) {
      //-y :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,-h2,0);
      _sep->add(mx);
      m_minus_y.width  = width.value()*szf;
      m_minus_y.height = height.value()*fface;
      m_minus_y.depth  = depth.value()*szf;
      _sep->add(new noderef(m_minus_y));
      m_clrs[&m_minus_y] = mat;
      m_mtxs[&m_minus_y] = mx;}

      //+y :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,h2,0);
      _sep->add(mx);
      m_plus_y.width  = width.value()*szf;
      m_plus_y.height = height.value()*fface;
      m_plus_y.depth  = depth.value()*szf;
      _sep->add(new noderef(m_plus_y));
      m_clrs[&m_plus_y] = mat;
      m_mtxs[&m_plus_y] = mx;}
    }

    if(shape_mask.value() & shape_translate_xy()) {
      //-z :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,0,-d2);
      _sep->add(mx);
      m_minus_z.width  = width.value()*szf;
      m_minus_z.height = height.value()*szf;
      m_minus_z.depth  = depth.value()*fface;
      _sep->add(new noderef(m_minus_z));
      m_clrs[&m_minus_z] = mat;
      m_mtxs[&m_minus_z] = mx;}

      //+z :
     {separator* _sep = new separator;
      m_sep.add(_sep);
      sg::rgba* mat = new sg::rgba();
      mat->color = color;
      _sep->add(mat);
      matrix* mx = new matrix();
      mx->set_translate(0,0,d2);
      _sep->add(mx);
      m_plus_z.width  = width.value()*szf;
      m_plus_z.height = height.value()*szf;
      m_plus_z.depth  = depth.value()*fface;
      _sep->add(new noderef(m_plus_z));
      m_clrs[&m_plus_z] = mat;
      m_mtxs[&m_plus_z] = mx;}
    }
  }

  sg::rgba& get_color(const cube& a_cube) {
    std::map<cube*,sg::rgba*>::iterator it =
      m_clrs.find(const_cast<cube*>(&a_cube));
    return *((*it).second);
  }

protected:
  matrix* m_ref_matrix;
  bool m_delete_ref_matrix;

  separator m_sep;
  cbks m_move_cbks;

  // corners :
  cube m_111;
  cube m_011;
  cube m_101;
  cube m_110;
  cube m_001;
  cube m_010;
  cube m_100;
  cube m_000;

  // edges :
  cube m_plus_z_top;
  cube m_plus_z_bottom;
  cube m_plus_z_left;
  cube m_plus_z_right;

  cube m_minus_z_top;
  cube m_minus_z_bottom;
  cube m_minus_z_left;
  cube m_minus_z_right;

  cube m_plus_x_top;
  cube m_plus_x_bottom;
  cube m_minus_x_top;
  cube m_minus_x_bottom;

  // faces :
  //_switch m_switch;
  cube m_minus_x;
  cube m_plus_x;
  cube m_minus_y;
  cube m_plus_y;
  cube m_minus_z;
  cube m_plus_z;

  std::map<cube*,matrix*> m_mtxs;
  std::map<cube*,sg::rgba*> m_clrs;

  cube* m_active; //not owner
public:
  sg::state m_active_state; //state when the m_active node had been picked.
  mat4f m_start_matrix;
  std::vector<node*> m_path; //path to working node.
  int m_gidx; //index in m_path of group containing the cube_manip.
};

}}

#endif
