// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_parabolic_anim
#define inlib_sg_parabolic_anim

#include "base_anim"
#include "matrix"
#include "ui"
#include "cbks"

#include "sf_vec3f"

namespace inlib {
namespace sg {

class parabolic_anim : public base_anim, public matrix {
public:
  INLIB_NODE_NO_CAST(parabolic_anim,inlib::sg::parabolic_anim,matrix)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<parabolic_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  virtual bool action(std::ostream&,const atime& a_now) {
    float t = float(atime::diff(a_now,m_start).value());
    float tp = float(atime::diff(m_prev,m_start).value());
    mul_translate(speed.value()*(t-tp)+acceleration.value()*0.5f*(t*t-tp*tp));
    return true;
  }
public:
  virtual void event(event_action& a_action) {
    matrix::event(a_action);
    do_event(a_action);
  }
  virtual void begin_anim() {
    set_translate(position.value());
  }
  virtual bool end_anim() {
    m_ui.add_work_cbks(m_end_cbks.callbacks(),true);
    return true;
  }
public:
  sf_vec3f position;
  sf_vec3f speed;
  sf_vec3f acceleration;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::parabolic_anim)
    static const desc_fields s_v(parent::node_desc_fields(),4, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(delay),
      INLIB_ARG_FIELD_DESC(position),
      INLIB_ARG_FIELD_DESC(speed),
      INLIB_ARG_FIELD_DESC(acceleration)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&position);
    add_field(&speed);
    add_field(&acceleration);
  }
  static float grav_const() {return 9.81f;} //m/s2
public:
  parabolic_anim(ui& a_ui,const atime& a_start)
  :base_anim(a_start)
  ,parent()

  ,position(vec3f(0,0,0))
  ,speed(vec3f(1,1,0))
  ,acceleration(vec3f(0,-grav_const(),0))

  ,m_ui(a_ui)
  ,m_end_cbks()
  {
    add_fields();
    speed.value().normalize(); //1 m/s
  }
  virtual ~parabolic_anim(){}
public:
  parabolic_anim(const parabolic_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)
  ,position(a_from.position)
  ,speed(a_from.speed)
  ,acceleration(a_from.acceleration)

  ,m_ui(a_from.m_ui)
  ,m_end_cbks(a_from.m_end_cbks)
  {
    add_fields();
  }
  parabolic_anim& operator=(const parabolic_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);

    position = a_from.position;
    speed = a_from.speed;
    acceleration = a_from.acceleration;

    m_end_cbks = a_from.m_end_cbks;
    return *this;
  }
public:
  const sg::cbks& end_cbks() const {return m_end_cbks;}
  void add_end_callback(bcbk* a_cbk) { //we take ownership of a_cbk
    m_end_cbks.add(a_cbk);
  }
protected:
  ui& m_ui;
  sg::cbks m_end_cbks;
};

}}

#endif
