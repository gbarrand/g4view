// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_send
#define inlib_sg_send

#include "../net/sg_client"
#include "../args"

#include "../press_func"

#include "write_bsg"

namespace inlib {
namespace sg {

inline bool send(net::sg_client& a_dc,sg::node& a_node,compress_func a_compress_func,const args& a_opts) {

  // used by data clients in inlib/cbk/sg_client.
  // pending code is in wall/sg_servs.

  if(!a_dc.socket().is_connected()) return false;

  //sg::write_exsg action(a_dc.out());
  sg::write_bsg action(a_dc.out());
  a_compress_func = 0; //no need to compress if binary.

  if(!action.open_buffer()) return false;
  if(!a_node.write(action)) return false;
  if(!action.close_buffer()) return false;

  unsigned int uc_length = (unsigned int)action.buffer().length();
  if(!uc_length) return true; //nothing to send.

  unsigned int cp_length = 0;
  char* cp_buffer = 0;
  if(a_compress_func) {
    cp_buffer = new char[uc_length];
    if(!cp_buffer) return false;
    if(!a_compress_func(a_dc.out(),1,uc_length,(char*)action.buffer().buf(),uc_length,cp_buffer,cp_length)){
      a_dc.out() << "inlib::sg::send : compression failed." << std::endl;
      delete [] cp_buffer;
      return false;
    }
    if(!cp_length) {
      a_dc.out() << "inlib::sg::send : zero compression size." << std::endl;
      delete [] cp_buffer;
      return false;
    }

  } else {
    cp_length = (unsigned int)action.buffer().length();
    cp_buffer = (char*)action.buffer().buf();
  }

  bool status = a_dc.send_buffer_doc(uc_length,cp_length,cp_buffer,a_opts);

  if(a_compress_func) delete [] cp_buffer;

  return status;
}

}}

//inlib_build_use socket

#endif
