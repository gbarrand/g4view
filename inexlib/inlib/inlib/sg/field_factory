// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_field_factory
#define inlib_sg_field_factory

#include "../hep/sf_polyhedron"

#include "sf_enum"
#include "sf_img"
#include "sf_vec3f"
#include "sf_vec2f"
#include "sf_string"
#include "sf_rotf"
#include "mf"
#include "mf_list_item"
#include "../colorf"

#include "ifield_factory"

namespace inlib {
namespace sg {

#define INLIB_NEW_SF(a__what)\
  if(rcmp(a_cls,sf<a__what>::s_class())) return new sf<a__what>();

#define INLIB_NEW_MF(a__what)\
  if(rcmp(a_cls,mf<a__what>::s_class())) return new mf<a__what>();

class field_factory : public virtual ifield_factory {
public:
  virtual field* create(const std::string& a_cls) const {
    ///////////////////////////////////////////
    /// sf ////////////////////////////////////
    ///////////////////////////////////////////
    if(rcmp(a_cls,sf_string::s_class())) return new sf_string();
    if(rcmp(a_cls,sf_rotf::s_class())) return new sf_string();
    if(rcmp(a_cls,sf_vec2f::s_class())) return new sf_vec2f();
    if(rcmp(a_cls,sf_vec3f::s_class())) return new sf_vec3f();
    if(rcmp(a_cls,hep::sf_polyhedron::s_class())) return new hep::sf_polyhedron();

    INLIB_NEW_SF(unsigned char) //gl::mode_t
    INLIB_NEW_SF(unsigned int)
    INLIB_NEW_SF(int)
    INLIB_NEW_SF(float)
    INLIB_NEW_SF(double)
    INLIB_NEW_SF(bool)
    INLIB_NEW_SF(unsigned short) //sg::lpat

    if(rcmp(a_cls,sf_img<byte>::s_class())) return new sf_img<byte>();
    if(rcmp(a_cls,sf_enum<int16>::s_class())) return new sf_enum<int16>();

    ///////////////////////////////////////////
    /// mf ////////////////////////////////////
    ///////////////////////////////////////////
    if(rcmp(a_cls,mf_string::s_class())) return new mf_string();
    if(rcmp(a_cls,mf_list_item::s_class())) return new mf_list_item();

    INLIB_NEW_MF(float)

    typedef unsigned int unichar;
    if(rcmp(a_cls,mf_std_vec<unichar>::s_class())) return new mf_std_vec<unichar>();
    if(rcmp(a_cls,mf_std_vec<float>::s_class())) return new mf_std_vec<float>();
    if(rcmp(a_cls,mf_std_vec<std::string>::s_class()))
      return new mf_std_vec<std::string>();
    if(rcmp(a_cls,mf_enum<int16>::s_class())) return new mf_enum<int16>();
    if(rcmp(a_cls,mf_vec< std::vector<std::string> , std::string >::s_class()))
      return new mf_vec< std::vector<std::string> , std::string>();
    if(rcmp(a_cls,mf_vec<colorf,float>::s_class()))
      return new mf_vec<colorf,float>()  ;
    if(rcmp(a_cls,mf_vec<vec4f,float>::s_class()))
      return new mf_vec<vec4f,float>();

    return 0;
  }
public:
  field_factory(){}
  virtual ~field_factory(){}
public:
  field_factory(const field_factory& a_from):ifield_factory(a_from){}
  field_factory& operator=(const field_factory&){return *this;}
};

#undef INLIB_NEW_SF
#undef INLIB_NEW_MF

}}

#endif

