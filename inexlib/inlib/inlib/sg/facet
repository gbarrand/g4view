// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_facet
#define inlib_sg_facet

#include "node"
#include "sf"
#include "render_action"
#include "pick_action"
#include "bbox_action"

namespace inlib {
namespace sg {

class facet : public node {
  INLIB_NODE(facet,inlib::sg::facet,node)
public:
  sf<float> width;
  sf<float> height;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::facet)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(width),
      INLIB_ARG_FIELD_DESC(height)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&width);
    add_field(&height);
  }
public:
  virtual void render(render_action& a_action) {
    float tris[18];float nms[18];
    _tris(tris,nms);
    a_action.draw_vertex_normal_array(gl::triangles(),18,tris,nms);
  }
  virtual void pick(pick_action& a_action) {
    float tris[18];float nms[18];
    _tris(tris,nms);
    a_action.add__triangles(*this,18,tris,true);
  }
  virtual void bbox(bbox_action& a_action) {
    float front[12];
    _faces(front);
    a_action.add_points(12,front);
  }
public:
  facet()
  :parent()
  ,width(1.0f)
  ,height(1.0f)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  virtual ~facet(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  facet(const facet& a_from)
  :parent(a_from)
  ,width(a_from.width)
  ,height(a_from.height)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    add_fields();
  }
  facet& operator=(const facet& a_from){
    parent::operator=(a_from);

    width = a_from.width;
    height = a_from.height;

    return *this;
  }

protected:
  void _faces(float front[]) { //[12]
    float w2 = width.value()*0.5f;
    float h2 = height.value()*0.5f;
    float d2 = 0;

    front[0] =  w2;front[ 1] = -h2;front[ 2] = d2;
    front[3] =  w2;front[ 4] =  h2;front[ 5] = d2;
    front[6] = -w2;front[ 7] =  h2;front[ 8] = d2;
    front[9] = -w2;front[10] = -h2;front[11] = d2;
  }

  void _tris(float tris[],float nms[]){ //[18]
    float front[12];
    _faces(front);

    tris[0] = front[0];
    tris[1] = front[1];
    tris[2] = front[2];

    tris[3] = front[3];
    tris[4] = front[4];
    tris[5] = front[5];

    tris[6] = front[6];
    tris[7] = front[7];
    tris[8] = front[8];
    //
    tris[9]  = front[6];
    tris[10] = front[7];
    tris[11] = front[8];

    tris[12] = front[9];
    tris[13] = front[10];
    tris[14] = front[11];

    tris[15] = front[0];
    tris[16] = front[1];
    tris[17] = front[2];

    ///////////////////// front
    nms[0] = 0;
    nms[1] = 0;
    nms[2] = 1;

    nms[3] = 0;
    nms[4] = 0;
    nms[5] = 1;

    nms[6] = 0;
    nms[7] = 0;
    nms[8] = 1;
    //
    nms[9]  = 0;
    nms[10] = 0;
    nms[11] = 1;

    nms[12] = 0;
    nms[13] = 0;
    nms[14] = 1;

    nms[15] = 0;
    nms[16] = 0;
    nms[17] = 1;
  }

  void _lines(float lines[]) { //[24]
    float front[12];
    _faces(front);

    lines[0] = front[0];
    lines[1] = front[1];
    lines[2] = front[2];
    lines[3] = front[3];
    lines[4] = front[4];
    lines[5] = front[5];

    lines[6] = front[3];
    lines[7] = front[4];
    lines[8] = front[5];
    lines[9] = front[6];
    lines[10] = front[7];
    lines[11] = front[8];

    lines[12] = front[6];
    lines[13] = front[7];
    lines[14] = front[8];
    lines[15] = front[9];
    lines[16] = front[10];
    lines[17] = front[11];

    lines[18] = front[9];
    lines[19] = front[10];
    lines[20] = front[11];
    lines[21] = front[0];
    lines[22] = front[1];
    lines[23] = front[2];
  }

};

}}

#endif
