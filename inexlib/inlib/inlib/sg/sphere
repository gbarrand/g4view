// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_sphere
#define inlib_sg_sphere

#include "node"
#include "render_gstos"

#include "pick_action"
#include "bbox_action"
#include "sf_enum"

#include "../mathf"

namespace inlib {
namespace sg {

class sphere : public node, public render_gstos {
  INLIB_NODE(sphere,inlib::sg::sphere,node)
public:
  sf<float> radius;
  sf<unsigned int> slices;
  sf<unsigned int> stacks;
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::sphere)
    static const desc_fields s_v(parent::node_desc_fields(),3, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(radius),
      INLIB_ARG_FIELD_DESC(slices),
      INLIB_ARG_FIELD_DESC(stacks)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&radius);
    add_field(&slices);
    add_field(&stacks);
  }
protected: //render_gstos
  virtual void visit(gstos_add& a_visitor,draw_type a_style) {
    visit<gstos_add>(a_visitor,a_style);
  }
public: //node
  virtual void render(render_action& a_action) {
    if(gstos_render(a_action)) return;

    // immediate rendering :
    const state& state = a_action.state();
    bool draw_edges = false;
    if(state.m_draw_type==draw_filled) draw_edges = state.m_GL_LIGHTING?false:true;
    if(draw_edges) {
      //a_action.set_lighting(false); //NOTE : we should do that if draw_filled !
      a_action.color4f(0,0,0,1); //if lighten, then rendered grey.
      a_action.line_width(1);
      visit(a_action,draw_lines);
      a_action.set_polygon_offset(true); //pushes back the filled polygons to avoid z-fighting with lines
      a_action.color4f(state.m_color);
      a_action.line_width(state.m_line_width);
      //a_action.set_lighting(state.m_GL_LIGHTING);
    }

    //if draw_filled and shade_flat, enforce "as triangles" to have same rendering as gsto mode :
    bool as_triangles = state.m_shade_model==shade_flat?true:false;
    visit(a_action,state.m_draw_type,as_triangles);
    if(draw_edges) a_action.set_polygon_offset(state.m_GL_POLYGON_OFFSET_FILL);
  }

  virtual void pick(pick_action& a_action) {
    const state& state = a_action.state();
    if(a_action.stop_at_first()){
      visit(a_action,state.m_draw_type);
      if(a_action.done()) a_action.set_node(this);
    } else {
      a_action.set_done(false);
      a_action.zs().clear();
      a_action.ws().clear();
      visit(a_action,state.m_draw_type);
      if(a_action.done()) {
        a_action.add_pick(*this,a_action.zs(),a_action.ws(),a_action.state());
        a_action.set_done(false);
      }
    }
  }
  virtual void bbox(bbox_action& a_action) {
    const state& state = a_action.state();
    visit(a_action,state.m_draw_type);
  }
public:
  virtual void clear_gstos() {gstos::clean_gstos();}
public:
  sphere()
  :parent()
  ,render_gstos()
  ,radius(1.0f)
  ,slices(30)
  ,stacks(30)
  {
    add_fields();
  }
  virtual ~sphere(){}
public:
  sphere(const sphere& a_from)
  :parent(a_from)
  ,render_gstos(a_from)
  ,radius(a_from.radius)
  ,slices(a_from.slices)
  ,stacks(a_from.stacks)
  {
    add_fields();
  }
  sphere& operator=(const sphere& a_from){
    parent::operator=(a_from);
    render_gstos::operator=(a_from);

    radius = a_from.radius;
    slices = a_from.slices;
    stacks = a_from.stacks;

    return *this;
  }
protected:
  static void _new(unsigned int a_number,float*& a_nms,unsigned int& a_inm,float*& a_vts,unsigned int& a_ivt){
    a_nms = new float[a_number];
    a_inm = 0;
    a_vts = new float[a_number];
    a_ivt = 0;
  }
  static void _new(unsigned int a_number,float*& a_vts,unsigned int& a_ivt){
    a_vts = new float[a_number];
    a_ivt = 0;
  }
  static void _set(float* a_v,unsigned int& a_i,float a_x,float a_y,float a_z){
    a_v[a_i] = a_x;a_i++;
    a_v[a_i] = a_y;a_i++;
    a_v[a_i] = a_z;a_i++;
  }
  static void _set(float* a_v,unsigned int& a_i,float a_r,float a_g,float a_b,float a_a){
    a_v[a_i] = a_r;a_i++;
    a_v[a_i] = a_g;a_i++;
    a_v[a_i] = a_b;a_i++;
    a_v[a_i] = a_a;a_i++;
  }
  static void _delete(float*& a_nms,float*& a_vts){
    delete [] a_nms;a_nms = 0;
    delete [] a_vts;a_vts = 0;
  }
  static void _delete(float*& a_vts){
    delete [] a_vts;a_vts = 0;
  }

protected:

  void tabulate_stacks(){
    //::printf("debug : tabulate_stacks\n");
    unsigned int num = stacks.value()+1;
    m_srho.clear();
    m_crho.clear();
    m_srho.resize(num,0);
    m_crho.resize(num,0);
    if(stacks.value()) {
      float drho = fpi() / float(stacks.value());
      float rho = 0;
      for(unsigned int i=0;i<num;i++,rho+=drho) {
        m_srho[i] = fsin(rho);
        m_crho[i] = fcos(rho);
      }
    }
  }

  void tabulate_slices(){
    unsigned int num = slices.value()+1;
    m_stheta.clear();
    m_ctheta.clear();
    m_stheta.resize(num,0);
    m_ctheta.resize(num,0);
    if(slices.value()) {
      float dtheta = ftwo_pi()/float(slices.value());
      float theta = 0;
      for(unsigned int i=0;i<num;i++,theta+=dtheta) {
        m_stheta[i] = fsin(theta);
        m_ctheta[i] = fcos(theta);
      }
    }
  }

  template <class T>
  void visit(T& a_visitor,draw_type a_style,bool a_as_triangles = false){
    float a_radius = radius.value();
    unsigned int a_slices = slices.value();
    unsigned int a_stacks = stacks.value();

    if(!a_slices||!a_stacks) return;

    if((a_slices+1)!=m_stheta.size()) tabulate_slices();
    if((a_stacks+1)!=m_srho.size()) tabulate_stacks();

    float sdrho,cdrho,srho,crho,srho_drho,crho_drho;
    float ctheta,stheta;
    float x, y, z;
    float nsign = 1; //OUTSIDE. -1 = INSIDE

    float* vts = 0;
    unsigned int ivt = 0;

    if(a_style==draw_filled) {
       float* nms = 0;
       unsigned int inm = 0;

       // draw +Z end as a triangle fan :

      {_new((1+a_slices+1)*3,nms,inm,vts,ivt);
       _set(nms,inm,0,0,1);
       _set(vts,ivt,0,0,nsign*a_radius);
       sdrho = m_srho[1];
       cdrho = m_crho[1];
       for (unsigned int j=0;j<=a_slices;j++) {
 	 x = m_ctheta[j] * sdrho;
 	 y = m_stheta[j] * sdrho;
 	 z = nsign * cdrho;
 	 _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	 _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
       }
       a_visitor.add_triangle_fan_normal(ivt,vts,nms);
       _delete(nms,vts);}

       // draw intermediate stacks as triangle strips :
       for (int i=1;i<int(a_stacks)-1;i++) {
         _new((a_slices+1)*2*3,nms,inm,vts,ivt);
         srho = m_srho[i];
         crho = m_crho[i];
 	 srho_drho = m_srho[i+1];
 	 crho_drho = m_crho[i+1];
 	 for (unsigned int j=0;j<=a_slices;j++) {
 	    x = m_ctheta[j] * srho;
 	    y = m_stheta[j] * srho;
 	    z = nsign * crho;
 	    _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	    _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
 	    x = m_ctheta[j] * srho_drho;
 	    y = m_stheta[j] * srho_drho;
 	    z = nsign * crho_drho;
 	    _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	    _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
 	 }
	 if(a_as_triangles) {
           a_visitor.add_triangle_strip_as_triangles(ivt,vts,nms);
	 } else {
           a_visitor.add_triangle_strip_normal(ivt,vts,nms);
	 }
         _delete(nms,vts);
       }

       // draw -Z end as a triangle fan :
      {_new((1+a_slices+1)*3,nms,inm,vts,ivt);
       _set(nms,inm, 0, 0, -1 );
       _set(vts,ivt, 0, 0, -a_radius*nsign );
       srho = m_srho[a_stacks-1];
       crho = m_crho[a_stacks-1];
       for (int j=a_slices;j>=0;j--) {
 	 x = m_ctheta[j] * srho;
 	 y = m_stheta[j] * srho;
 	 z = nsign * crho;
 	 _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	 _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
       }
       a_visitor.add_triangle_fan_normal(ivt,vts,nms);
       _delete(nms,vts);}

    } else if(a_style==draw_lines) {

       // draw stack lines :
      {for (int i=1;i<int(a_stacks)-1;i++) {
         _new(a_slices*3,vts,ivt);
         srho = m_srho[i];
         crho = m_crho[i];
 	 for (unsigned int j=0;j<a_slices;j++) {
 	    x = m_ctheta[j] * srho;
 	    y = m_stheta[j] * srho;
 	    z = crho;
 	    //if(a_normals) _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	    _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
 	 }
         //if(a_normals) ::glNormalPointer(GL_FLOAT,0,nms);
         a_visitor.add_line_loop(ivt,vts);
         _delete(vts);
       }}

       // draw slice lines :
      {for (unsigned int j=0;j<a_slices;j++) {
         _new((a_stacks+1)*3,vts,ivt);
 	 ctheta = m_ctheta[j];
 	 stheta = m_stheta[j];
 	 for (unsigned int i=0;i<=a_stacks;i++) {
            srho = m_srho[i];
            crho = m_crho[i];
 	    x = ctheta * srho;
 	    y = stheta * srho;
 	    z = crho;
 	    //if(a_normals) _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	    _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
 	 }
         //if(a_normals) ::glNormalPointer(GL_FLOAT,0,nms);
         a_visitor.add_line_strip(ivt,vts);
         _delete(vts);
       }}

    } else if(a_style==draw_points) {
       // top and bottom-most points :
       _new((2+a_stacks*a_slices)*3,vts,ivt);

       //if(a_normals) _set(nms,inm, 0, 0, nsign );
       _set(vts,ivt, 0, 0, a_radius );
       //if(a_normals) _set(nms,inm, 0, 0, -nsign );
       _set(vts,ivt, 0, 0, -a_radius );

       // loop over a_stacks :
       for (int i=1;i<int(a_stacks)-1;i++) {
         srho = m_srho[i];
         crho = m_crho[i];
 	 for (unsigned int j=0;j<a_slices;j++) {
   	    ctheta = m_ctheta[j];
 	    stheta = m_stheta[j];
 	    x = ctheta * srho;
 	    y = stheta * srho;
 	    z = crho;
 	    //if(a_normals) _set(nms,inm, x*nsign, y*nsign, z*nsign );
 	    _set(vts,ivt, x*a_radius, y*a_radius, z*a_radius );
 	 }
       }
       //if(a_normals) ::glNormalPointer(GL_FLOAT,0,nms);
       a_visitor.add_points(ivt,vts);
       _delete(vts);
    }
  }
protected:
  std::vector<float> m_srho;
  std::vector<float> m_crho;
  std::vector<float> m_stheta;
  std::vector<float> m_ctheta;
};

}}

#endif
