// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_open_image_file
#define inlib_open_image_file

#include "../image"

#include "load_img"

namespace inlib {

// to put in common code for jpeg and png.
inline bool open_image_file(sg::gui_viewer& a_gv,
                            const image::ireader& a_reader,
                            const std::string& a_path,
                            const args& a_args,
                            unsigned int a_mem_limit){
    std::ostream& out = a_gv.out();

    unsigned int w,h,bpp;
    unsigned char* buffer = 0;

    if(a_mem_limit) {
        if(!a_reader.infos(out,a_path,w,h,bpp)) {
          out << "inlib::opener :"
              << " for file " << sout(a_path)
              << " ireader::infos() failed."
              << std::endl;
          a_gv.map_warn_failed();
          return false;
        }
        if((w*h*bpp)>a_mem_limit) {

          //unsigned int sw;
          //unsigned int sh;
          //float aspect = float(w)/float(h);
          //if(aspect>=1) {
          //  sh = 2;
          //  sw = aspect*sh;
          //} else {
          //  sw = 2;
          //  sh = sw/aspect;
          //}

          unsigned int sw = 2;
          unsigned int sh = 2;
          while(true) {
            if(((2*sw)*(2*sh)*bpp)>a_mem_limit) break;
            sw *=2;
            sh *=2;
          }

          unsigned int sx = (w-sw)/2;
          unsigned int sy = (h-sh)/2;

          buffer = a_reader.read_part(out,a_path,sx,sy,sw,sh,w,h,bpp);
        } else {
          buffer = a_reader.read(out,a_path,w,h,bpp);
        }
    } else {
      buffer = a_reader.read(out,a_path,w,h,bpp);
    }

    if(!buffer) {
      out << "inlib::opener::open :"
          << " for file " << sout(a_path)
          << " read failed."
          << std::endl;
      a_gv.map_warn_failed();
      return false;
    }

    inlib::img<inlib::byte> img(w,h,bpp,buffer,true);

    load_img(a_gv,img,colorf_default());

    //if(!a_args.is_arg(sg::s_no_hide_menu())) a_gv.hide_main_menu();
    a_gv.hide_main_menu();

    return true;
}

}

//inlib_build_use kernel

#endif
