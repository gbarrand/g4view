// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_view_astro
#define inlib_sg_view_astro

#include "../net/wget"
#include "../xml/srvs"
#include "../astro/SDSS"

namespace inlib {
namespace sg {

class view_astro {
public:
  INLIB_SCLASS(inlib::sg::view_astro)
public:
  virtual const inlib::wget& wget() const {return m_wget;} //virtual for wall/view_astro.
public:
  view_astro(std::ostream& a_out,const xml::srvs& a_srvs)
  :m_catalog()
  ,m_wget(a_out)
  ,m_srvs_ref(a_srvs)
  ,m_host()
  ,m_port(0)
  {}
  virtual ~view_astro(){}
protected:
  view_astro(const view_astro& a_from)
  :m_catalog(a_from.m_catalog)
  ,m_wget(a_from.m_wget.out())
  ,m_srvs_ref(a_from.m_srvs_ref)
  ,m_host(a_from.m_host)
  ,m_port(a_from.m_port)
  {}

  view_astro& operator=(const view_astro& a_from){
    m_catalog = a_from.m_catalog;
    m_host = a_from.m_host;
    m_port = a_from.m_port;
    return *this;
  }
public:
  SDSS::catalog& SDSS_catalog() {return m_catalog;}

  void set_host(const std::string& a_host) {m_host = a_host;}
  const std::string& host() const {return m_host;}

  void set_port(unsigned int a_port) {m_port = a_port;}
  unsigned int port() const {return m_port;}

  const xml::srvs& srvs() const {return m_srvs_ref;}

protected:
  SDSS::catalog m_catalog;
  net::wget m_wget; //for simbad
//public:
  const xml::srvs& m_srvs_ref;
  std::string m_host;
  unsigned int m_port;
};

}}

#include "viewer"

namespace inlib {
namespace sg {

inline view_astro* cast_view_astro(viewer& a_viewer) {
  return safe_cast<viewer,view_astro>(a_viewer);
}

}}

//inlib_build_use kernel

#endif
