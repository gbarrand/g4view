//////////////////////////////////////////////////////////////////////////
//                          readfile.cpp                                //
//                         --------------                               //
//    begin                : Thu Sep 11 2003                            //
//    copyright            : (C) 2003 by cbaudry (CEA/DSM/SPP)          //
//    email                : cedric.baudry@tremplin-utc.fr              //
//////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//                                                                        //
//   This program is free software; you can redistribute it and/or modify //
//   it under the terms of the GNU General Public License as published by //
//   the Free Software Foundation, version 2 of the License               //
//                                                                        //
////////////////////////////////////////////////////////////////////////////

#include "material.h"

#ifndef POVAMA_DEBUG
  /// prints debugging info to stdout
  #define POVAMA_verbose 0
  #define POVAMA_DEBUG                   if(POVAMA_verbose) printf
#endif

#include <cstdio>
#include <cstdlib>
#include <cstring>

#include "../typedefs"
#include "../cstr"
inline void malloc_error(size_t a_size) {
  char* fmt = inlib::str_dup("malloc error : size to allocate : ");
  inlib::str_cat(fmt,inlib::uint64_format());
  inlib::str_cat(fmt,"\n");
  ::fprintf(stderr,fmt,(inlib::uint64)a_size);
  inlib::str_del(fmt);
}

/* ========================================================================= */
/*
  Structure of the file containing the modelisation:
  nb super-volumes  (int)
  nb objects        (int)
  nb faces          (int)
  nb points         (int)
  #points definition for nb points lines (3 floats)
  #faces definition for 2*nb faces lines (2 ints - nbf imat -then nbf pts ints)
  XXX -> nb points for this face XXX -> matter index
  XX XX XX XX -> points index
  #objects definition for 2*nb objects lines (1 int then nbpo ints)
  XXX -> nb faces for object
  XX XX XX XX -> faces index
  #super volumes definition for 2*nsv lines (1 int then nbobjS ints)
  XXX -> nb objects
  XX XX XX XX -> objects index
  NB: each piece of information is on NB_SPACES spaces
*/
inline char *ReadFile::subString (char *str, unsigned int start, unsigned int end,int& a_read_success)
{
    if (!a_read_success) return NULL;
    char *sub;
    unsigned int i;
    if (end < start)
    {
        ::fprintf(stderr,"substr> end param must be greater than start\n");
        a_read_success = false;
        return NULL;
    }
    if (end > strlen (str))
    {
        ::fprintf(stderr,"substr> end mustn't be greater than strlen\n");
        printf ("STR: %s \t start %d \t end %d \n", str, start, end);
        a_read_success = false;
        return NULL;
    }
    sub = (char *) ::malloc ((end - start + 2) * sizeof (char));
    if (sub ==NULL) {
        a_read_success = false;
        return NULL;
    }
    for (i = start; i <= end; i++)
        sub[i - start] = str[i];
    sub[end - start + 1] = '\0';
    return sub;
}

/**
 * @param line is used to debug errors in the file
 * @param nbchar is the number of chars at the beginning of s to take
 * @param s is the string containing the data
 */
inline int ReadFile::readInt (unsigned int nbchar, char *a_s,int line,int& a_read_success)
{
    if (!a_read_success) return 0;

    /* optimize : all is ok with the .fog FOG file we have.
    if (a_s == NULL)
      {
        ::fprintf (stderr, "readInt> string is set to NULL at line %d\n", line);
        a_read_success = false;
        return 0;
    }

    if (strlen (a_s) < nbchar)
    {
        ::fprintf (stderr, "readInt> string too short to extract %d chars at line %d\n", nbchar, line);
        a_read_success = false;
        return 0;
	}*/

    char old_char = a_s[nbchar];
    a_s[nbchar] = '\0';
    char* ss;
    int retvalue = (int)::strtol(a_s,&ss,10);
    a_s[nbchar] = old_char;
    if( (ss==a_s) || (ss!=(a_s+nbchar)) ) {

      ::fprintf(stderr,"readInt failure : %d at line %d\n",nbchar,line);

      old_char = a_s[nbchar];
      a_s[nbchar] = '\0';
      ::fprintf(stderr,"readInt failure : \"%s\"\n",a_s);
      a_s[nbchar] = old_char;

      a_read_success = false;
      retvalue = 0;
    }
    return retvalue;
}


/**
 * @param line is used to debug errors in the file
 * @param nbchar is the number of chars at the beginning of s to take
 * @param s is the string containing the data
 */
inline double ReadFile::readDouble (unsigned int nbchar, char *a_s, int /*line*/,int& a_read_success)
{
    if (!a_read_success) return 0;

    /* optimize : all is ok with the .fog FOG file we have.
    if (a_s == NULL)
    {
        ::fprintf (stderr, "readDouble> string is set to NULL at line %d\n", line);
        a_read_success = false;
        return 0;
    }

    if (strlen (a_s) < nbchar)
    {
        ::fprintf (stderr, "readDouble> string too short to extract %d chars at line %d\n", nbchar, line);
        a_read_success = false;
        return 0;
	}*/

    char old_char = a_s[nbchar];
    a_s[nbchar] = '\0';
    char* ss;
    double retvalue = ::strtod(a_s,&ss);
    a_s[nbchar] = old_char;
    if( (ss==a_s) || (ss!=(a_s+nbchar)) ) {
      a_read_success = false;
      retvalue = 0;
    }
    return retvalue;
}

/**
 * @param line is used to debug errors in the file
 * @param nbchar is the number of chars at the beginning of s to take
 * @param s is the string containing the data
 */
inline char *ReadFile::readString (unsigned int nbchar, char *s, int line,int& a_read_success)
{
    if (!a_read_success) return NULL;
    if (s == NULL)
    {
        ::fprintf (stderr, "readString> string is set to NULL at line %d\n", line);
        a_read_success = false;
        return NULL;
    }
    if (strlen (s) < nbchar)
    {
        ::fprintf (stderr, "readString> string too short to extract %d chars at line %d\n", nbchar, line);
        a_read_success = false;
        return NULL;
    }
    char* dest = (char *) ::malloc ((nbchar + 1) * sizeof (char));
    if (dest ==NULL) {
        a_read_success = false;
        return NULL;
    }
    strncpy (dest, s, nbchar);
    dest[nbchar] = '\0';
    return dest;
}

inline bool sgets(char* a_s,unsigned int a_sz,const char* a_mx,char*& a_pos){
  //a_mx points to the last character.

  char* begin = a_pos;
  unsigned int n = 0;
  while(true){
    if((a_pos>a_mx)
     ||(*a_pos=='\n')
     ||(n>a_sz)
     ){
      ::memcpy(a_s,begin,n);
      a_s[n] = 0;
      a_pos++;
      return true;
    }
    a_pos++;n++;
  }
}


/**
 * Reads an ASCII file describing the scene and returns an object of the type SCENE
 * @param name  : the file name
 * @param scene : the structure returned
 * @return EXIT_FAILURE for error and EXIT_SUCCESS if everything's ok
 */
inline int ReadFile::readModelisationFile (const char name[], SCENE * scene)
{

    POVAMA_DEBUG ("ReadFile::readModelisationFile\n");
    const unsigned int L_MAX = 4096;    /* max length of a line */
    char string [L_MAX];
    char *substr;
    const unsigned int NB_SPACES = 10;

    FILE *fich;
    int i, j, line = 0;
    int read_success = true;

    //init
    scene->nbsv = 0;
    scene->nbobj = 0;
    scene->nbface = 0;
    scene->nbpt = 0;
    scene->nbcol =0;
    scene->tabsv=NULL;
    scene->tabobj=NULL;
    scene->tabface=NULL;
    scene->tabpt=NULL;
    scene->tabcol=NULL;
    fich = fopen (name, "r");

    if (!fich)
    {
        ::fprintf (stderr, "Couldn't open file %s\n", name);
        return (EXIT_FAILURE);
    }

    /* ------------------------------------------------------------------------- */
    /* Header Data */

    if(!fgets(string,L_MAX,fich)) read_success = false;
    line++;                     //nsv
    (scene->nbsv) = readInt (NB_SPACES, string, line,read_success);

    if(!fgets(string,L_MAX,fich)) read_success = false;
    line++;                     //nobj
    (scene->nbobj) = readInt (NB_SPACES, string, line,read_success);

    if(!fgets(string,L_MAX,fich)) read_success = false;
    line++;                     //nfac
    (scene->nbface) = readInt (NB_SPACES,  string, line,read_success);

    if(!fgets(string,L_MAX,fich)) read_success = false;
    line++;                     //npt
    (scene->nbpt) = readInt (NB_SPACES,  string, line,read_success);

    if (!read_success) {
      return EXIT_FAILURE;
    }

    POVAMA_DEBUG ("HEADER READ OK\n");
    /* ------------------------------------------------------------------- */
    /* COLOR */
    /* allocate memory for a table of scene->nbcol Rgb */
    scene->tabcol = (Rgb *) ::malloc (NB_COLORS() * sizeof (Rgb));
    if (scene->tabcol ==NULL) {
      malloc_error(NB_COLORS() * sizeof (Rgb));
      return EXIT_FAILURE;
    }
    scene->nbcol = NB_COLORS();

    for (i = 0; i < NB_COLORS(); i++)
    {                           /* loop on the colors */
      (scene->tabcol[i].r) = get_col(i)[0];
      (scene->tabcol[i].g) = get_col(i)[1];
      (scene->tabcol[i].b) = get_col(i)[2];
    }
    /* ------------------------------------------------------------------------- */
    /* POINT */
    /* allocation of memory for a table of scene->nbpt vecd */
    scene->tabpt = (fog_vec4d *) ::malloc (scene->nbpt * sizeof (fog_vec4d));
    if (scene->tabpt ==NULL) {
      malloc_error(scene->nbpt * sizeof (fog_vec4d));
      return EXIT_FAILURE;
    }

    for (i = 0; i < scene->nbpt; i++)
    {                           /* loop on points */
        /* read the 3 coord. */
        if(!fgets(string,L_MAX,fich)) read_success = false;
	line++;
	substr = subString (string,0, NB_SPACES - 1,read_success);
        (scene->tabpt[i].x) = readDouble (NB_SPACES, substr, line,read_success);
	::free(substr);
	substr = subString (string,NB_SPACES, 2 * NB_SPACES - 1,read_success);
        (scene->tabpt[i].y) = readDouble (NB_SPACES, substr, line,read_success);
	::free(substr);
	substr = subString (string,2 * NB_SPACES, 3 * NB_SPACES - 1,read_success);
        (scene->tabpt[i].z) = readDouble (NB_SPACES,substr, line,read_success);
	::free(substr);

	if (!read_success) return EXIT_FAILURE;

        (scene->tabpt[i].w) = 1.0; /* homogeneous coord */
    }
    POVAMA_DEBUG ("POINT READ OK\n");
  /*-----------------------------------------------------------------------*/
    /* FACE */
    /* allocate memory for a table of scene->nbface FACE */
    scene->tabface = (FACE *) ::malloc (scene->nbface * sizeof (FACE));
    if (scene->tabface ==NULL) {
      malloc_error(scene->nbface * sizeof (FACE));
      return EXIT_FAILURE;
    }
    for (i = 0; i < scene->nbface; i++)
      {                           /* init */
	scene->tabface[i].nbpt =0;
	scene->tabface[i].tabpt = NULL;
	scene->tabface[i].n.x= 0.0;
	scene->tabface[i].n.y= 0.0;
	scene->tabface[i].n.z= 0.0;
	scene->tabface[i].n.w= 0.0;
	scene->tabface[i].icol= 0;
	scene->tabface[i].extension = 0; /*G.Barrand.*/
    }

    for (i = 0; i < scene->nbface; i++)
    {                           /* loop on the faces */

        if(!fgets(string,L_MAX,fich)) read_success = false;
        line++;
	substr = subString (string,0, NB_SPACES - 1,read_success);
        scene->tabface[i].nbpt = readInt (NB_SPACES, substr, line,read_success); /* read np point for this face */
	::free(substr);

	substr = subString (string,NB_SPACES, 2 * NB_SPACES - 1,read_success);
        scene->tabface[i].icol = readInt (NB_SPACES, substr, line,read_success); /* read index of the color of the face */
	::free(substr);

	if (!read_success) return EXIT_FAILURE;

        /* alloc memory for scene->tabface[i].nbpt  INDEX_POINT */
        scene->tabface[i].tabpt = (INDEX_POINT *) ::malloc (scene->tabface[i].nbpt * sizeof (INDEX_POINT));
	if (scene->tabface[i].tabpt ==NULL) {
          malloc_error(scene->tabface[i].nbpt * sizeof (INDEX_POINT));
	  return EXIT_FAILURE;
	}

        if(!fgets(string,L_MAX,fich)) read_success = false;
	if (!read_success) return EXIT_FAILURE;
        line++;

        /* loop on the nbpt points in the face  */
        for (j = 0; j < scene->tabface[i].nbpt; j++)
        {
  	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
            (scene->tabface[i].tabpt[j]) = readInt (NB_SPACES, substr, line,read_success);
	    ::free(substr);
	    if (!read_success) return EXIT_FAILURE;

            if (scene->tabface[i].tabpt[j] >= scene->nbpt)
            {
                ::fprintf (stderr, "Point index too high, max expected: %d\n", scene->nbpt - 1);
                return (EXIT_FAILURE);
            }
        }

    }
    POVAMA_DEBUG ("FACE READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* OBJECTS */
    /* allocate memory for a table of nbobj OBJECT */
    scene->tabobj = (OBJECT *) ::malloc (scene->nbobj * sizeof (OBJECT));
    if (scene->tabobj ==NULL) {
      malloc_error(scene->nbobj * sizeof (OBJECT));
      return EXIT_FAILURE;
    }
    for (i = 0; i < scene->nbobj; i++) /* init */
      {
	scene->tabobj[i].nbface =0;
	scene->tabobj[i].tabface =NULL;
      }


    for (i = 0; i < scene->nbobj; i++) /* loop on the nbobj OBJECT */
    {
        /* read number of face in OBJECT i */
        if(!fgets(string,L_MAX,fich)) read_success = false;
        line++;
        scene->tabobj[i].nbface = readInt (NB_SPACES, string, line,read_success);
	if (!read_success) return EXIT_FAILURE;

        /* allocate memory for a table scene->tabobj[i].nbface of INDEX_FACE */
        scene->tabobj[i].tabface = (INDEX_FACE *) ::malloc (scene->tabobj[i].nbface * sizeof (INDEX_FACE));
	if (scene->tabobj[i].tabface ==NULL) {
          malloc_error(scene->tabobj[i].nbface * sizeof (INDEX_FACE));
	  return EXIT_FAILURE;
	}

        if(!fgets(string,L_MAX,fich)) read_success = false;
	if (!read_success) return EXIT_FAILURE;
        line++;

        /* loop on the nbpf faces of OBJECT */
        for (j = 0; j < scene->tabobj[i].nbface; j++)
        {
	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
	    (scene->tabobj[i].tabface[j]) = readInt (NB_SPACES, substr, line,read_success); /* read index of face j in OBJECT i */
	    ::free(substr);
	    if (!read_success) return EXIT_FAILURE;

            if (scene->tabobj[i].tabface[j] >= scene->nbface)
            {
                ::fprintf (stderr, "Face index too high, max expected: %d\n", scene->nbface - 1);
                return (EXIT_FAILURE);
            }
        }

    }
    POVAMA_DEBUG ("OBJECT READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* SVOLUME */
    /* allocate memory for a table of nbsv SVOLUME */
    scene->tabsv = (SVOLUME *) ::malloc (scene->nbsv * sizeof (SVOLUME));
    if (scene->tabsv ==NULL) {
      malloc_error(scene->nbsv * sizeof (SVOLUME));
      return EXIT_FAILURE;
    }
    for (i = 0; i < scene->nbsv; i++) /*init */
      {
        scene->tabsv[i].nbobj =0;
        scene->tabsv[i].tabobj =NULL;
        scene->tabsv[i].visible =0;
        scene->tabsv[i].transfo.tx = 0;
        scene->tabsv[i].transfo.ty = 0;
        scene->tabsv[i].transfo.tz = 0;
        scene->tabsv[i].transfo.thetax = 0;
        scene->tabsv[i].transfo.thetay = 0;
        scene->tabsv[i].transfo.thetaz = 0;
        scene->tabsv[i].name =NULL;
	scene->tabsv[i].filename = (char*) NULL;
	scene->tabsv[i].displayListNumber=0;
    }


    for (i = 0; i < scene->nbsv; i++) /* Loop on the number of SVOLUME */
    {
        scene->tabsv[i].filename = (char *) ::malloc ((strlen(name)+1) * sizeof (char));
	if (scene->tabsv[i].filename == NULL) {
          malloc_error((strlen(name)+1) * sizeof (char));
	  return EXIT_FAILURE;
	}
	strcpy (scene->tabsv[i].filename, name);

        /* sets the visible property to 0 (nothing is visible) */
        scene->tabsv[i].visible = 1;

        /* read number of object in SVOLUME i */
        if(!fgets(string,L_MAX,fich)) read_success = false;
        line++;
        (scene->tabsv[i].nbobj) = readInt (NB_SPACES, string, line,read_success);

        int decal = 5;
	substr = subString (string, NB_SPACES + decal, 2 * NB_SPACES - 1 + decal,read_success);
	scene->tabsv[i].name = readString (NB_SPACES, substr, line,read_success);
	::free(substr);

	if (!read_success) {
          ::fprintf (stderr, "readString failed\n");
          return EXIT_FAILURE;
        }

        /* allocate memory for a table scene->tabsv[i].nbobj of INDEX_OBJECT */

        scene->tabsv[i].tabobj = (INDEX_OBJECT *) ::malloc (scene->tabsv[i].nbobj * sizeof (INDEX_OBJECT));

	if (scene->tabsv[i].tabobj ==NULL) {
          malloc_error(scene->tabobj[i].nbface * sizeof (INDEX_FACE));
	  return EXIT_FAILURE;
	}
        if(!fgets(string,L_MAX,fich)) read_success = false;
	if (!read_success) {
          ::fprintf (stderr, "fgets failed\n");
          return EXIT_FAILURE;
        }
        line++;

        /* loop on the nbo INDEX_OBJECT */
        for (j = 0; j < scene->tabsv[i].nbobj; j++)
        {
	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
	    (scene->tabsv[i].tabobj[j]) = readInt (NB_SPACES, substr, line,read_success); /* read index of face j in OBJECT i */
	    ::free(substr);
	    if (!read_success) {
              ::fprintf (stderr, "readInt failed\n");
              return EXIT_FAILURE;
	    }
	    if (scene->tabsv[i].tabobj[j] >= scene->nbobj)
            {
                ::fprintf (stderr, "Obj index too high, max expected: %d\n", scene->nbobj - 1);
                return (EXIT_FAILURE);
            }
        }
    }
    POVAMA_DEBUG ("SV READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* Conclusion */

    if (fclose (fich) == EOF)
    {                           /*in case of pb while closing */
        ::fprintf (stderr, "Couldn't close file %s\n", name);
        return (EXIT_FAILURE);
    }

    if (!read_success) {
      ::fprintf (stderr, "we had read errors\n");
      return EXIT_FAILURE;
    }
    return (EXIT_SUCCESS);      /* everything is ok */

}

/**
 * Adds an ASCII file describing the scene and returns an object of the type SCENE
 * If this file has been already loaded, put all its volumes visible and don't load
 * it again
 * @param a_sz      : the buffer size
 * @param a_buffer  : the buffer
 * @param name  : the file name
 * @param scene : the structure returned
 * @return EXIT_FAILURE for error and EXIT_SUCCESS if everything's ok
 */
inline int ReadFile::addModelisationFile (unsigned int a_sz,const char* a_buffer, const char name[],SCENE * scene)
{

    POVAMA_DEBUG ("ReadFile::addModelisationFile\n");
    const unsigned int L_MAX = 4096;    /* max length of a line */
    char string [L_MAX];
    char *substr;
    const unsigned int NB_SPACES = 10;

    //FILE *fich;
    char* pos = (char*)a_buffer;
    char* bmx = (char*)a_buffer+a_sz-1;

    int i, j, line = 0;
    int read_success = true;


    /** Test if this file has been already loaded
     * if it is, put all its volumes visible and don't load it again
     */

    bool find = false;
    for (i = 0; i < scene->nbsv; i++) {
      if (strcmp(scene->tabsv[i].filename,name) == 0) {
	find = true;
        scene->tabsv[i].visible = 1;
      }
    }
    if (find == true){
      printf("not loaded, only set visible  %s\n",name);
      return (EXIT_SUCCESS);      /* everything is ok */
    }

/*
    fich = fopen (name, "r");

    if (!fich)
    {
        ::fprintf (stderr, "Couldn't open file %s\n", name);
        return (EXIT_FAILURE);
    }
*/

    SCENE *oldScene = (SCENE *) ::malloc (sizeof (SCENE));
    if (oldScene ==NULL) {
      malloc_error(sizeof (SCENE));
      return EXIT_FAILURE;
    }
    oldScene->nbsv = scene->nbsv;
    oldScene->nbobj = scene->nbobj;
    oldScene->nbface = scene->nbface;
    oldScene->nbpt = scene->nbpt;

    /* ------------------------------------------------------------------------- */
    /* Header Data */

    //if(!fgets(string,L_MAX,fich)) read_success = false;
    if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
    line++;                     //nsv
    (scene->nbsv) += readInt (NB_SPACES, string, line,read_success);

    //if(!fgets(string,L_MAX,fich)) read_success = false;
    if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
    line++;                     //nobj
    (scene->nbobj) += readInt (NB_SPACES,string, line,read_success);

    //if(!fgets(string,L_MAX,fich)) read_success = false;
    if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
    line++;                     //nfac
    (scene->nbface) += readInt (NB_SPACES,string, line,read_success);

    //if(!fgets(string,L_MAX,fich)) read_success = false;
    if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
    line++;                     //npt
    (scene->nbpt) += readInt (NB_SPACES, string, line,read_success);



    if (!read_success) {
      scene->tabsv=NULL;
      scene->tabobj=NULL;
      scene->tabface=NULL;
      scene->tabpt=NULL;
      scene->tabcol=NULL;
      scene->nbsv = 0;
      scene->nbobj = 0;
      scene->nbface = 0;
      scene->nbpt = 0;
      ::free(oldScene);
      return EXIT_FAILURE;
    }

    POVAMA_DEBUG ("HEADER READ OK\n");
    /* ------------------------------------------------------------------- */
    /* COLOR */
    /* allocate memory for a table of scene->nbcol RGB */
    // nothing to add

    /* ------------------------------------------------------------------------- */
    /* POINT */
    /* allocation of memory for a table of scene->nbpt fog_vec4d */
    scene->tabpt = (fog_vec4d *) realloc (scene->tabpt, scene->nbpt * sizeof (fog_vec4d));
    if (scene->tabpt ==NULL) {
      malloc_error(scene->nbpt * sizeof (fog_vec4d));
      scene->nbsv = oldScene->nbsv;
      scene->nbobj = oldScene->nbobj;
      scene->nbface = oldScene->nbface;
      scene->nbpt = oldScene->nbpt;
      ::free(oldScene);
      return EXIT_FAILURE;
    }

    for (i = oldScene->nbpt; i < scene->nbpt; i++)
    {                           /* loop on points */
        /* read the 3 coord. */
        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
        line++;

	substr = subString (string,0, NB_SPACES - 1,read_success);
        (scene->tabpt[i].x) = readDouble (NB_SPACES, substr, line,read_success);
	::free(substr);

	substr = subString (string,NB_SPACES, 2 * NB_SPACES - 1,read_success);
        (scene->tabpt[i].y) = readDouble (NB_SPACES, substr, line,read_success);
	::free(substr);

	substr = subString (string,2 * NB_SPACES, 3 * NB_SPACES - 1,read_success);
        (scene->tabpt[i].z) = readDouble (NB_SPACES,substr, line,read_success);
	::free(substr);

	if (!read_success) {
	  scene->nbsv = oldScene->nbsv;
	  scene->nbobj = oldScene->nbobj;
	  scene->nbface = oldScene->nbface;
	  scene->nbpt = oldScene->nbpt;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}
        (scene->tabpt[i].w) = 1.0; /* homogeneous coord */
    }
    POVAMA_DEBUG ("POINT READ OK\n");
  /*-----------------------------------------------------------------------*/
    /* FACE */
    /* allocate memory for a table of scene->nbface FACE */
    scene->tabface = (FACE *) realloc (scene->tabface, scene->nbface * sizeof (FACE));
    if (scene->tabface ==NULL) {
      malloc_error(scene->nbface * sizeof (FACE));
      scene->nbsv = oldScene->nbsv;
      scene->nbobj = oldScene->nbobj;
      scene->nbface = oldScene->nbface;
      scene->nbpt = oldScene->nbpt;

      ::free(oldScene);
      return EXIT_FAILURE;
    }
    for (i = oldScene->nbface; i < scene->nbface; i++)             /* init */
    {
	scene->tabface[i].nbpt =0;
	scene->tabface[i].tabpt = NULL;
	scene->tabface[i].n.x= 0.0;
	scene->tabface[i].n.y= 0.0;
	scene->tabface[i].n.z= 0.0;
	scene->tabface[i].n.w= 0.0;
	scene->tabface[i].icol= 0;
	scene->tabface[i].extension = 0; /*G.Barrand.*/
    }

    for (i = oldScene->nbface; i < scene->nbface; i++)
    {                           /* loop on the faces */

        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
        line++;

	substr = subString (string,0, NB_SPACES - 1,read_success);
        (scene->tabface[i].nbpt) = readInt (NB_SPACES, substr, line,read_success); /* read np point for this face */
	::free(substr);
	substr = subString (string,NB_SPACES, 2 * NB_SPACES - 1,read_success);
        (scene->tabface[i].icol) = readInt (NB_SPACES, substr, line,read_success); /* read index of the color of the face */
	::free(substr);
	if (!read_success) {
	  scene->nbsv = oldScene->nbsv;
	  scene->nbobj = oldScene->nbobj;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}
        /* alloc memory for scene->tabface[i].nbpt  INDEX_POINT */
        scene->tabface[i].tabpt = (INDEX_POINT *) ::malloc (scene->tabface[i].nbpt * sizeof (INDEX_POINT));
	if (scene->tabface[i].tabpt ==NULL) {
          malloc_error(scene->tabface[i].nbpt * sizeof (INDEX_POINT));
	  scene->nbsv = oldScene->nbsv;
	  scene->nbobj = oldScene->nbobj;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}

        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
	if (!read_success) {
	  scene->nbsv = oldScene->nbsv;
	  scene->nbobj = oldScene->nbobj;
	  ::free(oldScene);
	  return EXIT_FAILURE;
        }
	line++;

        /* loop on the nbpt points in the face  */
        for (j = 0; j < scene->tabface[i].nbpt; j++)
        {
	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
            (scene->tabface[i].tabpt[j]) = readInt (NB_SPACES, substr, line,read_success) + oldScene->nbpt; //shifting the point index
	    ::free(substr);
	    if (!read_success) {
		scene->nbsv = oldScene->nbsv;
		scene->nbobj = oldScene->nbobj;
		free (oldScene);
                return (EXIT_FAILURE);
            }
	    if (scene->tabface[i].tabpt[j] >= scene->nbpt)
            {
                ::fprintf (stderr, "Point index too high, max expected: %d\n", scene->nbpt - 1);
		scene->nbsv = oldScene->nbsv;
		scene->nbobj = oldScene->nbobj;
		free (oldScene);
                return (EXIT_FAILURE);
            }
        }

    }
    POVAMA_DEBUG ("FACE READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* OBJECTS */
    /* allocate memory for a table of nbobj OBJECT */
    scene->tabobj = (OBJECT *) realloc (scene->tabobj, scene->nbobj * sizeof (OBJECT));
    if (scene->tabobj ==NULL) {
      malloc_error(scene->nbobj * sizeof (OBJECT));
      scene->nbsv = oldScene->nbsv;
      scene->nbobj = oldScene->nbobj;
      ::free(oldScene);
      return EXIT_FAILURE;
    }
    for (i = oldScene->nbobj; i < scene->nbobj; i++) /* init */
    {
        scene->tabobj[i].tabface = (INDEX_FACE*) NULL;
        scene->tabobj[i].nbface = 0;
    }

    for (i = oldScene->nbobj; i < scene->nbobj; i++) /* loop on the nbobj OBJECT */
    {
        /* read number of face in OBJECT i */
        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
        line++;

        scene->tabobj[i].nbface = readInt (NB_SPACES, string, line,read_success);
	if (!read_success) {
	  scene->nbsv = oldScene->nbsv;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}
        /* allocate memory for a table scene->tabobj[i].nbface of INDEX_FACE */
        scene->tabobj[i].tabface = (INDEX_FACE *) ::malloc (scene->tabobj[i].nbface * sizeof (INDEX_FACE));
	if (scene->tabobj[i].tabface ==NULL) {
          malloc_error(scene->tabobj[i].nbface * sizeof (INDEX_FACE));
	  scene->nbsv = oldScene->nbsv;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}

        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
	if (!read_success) {
	  scene->nbsv = oldScene->nbsv;
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}
        line++;

        /* loop on the nbpf faces of OBJECT */
        for (j = 0; j < scene->tabobj[i].nbface; j++)
        {
	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
            (scene->tabobj[i].tabface[j]) = readInt (NB_SPACES, substr, line,read_success) /* read index of face j in OBJECT i */
                + oldScene->nbface;
	    ::free(substr);
	    if (!read_success) {
	        scene->nbsv = oldScene->nbsv;
		free (oldScene);
                return (EXIT_FAILURE);
            }
	    if (scene->tabobj[i].tabface[j] >= scene->nbface)
	      {
                ::fprintf (stderr, "Face index too high, max expected: %d\n", scene->nbface - 1);
		scene->nbsv = oldScene->nbsv;
		free (oldScene);
		return (EXIT_FAILURE);
	      }
        }

    }
    POVAMA_DEBUG ("OBJECT READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* SVOLUME */
    /* allocate memory for a table of nbsv SVOLUME */
    scene->tabsv = (SVOLUME *) realloc (scene->tabsv, scene->nbsv * sizeof (SVOLUME));
    if (scene->tabsv ==NULL) {
      malloc_error(scene->nbsv * sizeof (SVOLUME));
      scene->nbsv = oldScene->nbsv;
      ::free(oldScene);
      return EXIT_FAILURE;
    }
    for (i = oldScene->nbsv; i < scene->nbsv; i++) /* init */
    {
        scene->tabsv[i].nbobj =0;
        scene->tabsv[i].tabobj =NULL;
        scene->tabsv[i].visible =0;
        scene->tabsv[i].transfo.tx = 0;
        scene->tabsv[i].transfo.ty = 0;
        scene->tabsv[i].transfo.tz = 0;
        scene->tabsv[i].transfo.thetax = 0;
        scene->tabsv[i].transfo.thetay = 0;
        scene->tabsv[i].transfo.thetaz = 0;
        scene->tabsv[i].name =NULL;
	scene->tabsv[i].filename = (char*) NULL;
	scene->tabsv[i].displayListNumber=0;
    }

    for (i = oldScene->nbsv; i < scene->nbsv; i++) /* Loop on the number of SVOLUME */
    {
	scene->tabsv[i].filename = (char *) ::malloc ((strlen(name)+1) * sizeof (char));
	if (scene->tabsv[i].filename == NULL) {
          malloc_error((strlen(name)+1) * sizeof (char));
	  return EXIT_FAILURE;
	}
	strcpy (scene->tabsv[i].filename, name);

        /* sets the visible property to 0 (nothing is visible) */
        scene->tabsv[i].visible = 1;

        /* read number of object in SVOLUME i */
        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
        line++;

        scene->tabsv[i].nbobj = readInt (NB_SPACES, string, line,read_success);
        int decal = 5;
	substr = subString (string, NB_SPACES + decal, 2 * NB_SPACES - 1 + decal,read_success);
	scene->tabsv[i].name = readString (NB_SPACES, substr, line,read_success);
	::free(substr);
	if (!read_success) {
          ::fprintf (stderr, "readString(1) failed.\n");
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}

        /* allocate memory for a table scene->tabsv[i].nbobj of INDEX_OBJECT */
        scene->tabsv[i].tabobj = (INDEX_OBJECT *) ::malloc (scene->tabsv[i].nbobj * sizeof (INDEX_OBJECT));
	if (scene->tabsv[i].tabobj ==NULL) {
          malloc_error(scene->tabsv[i].nbobj * sizeof (INDEX_OBJECT));
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}

        //if(!fgets(string,L_MAX,fich)) read_success = false;
        if(!sgets(string,L_MAX,bmx,pos)) read_success = false;
	if (!read_success) {
          ::fprintf (stderr, "sgets failed.\n");
	  ::free(oldScene);
	  return EXIT_FAILURE;
	}
        line++;

        /* loop on the nbo INDEX_OBJECT */
        for (j = 0; j < scene->tabsv[i].nbobj; j++)
        {
	    substr = subString (string,NB_SPACES * j, NB_SPACES * (j + 1) - 1,read_success);
            (scene->tabsv[i].tabobj[j]) = readInt (NB_SPACES, substr, line,read_success) /* read index of face j in OBJECT i */
                + oldScene->nbobj;
	    ::free(substr);
	    if (!read_success) {
                ::fprintf (stderr, "readInt failed.\n");
		free (oldScene);
                return (EXIT_FAILURE);
            }
	    if  (scene->tabsv[i].tabobj[j] >= scene->nbobj)
            {
                ::fprintf (stderr, "Obj index too high, max expected: %d\n", scene->nbobj - 1);
		free (oldScene);
                return (EXIT_FAILURE);
            }
        }
    }
    POVAMA_DEBUG ("SV READ OK\n");
    /* ------------------------------------------------------------------------- */
    /* Conclusion */

    ::free(oldScene);
    oldScene = (SCENE*) NULL;

/*
    if (fclose (fich) == EOF)
    {
        ::fprintf (stderr, "Couldn't close file %s\n", name);
        return (EXIT_FAILURE);
    }
*/

    if (!read_success) {
      ::fprintf (stderr, "we had read errors.\n");
      return EXIT_FAILURE;
    }
    return (EXIT_SUCCESS);      /* everything is ok */

}

/**
 * displays the data of the scene
 * @param scene : a pointer to the scene
 * @param detail: the desired level of detail (1: header only, 2:all)
 */

inline void ReadFile::displayData (SCENE * scene, int detail)
{
    int i, j;

    if (detail == 0)
        return;

    printf ("---------------------------------------------\n");
    printf ("scene read :\n");
    printf ("number of super volumes :\t%d\n", scene->nbsv);
    printf ("number of objects       :\t%d\n", scene->nbobj);
    printf ("number of faces         :\t%d\n", scene->nbface);
    printf ("number of points        :\t%d\n", scene->nbpt);
    printf ("number of colors        :\t%d\n", scene->nbcol);
    printf ("---------------------------------------------\n");

    if (detail <= 1)
        return;

    for (i = 0; i < scene->nbsv; i++)
    {
        printf ("Svolume %d : %d objects\n", i, scene->tabsv[i].nbobj);
        printf ("\tobject index : ");
        for (j = 0; j < scene->tabsv[i].nbobj; j++)
        {
            printf ("\t%d\t", scene->tabsv[i].tabobj[j]);
        }
        printf ("\n");
    }
    printf ("---------------------------------------------\n");

    if (detail <= 2)
        return;

    for (i = 0; i < scene->nbobj; i++)
    {
        printf ("Object %d : %d faces\n", i, scene->tabobj[i].nbface);
        printf ("\tface index : ");
        for (j = 0; j < scene->tabobj[i].nbface; j++)
        {
            printf ("\t%d\t", scene->tabobj[i].tabface[j]);
        }
        printf ("\n");
    }
    printf ("---------------------------------------------\n");

    if (detail <= 3)
        return;

    for (i = 0; i < scene->nbface; i++)
    {
        printf ("Face %d : %d points\n", i, scene->tabface[i].nbpt);
        printf ("color index : \t%d\n", scene->tabface[i].icol);
        printf ("points index : ");
        for (j = 0; j < scene->tabface[i].nbpt; j++) /* loop on the nbpt points of the face */
            printf ("\t%d", scene->tabface[i].tabpt[j]);
        printf ("\n");
    }
    printf ("---------------------------------------------\n");

    if (detail <= 4)
        return;

    for (i = 0; i < scene->nbcol; i++)
    {
        printf ("Color num %d :\n", i);
        printf ("\tRGB \t= %g\t%g\t%g\n", scene->tabcol[i].r, scene->tabcol[i].g, scene->tabcol[i].b);
    }
    printf ("---------------------------------------------\n");

    if (detail <= 5)
        return;

    for (i = 0; i < scene->nbpt; i++)
    {
        printf ("Point no %d :\t%g\t%g\t%g\t%g\n", i, scene->tabpt[i].x, scene->tabpt[i].y, scene->tabpt[i].z, scene->tabpt[i].w);
    }
    printf ("---------------------------------------------\n");

}
