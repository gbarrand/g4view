// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_dirs
#define inlib_dirs

#include "sys/dir"

#include "path_words"
#include "sep"
#include "sout"

#include <ostream>
#include <sstream>

namespace inlib {

inline bool find_dir_with_dirs(std::ostream& a_out,
                               const std::vector<std::string>& a_dirs,
                               const std::string& a_dir,
                               std::string& a_path,
                               bool a_verbose = false ) {
  inlib_vforcit(std::string,a_dirs,it) {
    if((*it).empty()) {
      // with a "" in dirs, this case could solve :
      // - a_dir in the current directory.
      // - a_dir with an absolute path name.
      a_path = a_dir; //may be an absolute file name.
    } else {
      a_path = *it;
      a_path += sep();
      a_path += a_dir;
    }

    if(a_verbose) {
      a_out << "find_dir_with_dirs :"
            << " look for " << sout(a_path) << " ..."
            << std::endl;
    }

    bool is;
    if(dir::is_a(a_path,is)&&is) {
      if(a_verbose) {
        a_out << "find_dir_with_dirs :"
              << " found " << sout(a_path) << "."
              << std::endl;
      }
      return true;
    }
  }
  a_path.clear();

  if(a_verbose) {
    a_out << "find_dir_with_dirs :"
          << " " << sout(a_dir) << " not found."
          << std::endl;
  }

  return false;
}

inline bool mkdirs(std::ostream& a_out,
                   const std::string& a_path,
                   bool a_cd = false) {
  //By default it does not "cd" to the leaf directory.
  bool absolute;
  bool win_path;
  std::string drive;
  std::vector<std::string> dirs;
  path_words(a_path,dirs,absolute,win_path,drive);
  std::string spwd;
  if(!a_cd) {
    if(!dir::pwd(spwd)) {
      a_out << "inlib::mkdirs :"
            << " can't get current directory."
            << std::endl;
      return false;
    }
  }
  if(absolute) {
#ifdef _WIN32
    if(!dir::cd(drive+":\\")) {
      a_out << "inlib::mkdirs :"
            << " can't cd to C:\\"
            << std::endl;
      return false;
    }
#else
    if(!dir::cd("/")) {
      a_out << "inlib::mkdirs :"
            << " can't cd to /"
            << std::endl;
      return false;
    }
#endif
  }
  bool status = true;
  inlib_vforcit(std::string,dirs,it) {
    if(!dir::mkcd(*it)) {
      a_out << "inlib::mkdirs :"
            << " can't mkcd " << sout(*it)
            << std::endl;
      status = false;
      break;
    }
  }
  if(!a_cd) {
    //return to spwd :
    if(!dir::cd(spwd)) {
      a_out << "inlib::mkdirs :"
            << " can't cd to " << spwd << "."
            << std::endl;
      return false;
    }
  }
  return status;
}

inline bool mkdirs_from(std::ostream& a_out,
                        const std::string& a_from,
                        const std::string& a_path){ //relative path
  bool absolute;
  bool win_path;
  std::string drive;
  std::vector<std::string> dirs;
  path_words(a_path,dirs,absolute,win_path,drive);
  if(drive.size()) {
    a_out << "inlib::mkdirs_from :"
          << " path with a Windows drive not treated yet."
          << std::endl;
    return false;
  }
  if(absolute) {
    a_out << "inlib::mkdirs_from :"
          << " path " << sout(a_path) << " must be relative."
          << std::endl;
    return false;
  }

  std::string pwd;
  if(!dir::pwd(pwd)) {
    a_out << "inlib::mkdirs_from :"
          << " can't get current directory."
          << std::endl;
    return false;
  }

  if(!dir::cd(a_from)){
    a_out << "inlib::mkdirs_from :"
          << " can't cd to " << sout(a_from)
          << std::endl;
    return false;
  }

  bool status = true;
  inlib_vforcit(std::string,dirs,it) {
    if(!dir::mkcd(*it)) {
      a_out << "inlib::mkdirs_from :"
            << " can't mkcd " << sout(*it)
            << std::endl;
      status = false;
      break;
    }
  }

  if(!dir::cd(pwd)) {
    a_out << "inlib::mkdirs_from :"
          << " can't cd back to " << sout(pwd) << "."
          << std::endl;
    return false;
  }

  return status;
}

inline bool check_dir(std::ostream& a_out,const std::string& a_path) {
  //NOTE : if a_path.empty() it returns true.
  if(dir::in_fs(a_path)) return true;
  if(!mkdirs(a_out,a_path)) {
    a_out << "inlib::check_dir :"
          << " can't create directory " << sout(a_path) << "."
          << std::endl;
    return false;
  }
  return true;
}

inline bool create_out_dir(std::ostream& a_out,const std::string& a_app,
                           const std::string& a_name,unsigned int a_scale,
                           std::string& a_out_dir,std::string& a_data_dir,bool a_verbose = false) {
  std::string home_dir;
  dir::home(home_dir);
  if(a_verbose) a_out << "home_dir is " << home_dir << std::endl;

  a_data_dir = home_dir+sep()+"Documents"+sep()+a_app;
  if(a_verbose) a_out << "data_dir is " << a_data_dir << std::endl;

 {bool is;
  if(!dir::is_a(a_data_dir,is)) {
    a_out << "directory " << a_data_dir << " does not exists." << std::endl;
    a_out_dir.clear();
    a_data_dir.clear();
    return false;
  }}

  std::string out_dir_from_data = a_name+sep();
  std::ostringstream oss;
  oss << a_scale;
  out_dir_from_data += oss.str();

  a_out_dir = a_data_dir+sep()+out_dir_from_data;
  if(a_verbose) a_out << "out_dir is " << a_out_dir << std::endl;

 {bool is;
  if(!dir::is_a(a_out_dir,is)||!is) mkdirs_from(a_out,a_data_dir,out_dir_from_data);
  if(!dir::is_a(a_out_dir,is)||!is) {
    a_out << "directory " << a_out_dir << " does not exists." << std::endl;
    a_out_dir.clear();
    a_data_dir.clear();
    return false;
  }}

  return true;
}

}

#endif
