// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_node
#define inlib_rroot_geo_node

// it must not include geo_volume

#include "named"

#include "geo_pattern_finder"

namespace inlib {
namespace rroot {

class geo_node : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoNode");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_node");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_node>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_node_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_node>(this,a_class)) {return p;}
    else return 0;
  }
  //virtual cid id_cls() const {return id_class();}
public:
  virtual iro* copy() const {return new geo_node(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    std::string name;
    std::string title;  
    if(!Named_stream(a_buffer,name,title)) return false;

    if(!GeoAtt_stream(a_buffer)) return false;

    ifac::args args;

    //TGeoVolume* fVolume;         // volume associated with this
    if(!pointer_stream(a_buffer,m_fac,args,geo_volume_cid(),m_volume)) {
      a_buffer.out() << "inlib::rroot::geo_node::stream : "
                     << "can't read fVolume."
                     << std::endl;
      return false;
    }

    //TGeoVolume* fMother;         // mother volume
    if(!pointer_stream(a_buffer,m_fac,args,geo_volume_cid(),m_mother)) {
      a_buffer.out() << "inlib::rroot::geo_node::stream : "
                     << "can't read fMother."
                     << std::endl;
      return false;
    }

    int fNumber;         // copy number
    if(!a_buffer.read(fNumber)) return false;

    int fNovlp;          // number of overlaps
    if(!a_buffer.read(fNovlp)) return false;

    //Int_t* fOverlaps; //[fNovlp] list of indices for overlapping brothers
    if(!dummy_array_stream<int>(a_buffer,fNovlp)) return false;

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }
public:
  geo_node(ifac& a_fac)
  :m_fac(a_fac)
  ,m_volume(0)
  ,m_mother(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_node(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_node(const geo_node& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_volume(a_from.m_volume)
  ,m_mother(a_from.m_mother)
  {}
  geo_node& operator=(const geo_node& a_from){
    m_volume = a_from.m_volume;
    m_mother = a_from.m_mother;
    return *this;
  }
public:
  const geo_volume* volume() const {return m_volume;}
  geo_volume* volume() {return m_volume;}
  const geo_volume* mother() const {return m_mother;}
  geo_volume* mother() {return m_mother;}
protected:
  ifac& m_fac;
  geo_volume* m_volume;
  geo_volume* m_mother;
};

class geo_node_offset : public geo_node {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoNodeOffset");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_node_offset");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_node_offset>(this,a_class)) return p;
    return geo_node::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_node_offset(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!geo_node::stream(a_buffer)) return false;

    if(!a_buffer.read(m_offset)) return false;
    if(!a_buffer.read(m_index)) return false;

    //TGeoPatternFinder* fFinder; // finder for this node
    ifac::args args;
    if(!pointer_stream(a_buffer,m_fac,args,m_finder)) {
      a_buffer.out() << "inlib::rroot::geo_node_offset::stream : "
                     << "can't read fFinder."
                     << std::endl;
      return false;
    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  static cid id_class() {return geo_node_offset_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_node_offset>(this,a_class)) {return p;}
    else return geo_node::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}

public:
  geo_node_offset(ifac& a_fac)
  :geo_node(a_fac)
  ,m_offset(0)
  ,m_index(0)
  ,m_finder(0) //not owner
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_node_offset(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_node_offset(const geo_node_offset& a_from)
  :iro(a_from)
  ,geo_node(a_from)
  ,m_offset(a_from.m_offset)
  ,m_index(a_from.m_index)
  ,m_finder(a_from.m_finder)
  {}
  geo_node_offset& operator=(const geo_node_offset& a_from){
    geo_node::operator=(a_from);
    m_offset = a_from.m_offset;
    m_index = a_from.m_index;
    m_finder = a_from.m_finder;
    return *this;
  }
public:
  const geo_pattern_finder* finder() const {return m_finder;}
  geo_pattern_finder* finder() {return m_finder;}

  double offset() const {return m_offset;}
  int index() const {return m_index;}
protected:
  double m_offset; // X offset for this node with respect to its mother
  int m_index;     // index of this node in the division
  geo_pattern_finder* m_finder;
};

}}

#endif
