// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_node
#define inlib_rroot_geo_node

// it must not include geo_volume

#include "named"
#include "geo_cids"

namespace inlib {
namespace rroot {
  class geo_volume;
}}

namespace inlib {
namespace rroot {

class geo_node : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoNode");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_node");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_node>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_node_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_node>(this,a_class)) {return p;}
    else return 0;
  }
  //virtual cid id_cls() const {return id_class();}
public:
  virtual iro* copy() const {return new geo_node(*this);}
  virtual bool stream(buffer& a_buffer) {
    _clear();

    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    std::string name;
    std::string title;
    if(!Named_stream(a_buffer,name,title)) return false;

    if(!GeoAtt_stream(a_buffer)) return false;

    ifac::args args;

    //TGeoVolume* fVolume;         // volume associated with this
    if(!pointer_stream(a_buffer,m_fac,args,geo_volume_cid(),m_volume,m_volume_created)) {
      a_buffer.out() << "inlib::rroot::geo_node::stream : "
                     << "can't read fVolume."
                     << std::endl;
      _clear();
      return false;
    }
    //TGeoVolume* fMother;         // mother volume
    if(!pointer_stream(a_buffer,m_fac,args,geo_volume_cid(),m_mother,m_mother_created)) {
      a_buffer.out() << "inlib::rroot::geo_node::stream : "
                     << "can't read fMother."
                     << std::endl;
      _clear();
      return false;
    }

    int fNumber;         // copy number
    if(!a_buffer.read(fNumber)) {_clear();return false;}

    int fNovlp;          // number of overlaps
    if(!a_buffer.read(fNovlp)) {_clear();return false;}

    //Int_t* fOverlaps; //[fNovlp] list of indices for overlapping brothers
    if(!dummy_array_stream<int>(a_buffer,fNovlp)) {_clear();return false;}

    if(!a_buffer.check_byte_count(s,c,s_store_class())) {_clear();return false;}
    return true;
  }
public:
  typedef void(*destroy_volume_func)(geo_volume*&);
  static destroy_volume_func& get_destroy_volume_func() { //used in geo_manager.
    static destroy_volume_func s_destroy_volume_func = 0; //WARNING : static writeable is not thread safe.
    return s_destroy_volume_func;
  }
public:
  geo_node(ifac& a_fac)
  :m_fac(a_fac)
  ,m_volume(0)
  ,m_volume_created(false)
  ,m_mother(0)
  ,m_mother_created(false)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_node(){
    _clear();
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_node(const geo_node& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_volume(a_from.m_volume)
  ,m_volume_created(a_from.m_volume_created)
  ,m_mother(a_from.m_mother)
  ,m_mother_created(a_from.m_mother_created)
  {}
  geo_node& operator=(const geo_node& a_from){
    m_volume = a_from.m_volume;
    m_volume_created = a_from.m_volume_created;
    m_mother = a_from.m_mother;
    m_mother_created = a_from.m_mother_created;
    return *this;
  }
public:
  const geo_volume* volume() const {return m_volume;}
  geo_volume* volume() {return m_volume;}
  const geo_volume* mother() const {return m_mother;}
  geo_volume* mother() {return m_mother;}
protected:
  void _clear() {
    if(!get_destroy_volume_func()) {
      m_fac.out() << "inlib::rroot::geo_node::_clear :"
                  << " no destroy_volume_func set. Can't delete m_volume and m_mother (if needed)."
		  << std::endl;
    } else {
      if(m_volume_created) {get_destroy_volume_func()(m_volume);m_volume = 0;m_volume_created = false;}
      if(m_mother_created) {get_destroy_volume_func()(m_mother);m_mother = 0;m_mother_created = false;}
    }
  }
protected:
  ifac& m_fac;
  geo_volume* m_volume;
  bool m_volume_created;
  geo_volume* m_mother;
  bool m_mother_created;
};

}}

#endif
