// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_matrix
#define inlib_rroot_geo_matrix

#include "named"

#include "geo_cids"

namespace inlib {
namespace rroot {

class geo_matrix : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoMatrix");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_matrix");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_matrix>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_matrix(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;
    std::string name;
    std::string title;  
    if(!Named_stream(a_buffer,name,title)) return false;
    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  static cid id_class() {return geo_matrix_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_matrix>(this,a_class)) {return p;}
    else return 0;
  }
  virtual cid id_cls() const {return id_class();}

public:
  geo_matrix(ifac& a_fac):m_fac(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_matrix(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_matrix(const geo_matrix& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  {}
  geo_matrix& operator=(const geo_matrix&){return *this;}
public:
  const ifac& fac() const {return m_fac;}
  ifac& fac() {return m_fac;}
protected:
  ifac& m_fac;
};

template <class T>
inline const T* cast_matrix(const geo_matrix& a_matrix) {
  return id_cast<geo_matrix,T>(a_matrix);
}

template <class T>
inline T* cast_matrix(geo_matrix& a_matrix) {
  return id_cast<geo_matrix,T>(a_matrix);
}
  
}}

#endif
