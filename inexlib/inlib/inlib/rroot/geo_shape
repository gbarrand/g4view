// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_shape
#define inlib_rroot_geo_shape

#include "named"
#include "geo_cids"

namespace inlib {
namespace rroot {

class geo_shape : public virtual iro {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_shape");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_shape>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_shape(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!Named_stream(a_buffer,m_name,m_title)) return false;

    int fShapeId;   // shape id
    if(!a_buffer.read(fShapeId)) return false;

    unsigned int fShapeBits; // shape bits
    if(!a_buffer.read(fShapeBits)) return false;

    if(!a_buffer.check_byte_count(s,c,"TGeoShape")) return false;
    return true;
  }
public:
  virtual void dump(std::ostream&) const {}
public:
  static cid id_class() {return geo_shape_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_shape>(this,a_class)) {return p;}
    else return 0;
  }
  virtual cid id_cls() const {return id_class();}
public:
  geo_shape(ifac& a_fac):m_fac(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_shape(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }	
public:
  geo_shape(const geo_shape& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_name(a_from.m_name)
  ,m_title(a_from.m_title)
  {}
  geo_shape& operator=(const geo_shape& a_from){
    m_name = a_from.m_name;
    m_title = a_from.m_title;
    return *this;
  }
public:
  const std::string& name() const {return m_name;}
  const std::string& title() const {return m_title;}
protected:
  ifac& m_fac;
  std::string m_name;
  std::string m_title;
};

template <class T>
inline const T* cast_shape(const geo_shape& a_shape) {
  return id_cast<geo_shape,T>(a_shape);
}
template <class T>
inline T* cast_shape(geo_shape& a_shape) {
  return id_cast<geo_shape,T>(a_shape);
}
  
}}

#endif
