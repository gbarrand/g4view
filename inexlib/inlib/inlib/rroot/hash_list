// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_hash_list
#define inlib_rroot_hash_list

#include "obj_list"

//#include "../vmanip"
//#include "cids"

namespace inlib {
namespace rroot {

class hash_list : public obj_list {
  typedef obj_list parent;
private:
  static const std::string& s_store_class() {
    static const std::string s_v("THashList");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::hash_list");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<hash_list>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return hash_list_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<hash_list>(this,a_class)) {return p;}
    return parent::cast(a_class);
  }
public:
  virtual bool stream(buffer& a_buffer) {
    uint32 startpos = a_buffer.length();
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    //if(!parent::stream(a_buffer)) return false;

    a_buffer.set_offset(startpos+c+sizeof(unsigned int));
    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  hash_list(ifac& a_fac)
  :parent(a_fac)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~hash_list(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  hash_list(const hash_list& a_from):iro(a_from),parent(a_from){}
  hash_list& operator=(const hash_list& a_from){parent::operator=(a_from);return *this;}
};

/*
inline bool dummy_TList_pointer_stream(buffer& a_buffer,ifac& a_fac,bool a_owner,bool a_warn) {
  obj_list l(a_fac,true,true);
  return l.stream(a_buffer);
}
inline bool dummy_THashList_pointer_stream(buffer& a_buffer,ifac& a_fac,bool a_owner,bool a_warn) {
  hash_list l(a_fac,true,true);
  return l.stream(a_buffer);
}
*/

}}

#endif
