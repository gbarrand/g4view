// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_element
#define inlib_rroot_geo_element

#include "named"

#include "geo_cids"

namespace inlib {
namespace rroot {

class geo_element : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoElement");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_element");
    return s_v;
  }
  virtual const std::string& s_cls() const {return s_class();}
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_element>(this,a_class)) return p;
    return 0;
  }
public:
  static cid id_class() {return geo_element_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_element>(this,a_class)) {return p;}
    else return 0;
  }
public:
  virtual iro* copy() const {return new geo_element(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    //::printf("debug : geo_element::stream : v %d\n",v);

    std::string name;
    std::string title;
    if(!Named_stream(a_buffer,name,title)) return false;

    int fZ;          // Z of element
    if(!a_buffer.read(fZ)) return false;

    int fNisotopes = 0;
    if(v>=3) {
      int fN;          // Number of nucleons
      if(!a_buffer.read(fN)) return false;

      //Int_t fNisotopes;  // Number of isotopes for the element
      if(!a_buffer.read(fNisotopes)) return false;
    }

    double fA;          // A of element
    if(!a_buffer.read(fA)) return false;

    if(v>=3) { //EsbRoot/geo_full.root has v = 3.

      //TObjArray* fIsotopes;   // List of isotopes
      if(!dummy_TXxx_pointer_stream(a_buffer,m_fac)) {
        a_buffer.out() << "inlib::rroot::geo_element::stream : "
                       << "can't read fIsotopes."
                       << std::endl;
        return false;
      }

      //Double_t* fAbundances; //[fNisotopes] Array of relative isotope abundances
      if(!dummy_array_stream<double>(a_buffer,fNisotopes)) return false;

      double fCoulomb;          // Coulomb correction factor
      if(!a_buffer.read(fCoulomb)) return false;

      double fRadTsai;          // Tsai formula for the radiation length
      if(!a_buffer.read(fRadTsai)) return false;

    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_element(ifac& a_fac):m_fac(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_element(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_element(const geo_element& a_from):iro(a_from),m_fac(a_from.m_fac){}
  geo_element& operator=(const geo_element&){return *this;}
protected:
  ifac& m_fac;
};

}}

#endif
