// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_element
#define inlib_rroot_geo_element

#include "named"

#include "geo_cids"

namespace inlib {
namespace rroot {

class geo_element : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoElement");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_element");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_element>(this,a_class)) return p;
    return 0;
  }
public:
  static cid id_class() {return geo_element_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_element>(this,a_class)) {return p;}
    else return 0;
  }
public:
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    std::string name;
    std::string title;  
    if(!Named_stream(a_buffer,name,title)) return false;

    int fZ;          // Z of materia{}
    if(!a_buffer.read(fZ)) return false;

    double fA;          // A of material
    if(!a_buffer.read(fA)) return false;

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_element(){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_element(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_element(const geo_element& a_from): iro(a_from){}
  geo_element& operator=(const geo_element&){return *this;}
};

}}

#endif
