// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_scaled_shape
#define inlib_rroot_geo_scaled_shape

#include "geo_bbox"
#include "geo_matrices"

namespace inlib {
namespace rroot {

class geo_scaled_shape : public geo_bbox {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoScaledShape");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_scaled_shape");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_scaled_shape>(this,a_class)) return p;
    return geo_bbox::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_scaled_shape(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!geo_bbox::stream(a_buffer)) return false;

    ifac::args args;

    //TGeoShape* fShape;     // pointer to an existing shape
    if(!pointer_stream(a_buffer,m_fac,args,m_shape)) {
      a_buffer.out() << "inlib::rroot::geo_scaled_shape::stream : "
                     << "can't read fShape."
                     << std::endl;
      return false;
    }

    //TGeoScale* fScale;     // pointer to a scale transformation
    if(!pointer_stream(a_buffer,m_fac,args,m_scale)) {
      a_buffer.out() << "inlib::rroot::geo_scaled_shape::stream : "
                     << "can't read fScale."
                     << std::endl;
      return false;
    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  static cid id_class() {return geo_scaled_shape_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_scaled_shape>(this,a_class)) {return p;}
    else return geo_bbox::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}

public:
  geo_scaled_shape(ifac& a_fac)
  :geo_bbox(a_fac)
  ,m_shape(0)
  ,m_scale(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_scaled_shape(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_scaled_shape(const geo_scaled_shape& a_from)
  :iro(a_from)
  ,geo_bbox(a_from)
  ,m_shape(a_from.m_shape)
  ,m_scale(a_from.m_scale)
  {}
  geo_scaled_shape& operator=(const geo_scaled_shape& a_from){
    geo_bbox::operator=(a_from);
    m_shape = a_from.m_shape;
    m_scale = a_from.m_scale;
    return *this;
  }
public:
  const geo_shape* shape() const {return m_shape;}
  geo_shape* shape() {return m_shape;}

  const geo_scale* scale() const {return m_scale;}
  geo_scale* scale() {return m_scale;}
protected:
  geo_shape* m_shape;
  geo_scale* m_scale;
};

}}

#endif
