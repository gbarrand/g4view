// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_bbox
#define inlib_rroot_geo_bbox

#include "geo_shape"

namespace inlib {
namespace rroot {

class geo_bbox : public geo_shape {
  typedef geo_shape parent;
private:
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoBBox");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_bbox");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_bbox>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_bbox(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!parent::stream(a_buffer)) return false;

    if(!a_buffer.read(m_d_x)) return false;
    if(!a_buffer.read(m_d_y)) return false;
    if(!a_buffer.read(m_d_z)) return false;
    if(!a_buffer.read_fast_array(m_origin,3)) return false;
/*
    a_buffer.out() << "debug : geo_bbox::stream :"
                   << " m_d_x " << m_d_x
                   << " m_d_y " << m_d_y
                   << " m_d_z " << m_d_z
                   << " m_origin[0] " << m_origin[0]
                   << " m_origin[1] " << m_origin[1]
                   << " m_origin[2] " << m_origin[2]
                   << std::endl;
*/
    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }
  virtual void dump(std::ostream& a_out,const std::string& a_indent = std::string()) const {
    parent::dump(a_out,a_indent);
    a_out << a_indent << "bbox :"
          << " d_x " << m_d_x
          << ", d_y " << m_d_y
          << ", d_z " << m_d_z
          << ", o_x " << m_origin[0]
          << ", o_y " << m_origin[1]
          << ", o_z " << m_origin[2]
          << std::endl;
  }

public:
  static cid id_class() {return geo_bbox_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_bbox>(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}
public:
  geo_bbox(ifac& a_fac)
  :parent(a_fac)
  ,m_d_x(0)
  ,m_d_y(0)
  ,m_d_z(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    for(unsigned int i=0;i<3;i++) m_origin[i] = 0;
  }
  virtual ~geo_bbox(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_bbox(const geo_bbox& a_from)
  :iro(a_from)
  ,parent(a_from)
  ,m_d_x(a_from.m_d_x)
  ,m_d_y(a_from.m_d_y)
  ,m_d_z(a_from.m_d_z)
  {
    for(unsigned int i=0;i<3;i++) m_origin[i] = a_from.m_origin[i];
  }
  geo_bbox& operator=(const geo_bbox& a_from){
    parent::operator=(a_from);
    m_d_x = a_from.m_d_x;
    m_d_y = a_from.m_d_y;
    m_d_z = a_from.m_d_z;
    for(unsigned int i=0;i<3;i++) m_origin[i] = a_from.m_origin[i];
    return *this;
  }
public:
  double d_x() const {return m_d_x;}
  double d_y() const {return m_d_y;}
  double d_z() const {return m_d_z;}
  //const double* origin() const {return m_origin;}
  double origin_x() const {return m_origin[0];}
  double origin_y() const {return m_origin[1];}
  double origin_z() const {return m_origin[2];}

  void set_d_x(double a_v) {m_d_x = a_v;}
  void set_d_y(double a_v) {m_d_y = a_v;}
  void set_d_z(double a_v) {m_d_z = a_v;}
  void set_origin(const double a_v[3]) {
    m_origin[0] = a_v[0];
    m_origin[1] = a_v[1];
    m_origin[2] = a_v[2];
  }
protected:
  //NOTE : m_dx,m_dy,m_d_z may clash with derived classes.
  double m_d_x;        // X half-length
  double m_d_y;        // Y half-length
  double m_d_z;        // Z half-length
  double m_origin[3]; // box origin
};

}}

#endif
