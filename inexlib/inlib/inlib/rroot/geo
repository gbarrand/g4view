// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo
#define inlib_rroot_geo

#include "../sg/geo"

#include "shape2ph"
#include "geo_volume"
#include "geo_node_matrix"
#include "geo_pattern_finder"
#include "geo_node_offset"

#include "../sg/polyhedron"

namespace inlib {
namespace rroot {

class geo : public sg::geo<geo_volume,mat4f> {
  typedef sg::geo<geo_volume,mat4f> parent;
public:
  INLIB_SCLASS(inlib::rroot::geo)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new geo(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  geo(const geo_volume& a_vol)
  :parent()

  ,m_vol(a_vol)
  ,m_tess(0)
  ,m_check_shapes(false)
  {}
  virtual ~geo(){
    delete m_tess;
  }
public:
  geo(const geo& a_from)
  :parent(a_from)

  ,m_vol(a_from.m_vol)
  ,m_tess(0)
  ,m_check_shapes(false)
  {}
  geo& operator=(const geo& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  virtual void update_sg(std::ostream& a_out) {
    if(!begin_update_sg(a_out)) return;

    unsigned int depth = 0;

    mat4f& matrix = m_mtxs[depth];
    matrix.set_identity();

    if(!m_tess) m_tess = new sg::tessellate(a_out); //for xtru
    _vis_volume(a_out,m_vol,matrix,depth);
    m_tess->clear();

    end_update_sg(a_out);
  }

  virtual const std::string& volume_name(const geo_volume& a_vol) const {return a_vol.name();}

  virtual bool volume_material_color(std::ostream& a_out,const geo_volume& a_vol,colorf& a_color) {
    short coli = a_vol.line_color();
  //short coli = a_vol.fill_color();
    if(!m_cmap.get_color(coli,a_color)) {
      a_out << "color index " << coli
            << " not found in colormap."
            << std::endl;
      a_color = color.value();
      return false;
    }
    return true;
  }

  virtual bool add_shape(std::ostream& a_out,const geo_volume& a_vol,const mat4f& a_matrix,sg::separator& a_sep,bool a_solid) {
    if(!sep_add_shape(a_out,a_sep,*(a_vol.shape()),a_matrix,a_solid)) {
      a_out << "inlib::rroot::geo::add_shape :"
            << " sep_add_shape failed."
            << " vol " << a_vol.name()
            << " shape " << a_vol.shape()->s_cls()
            << std::endl;
      return false;
    }
    m_shape_count++;
    return true;
  }

  virtual bool vis_children(std::ostream& a_out,const geo_volume& a_vol,const mat4f& a_matrix,unsigned int a_depth) {

    const std::vector<geo_node*>* nodes = a_vol.nodes();
    if(!nodes) return true;

    inlib_vforcit(geo_node*,*nodes,it) {

      const geo_node* _node = *it;

      if(_node->mother()!=(&a_vol)) {
        a_out << "inlib::rroot::vis_children :"
              << " mother mismatch."
              << " a_vol " << a_vol.name()
              //<< " vol " << vol->name()
              << " node cls " << _node->s_cls()
              << std::endl;
      }

      mat4f& mtx = m_mtxs[a_depth+1];

      if(const geo_node_matrix* node_matrix = id_cast<geo_node,geo_node_matrix>(*_node)){

        const geo_volume* vol = node_matrix->volume();

        const geo_matrix* gmtx = node_matrix->matrix();

        if(cast_matrix<geo_identity>(*gmtx)) {
          if(!_vis_volume(a_out,*vol,a_matrix,a_depth+1)) return false;

        } else if(const geo_hmatrix* ghmatrix = cast_matrix<geo_hmatrix>(*gmtx)) {

          // The below matches what is done in TEveTrans::SetFrom()

          const double* sc = ghmatrix->scale();
          const double* tr = ghmatrix->trans();
          const double* rt = ghmatrix->matrix();
          mtx.set_matrix
        (float(rt[0]*sc[0]),float(rt[1]*sc[1]),float(rt[2]*sc[2]),float(tr[0]),
         float(rt[3]*sc[0]),float(rt[4]*sc[1]),float(rt[5]*sc[2]),float(tr[1]),
         float(rt[6]*sc[0]),float(rt[7]*sc[1]),float(rt[8]*sc[2]),float(tr[2]),
                          0,                 0,                 0,          1);

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;
        } else {
          mtx = a_matrix;
          if(!mul_mtx(a_out,*gmtx,mtx)) {
            a_out << "inlib::rroot::geo::vis_children :"
                  << " mul_mtx failed."
                  << " vol " << vol->name()
                  << " shape " << vol->shape()->s_cls()
                  << std::endl;
          }
          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;
        }

      } else if(const geo_node_offset* node_offset = id_cast<geo_node,geo_node_offset>(*_node)){

        const geo_pattern_finder* pf = node_offset->finder();

        //a_out << " dummy : geo_node_offset : pattern_finder :"
        //          << " step " << pf->step()
        //          << " start " << pf->start()
        //          << " end " << pf->end()
        //          << " current " << pf->current()
        //          << " divisions " << pf->divisions()
        //          << " div_index " << pf->div_index()
        //          << " volname " << node_offset->volume()->name()
        //          << " pf_matrix_cls " << pf->matrix()->s_cls()
        //          << std::endl;

        const geo_volume* vol = node_offset->volume();

        //int ndiv = pf->divisions();

        //double offset = pf->start()+node_offset->index()*pf->step();
        double offset = node_offset->offset(); //???

        if(//const geo_pattern_cyl_phi* cyl_phi =
               cast_pattern_finder<geo_pattern_cyl_phi>(*pf)){

          offset *= deg2rad();
          //const geo_matrix* gmtx = pf->matrix();

          mtx = a_matrix;

          //mul_mtx(*gmtx,mtx); //???
          mtx.mul_rotate(0,0,1,float(offset));

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(//const geo_pattern_x* patx =
           cast_pattern_finder<geo_pattern_x>(*pf)){

          mtx = a_matrix;

          mtx.mul_translate(float(offset),0,0);

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(//const geo_pattern_y* paty =
           cast_pattern_finder<geo_pattern_y>(*pf)){

          mtx = a_matrix;

          mtx.mul_translate(0,float(offset),0);

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(const geo_pattern_z* patz = cast_pattern_finder<geo_pattern_z>(*pf)){

          mtx = a_matrix;

          mtx.mul_translate(0,0,patz->is_reflected()?-float(offset):float(offset));

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(//const geo_pattern_para_x* parx =
                    cast_pattern_finder<geo_pattern_para_x>(*pf)){

          mtx = a_matrix;

          // See TGeoPatternParaX::cd().
          mtx.mul_translate(float(offset),0,0);

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(const geo_pattern_para_y* pary = cast_pattern_finder<geo_pattern_para_y>(*pf)){

          mtx = a_matrix;

          // See TGeoPatternParaY::cd().
          mtx.mul_translate(float(offset*pary->txy()),float(offset),0);

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(const geo_pattern_para_z* parz = cast_pattern_finder<geo_pattern_para_z>(*pf)){

          mtx = a_matrix;

          // See TGeoPatternParaY::cd().
          mtx.mul_translate(float(offset*parz->txz()),
                            float(offset*parz->tyz()),
                            parz->is_reflected()?-float(offset):float(offset));

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(const geo_pattern_trap_z* trapz = cast_pattern_finder<geo_pattern_trap_z>(*pf)){

          mtx = a_matrix;

          // See TGeoPatternTrapZ::cd().
          mtx.mul_translate(float(offset*trapz->txz()),
                            float(offset*trapz->tyz()),
                            trapz->is_reflected()?-float(offset):float(offset));

          if(!_vis_volume(a_out,*vol,mtx,a_depth+1)) return false;

        } else if(//const geo_pattern_cyl_r* cyl_r =
                  cast_pattern_finder<geo_pattern_cyl_r>(*pf)){

          //NOTE : from what we understand in TGeoTube::Divide,
          //       we have nothing to do.
          if(!_vis_volume(a_out,*vol,a_matrix,a_depth+1)) return false;

        } else {
          a_out << " dummy : geo_node_offset : " << pf->s_cls()
                    << ", vol : " << vol->name()
                    << ", shape : " << vol->shape()->s_cls()
                    << std::endl;
        }

      } else {

        a_out << " iro " << (*it)->s_cls() << std::endl;

      }
    }

    return true;
  }

protected:
  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////

  bool sep_add_shape(std::ostream& a_out,
                            sg::separator& a_sep,
                            const geo_shape& a_shape,
                            const mat4f& a_matrix,
                            bool a_solid) {

    //::printf("debug : %s\n",a_shape.s_cls().c_str());

    sg::polyhedron* _node = m_check_shapes?&m_check_node:new sg::polyhedron();
    _node->solid = a_solid;
    //_node->reduced_wire_frame = false;

    hep::polyhedron& ph = _node->ph.value();

    if(!shape_set_polyhedron(a_out,a_shape,ph,m_phs,m_tess)) {
      a_out << "inlib::rroot::geo::sep_add_shape :"
            << " shape_set_polyhedron failed for shape " << a_shape.s_cls()
            << std::endl;
      a_shape.dump(a_out);
      if(!m_check_shapes) delete _node;
      return false;
    }

    if(m_check_shapes) {m_phs.clear();return true;}

    if(m_phs.empty()) {
      hep::tsf_polyhedron(ph,a_matrix);
      a_sep.add(_node);

    } else {
      //a set of hep::polyhedrons from a geo_xtru.
      delete _node;

      inlib_vforcit(hep::polyhedron,m_phs,it) {
        _node = new sg::polyhedron();
        _node->solid = a_solid;
        //_node->reduced_wire_frame = false;
        hep::polyhedron& _ph = _node->ph.value();
        _ph = *it;
        hep::tsf_polyhedron(_ph,a_matrix);
        a_sep.add(_node);
      }
      m_phs.clear();
    }

    return true;
  }

protected:
  const geo_volume& m_vol;

  //optimization
  sg::tessellate* m_tess; //for xtru
  std::vector<hep::polyhedron> m_phs;

  sg::polyhedron m_check_node;
public:
  bool m_check_shapes;
};

}}

#endif
