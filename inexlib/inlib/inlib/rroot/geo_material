// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_material
#define inlib_rroot_geo_material

#include "../sout"
#include "geo_element"

namespace inlib {
namespace rroot {

class geo_material : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoMaterial");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_material");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_material>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_material_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_material>(this,a_class)) {return p;}
    else return 0;
  }
public:
  virtual iro* copy() const {return new geo_material(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    //a_buffer.out() << " debug : geo_material : vers " << v << std::endl;

    std::string name;
    std::string title;  
    if(!Named_stream(a_buffer,name,title)) return false;

   {short color,style;
    if(!AttFill_stream(a_buffer,color,style)) return false;}

    int fIndex;      // material index
    if(!a_buffer.read(fIndex)) return false;
    double fA;          // A of material
    if(!a_buffer.read(fA)) return false;
    double fZ;          // Z of material
    if(!a_buffer.read(fZ)) return false;
    double fDensity;    // density of material
    if(!a_buffer.read(fDensity)) return false;
    double fRadLen;     // radiation length
    if(!a_buffer.read(fRadLen)) return false;
    double fIntLen;     // interaction length
    if(!a_buffer.read(fIntLen)) return false;

    if(v>3) { //lhcb_mag.root has v = 3.
      double fTemperature; // temperature
      if(!a_buffer.read(fTemperature)) return false;
      double fPressure;   // pressure
      if(!a_buffer.read(fPressure)) return false;

      //EGeoMaterialState        fState;      // material state
      int fState;      // material state
      if(!a_buffer.read(fState)) return false;
    }

    //TObject* fShader;     // shader with optical properties
    if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
      a_buffer.out() << "inlib::rroot::geo_material::stream : "
                     << "can't read fShader."
                     << std::endl;
      return false;
    }

    if(v>3) {

    //TObject* fCerenkov;   // pointer to class with Cerenkov properties
    if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
      a_buffer.out() << "inlib::rroot::geo_material::stream : "
                     << "can't read fCerenkov."
                     << std::endl;
      return false;
    }

    //TGeoElement* fElement;    // pointer to element composing the material
    if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
      a_buffer.out() << "inlib::rroot::geo_material::stream : "
                     << "can't read fElement."
                     << std::endl;
      return false;
    }

    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_material(ifac& a_fac)
  :m_fac(a_fac)
  ,m_index(0)
  ,m_A(0)
  ,m_Z(0)
  ,m_density(0)
  ,m_rad_len(0)
  ,m_int_len(0)
  ,m_temperature(0)
  ,m_pressure(0)
  ,m_state(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_material(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_material(const geo_material& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_index(a_from.m_index)
  ,m_A(a_from.m_A)
  ,m_Z(a_from.m_Z)
  ,m_density(a_from.m_density)
  ,m_rad_len(a_from.m_rad_len)
  ,m_int_len(a_from.m_int_len)
  ,m_temperature(a_from.m_temperature)
  ,m_pressure(a_from.m_pressure)
  ,m_state(a_from.m_state)
  {}
  geo_material& operator=(const geo_material& a_from){
    m_index = a_from.m_index;
    m_A = a_from.m_A;
    m_Z = a_from.m_Z;
    m_density = a_from.m_density;
    m_rad_len = a_from.m_rad_len;
    m_int_len = a_from.m_int_len;
    m_temperature = a_from.m_temperature;
    m_pressure = a_from.m_pressure;
    m_state = a_from.m_state;
    return *this;
  }
public:
  int index() const {return m_index;}
  double A() const {return m_A;}
  double Z() const {return m_Z;}
  double density() const {return m_density;}
  double rad_len() const {return m_rad_len;}
  double int_len() const {return m_int_len;}
  double temperature() const {return m_temperature;}
  double pressure() const {return m_pressure;}
  int state() const {return m_state;}
protected:
  ifac& m_fac;

  int m_index;         // material index
  double m_A;          // A of material
  double m_Z;          // Z of material
  double m_density;    // density of material
  double m_rad_len;    // radiation length
  double m_int_len;     // interaction length
  double m_temperature; // temperature
  double m_pressure;   // pressure
  //EGeoMaterialState        m_state;      // material state
  int m_state;         // material state
};

class geo_mixture : public geo_material {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoMixture");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_mixture");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_mixture>(this,a_class)) return p;
    return geo_material::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_mixture_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_mixture>(this,a_class)) {return p;}
    return geo_material::cast(a_class);
  }
public:
  virtual iro* copy() const {return new geo_mixture(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;
	
    // version 5 and 3 handled.

    //a_buffer.out() << " debug : geo_mixture : vers " << v << std::endl;

    if(!geo_material::stream(a_buffer)) return false;

    int fNelements;  // number of elements
    if(!a_buffer.read(fNelements)) return false;

    //Double_t* fZmixture;   // [fNelements] array of Z of the elements
    if(!dummy_array_stream<double>(a_buffer,fNelements)) return false;

    //Double_t* fAmixture;   // [fNelements] array of A of the elements
    if(!dummy_array_stream<double>(a_buffer,fNelements)) return false;

    //Double_t* fWeights; // [fNelements] array of relative proportions by mass
    if(!dummy_array_stream<double>(a_buffer,fNelements)) return false;

    if(v>=2) { //lhcb_mag.root has v = 1.
      //Int_t* fNatoms;     // [fNelements] array of numbers of atoms
      if(!dummy_array_stream<int>(a_buffer,fNelements)) return false;

      //TObjArray* fElements;   // array of elements composing the mixture
      if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
        a_buffer.out() << "inlib::rroot::geo_mixture::stream : "
                       << "can't read fElements."
                       << std::endl;
        return false;
      }
    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_mixture(ifac& a_fac):geo_material(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_mixture(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_mixture(const geo_mixture& a_from):iro(a_from),geo_material(a_from){}
  geo_mixture& operator=(const geo_mixture&){return *this;}
};

}}

#endif
