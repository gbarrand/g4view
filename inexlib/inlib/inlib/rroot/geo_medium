// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_medium
#define inlib_rroot_geo_medium

#include "named"
#include "geo_material"

namespace inlib {
namespace rroot {

class geo_medium : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoMedium");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_medium");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_medium>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_medium_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_medium>(this,a_class)) {return p;}
    else return 0;
  }
public:
  virtual iro* copy() const {return new geo_medium(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    std::string name;
    std::string title;  
    if(!Named_stream(a_buffer,name,title)) return false;

    int fId;         // unique Id
    if(!a_buffer.read(fId)) return false;

    double fParams[20]; // parameters
    if(!a_buffer.read_fast_array(fParams,20)) return false;

    //TGeoMaterial* fMaterial;   // pointer to material
    ifac::args args;
    if(!pointer_stream(a_buffer,m_fac,args,m_material)) {
      a_buffer.out() << "inlib::rroot::geo_medium::stream : "
                     << "can't read fMaterial."
                     << std::endl;
      return false;
    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_medium(ifac& a_fac)
  :m_fac(a_fac)
  ,m_material(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_medium(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_medium(const geo_medium& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_material(a_from.m_material)
  {}
  geo_medium& operator=(const geo_medium& a_from){
    m_material = a_from.m_material;
    return *this;
  }
public:
  const geo_material* material() const {return m_material;}
  geo_material* material() {return m_material;}
protected:
  ifac& m_fac;
  geo_material* m_material;
};

}}

#endif
