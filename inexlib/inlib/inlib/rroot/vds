// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_vds
#define inlib_rroot_vds

// to read an ascii file containing rows of :
//   <string:volume name> <uint:volume depth>

#include "../file"
#include "../words"
#include "../sto"

namespace inlib {

inline bool read_vds(const std::string& a_file,
                std::vector< std::pair<std::string,unsigned int> >& a_vds) {
  a_vds.clear();

  FILE* file = ::fopen(a_file.c_str(),"rb");
  if(!file) return false;
  unsigned int BUFSIZE = 65536;
  char* buffer = new char[BUFSIZE+1];
  if(!buffer) {::fclose(file);return false;}
  while(true) {
    size_t l;
    if(!file::read_cstring(file,buffer,BUFSIZE,l)) break; // EOF.

    std::vector<std::string> ws;
    words(buffer," ",false,ws);

    unsigned int depth;
    if( (ws.size()!=2) || !to<unsigned int>(ws[1],depth) ) {
      delete [] buffer;
      ::fclose(file);
      return false;
    }
 
    a_vds.push_back(std::pair<std::string,unsigned int>(ws[0],depth));

  }
  delete [] buffer;
  ::fclose(file);

  return true;
}

}

#endif
