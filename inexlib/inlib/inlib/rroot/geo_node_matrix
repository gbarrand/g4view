// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_node_matrix
#define inlib_rroot_geo_node_matrix

#include "geo_node"
#include "geo_matrix"

namespace inlib {
namespace rroot {

class geo_node_matrix : public geo_node {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoNodeMatrix");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_node_matrix");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_node_matrix>(this,a_class)) return p;
    return geo_node::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
  virtual iro* copy() const {return new geo_node_matrix(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!geo_node::stream(a_buffer)) return false;

    //TGeoMatrix* fMatrix; // transf. matrix of fNode in fMother system
    ifac::args args;
    if(!pointer_stream(a_buffer,m_fac,args,m_matrix)) {
      a_buffer.out() << "inlib::rroot::geo_node_matrix::stream : "
                     << "can't read fMatrix."
                     << std::endl;
      return false;
    }

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  static cid id_class() {return geo_node_matrix_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_node_matrix>(this,a_class)) {return p;}
    else return geo_node::cast(a_class);
  }
  virtual cid id_cls() const {return id_class();}

public:
  geo_node_matrix(ifac& a_fac)
  :geo_node(a_fac)
  ,m_matrix(0) //not owner
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_node_matrix(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_node_matrix(const geo_node_matrix& a_from)
  :iro(a_from)
  ,geo_node(a_from)
  ,m_matrix(a_from.m_matrix)
  {}
  geo_node_matrix& operator=(const geo_node_matrix& a_from){
    geo_node::operator=(a_from);
    m_matrix = a_from.m_matrix;
    return *this;
  }
public:
  const geo_matrix* matrix() const {return m_matrix;}
  geo_matrix* matrix() {return m_matrix;}
protected:
  geo_matrix* m_matrix;
};

}}

#endif
