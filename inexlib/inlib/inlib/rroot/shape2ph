// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_shape2ph
#define inlib_rroot_shape2ph

#include "mul_mtx"

#include "../hep/polyhedron"
#include "../mathd"
#include "../lina/vec3f"
#include "../lina/vec4f"
#include "../lina/rotf"

#include "geo_shapes"
#include "geo_scaled_shape"
#include "geo_xtru"
#include "geo_bool_node"

#include "../sg/primitive_visitor"

#include "../sg/tessellate" //for xtru

namespace inlib {
namespace rroot {

inline void set_rotate_to(mat4f& a_matrix,const vec3f& a_to){
  rotf r(vec3f(0,0,1),a_to);
  mat4f amtx;
  r.value(amtx);
  a_matrix = amtx;
}

class add_ph : public sg::primitive_visitor {
public:
  virtual bool project(float&,float&,float&,float&) {return true;}
  virtual bool add_point(float,float,float,float) {return false;}
  virtual bool add_point(float,float,float,float,
                         float,float,float,float) {return false;}
  virtual bool add_line(float,float,float,float,
                        float,float,float,float) {return false;}
  virtual bool add_line(float,float,float,float,float,float,float,float,
                        float,float,float,float,float,float,float,float) {
    return false;
  }

  virtual bool add_triangle(float a_p1x,float a_p1y,float /*a_p1z*/,float,
                            float a_p2x,float a_p2y,float /*a_p2z*/,float,
                            float a_p3x,float a_p3y,float /*a_p3z*/,float){

    double pxs[3];
    pxs[0] = a_p1x;
    pxs[1] = a_p2x;
    pxs[2] = a_p3x;

    double pys[3];
    pys[0] = a_p1y;
    pys[1] = a_p2y;
    pys[2] = a_p3y;

    double xv,yv,xw,yw,cross_z;
    xv = a_p2x-a_p1x;
    yv = a_p2y-a_p1y;
    xw = a_p3x-a_p2x;
    yw = a_p3y-a_p2y;
    cross_z = xv*yw-yv*xw;
    bool acw = cross_z>0?true:false;

/*
    ::printf("debug : add_triangle :\n");
    ::printf("debug : 0 : %g %g %g\n",a_p1x,a_p1y,a_p1z);
    ::printf("debug : 1 : %g %g %g\n",a_p2x,a_p2y,a_p2z);
    ::printf("debug : 2 : %g %g %g\n",a_p3x,a_p3y,a_p3z);
    ::printf("debug : acw %d\n",acw);
*/

    double* xs = new double[m_nz*3];
    double* ys = new double[m_nz*3];
   {int i,j;
    for(j=0;j<3;j++) {
      for(i=0;i<m_nz;i++) {
        xs[i*3+j] = m_scales[i]*pxs[j]+m_x0s[i];
        ys[i*3+j] = m_scales[i]*pys[j]+m_y0s[i];
      }
    }}

    m_phs.push_back(hep::polyhedron());
    hep::polyhedron& rph = m_phs.back();

    //hep::polyhedron rph;
    if(!rph.set_polyhedron_xtru(3,m_nz,xs,ys,m_zs,acw,false)) {
      m_out << "inlib::rroot::add_ph::add_triangle :"
            << " right set_polyhedron_xtru failed."
            << std::endl;
      delete [] xs;
      delete [] ys;
      return false;
    }

  /*
    hep::BooleanProcessor processor; //G.Barrand
    int err;
    hep::polyhedron res;
    res = processor.execute(hep::OP_UNION,a_ph,rph,err);
    if(err) {
      a_out << "inlib::rroot::add_triangle :"
            << " boolean operation add failed."
            << std::endl;
      a_out << " 0 : " << a_p1x << " " << a_p1y << " " << a_p1z << std::endl;
      a_out << " 1 : " << a_p2x << " " << a_p2y << " " << a_p2z << std::endl;
      a_out << " 2 : " << a_p3x << " " << a_p3y << " " << a_p3z << std::endl;
      a_out << " acw " << acw << std::endl;
      //a_p3z = a_p2z = a_p1z = 0;
      delete [] xs;
      delete [] ys;
      return false;
    }
    a_ph = res;
*/

    delete [] xs;
    delete [] ys;

    return true;
  }

  virtual bool add_triangle(float a_p1x,float a_p1y,float a_p1z,float a_p1w,
                            float,float,float,float,
                            float a_p2x,float a_p2y,float a_p2z,float a_p2w,
                            float,float,float,float,
                            float a_p3x,float a_p3y,float a_p3z,float a_p3w,
                            float,float,float,float){
    return add_ph::add_triangle(a_p1x,a_p1y,a_p1z,a_p1w,
                                a_p2x,a_p2y,a_p2z,a_p2w,
                                a_p3x,a_p3y,a_p3z,a_p3w);
  }

  virtual bool project_normal(float& a_x,float& a_y,float& a_z) {return true;}
  virtual bool add_point_normal(float a_x,float a_y,float a_z,float a_w,
                                float a_nx,float a_ny,float a_nz) {return false;}
  virtual bool add_point_normal(float a_x,float a_y,float a_z,float a_w,
                                float a_nx,float a_ny,float a_nz,
                                float a_r,float a_g,float a_b,float a_a) {return false;}
  virtual bool add_line_normal(float a_bx,float a_by,float a_bz,float a_bw,
                               float a_bnx,float a_bny,float a_bnz,
                               float a_ex,float a_ey,float a_ez,float a_ew,
                               float a_enx,float a_eny,float a_enz) {return false;}
  virtual bool add_line_normal(float a_bx,float a_by,float a_bz,float a_bw,
                               float a_bnx,float a_bny,float a_bnz,
                               float a_br,float a_bg,float a_bb,float a_ba,
                               float a_ex,float a_ey,float a_ez,float a_ew,
                               float a_enx,float a_eny,float a_enz,
                               float a_er,float a_eg,float a_eb,float a_ea){return false;}
  virtual bool add_triangle_normal(
      float a_p1x,float a_p1y,float a_p1z,float a_p1w,
      float a_n1x,float a_n1y,float a_n1z,
      float a_p2x,float a_p2y,float a_p2z,float a_p2w,
      float a_n2x,float a_n2y,float a_n2z,
      float a_p3x,float a_p3y,float a_p3z,float a_p3w,
      float a_n3x,float a_n3y,float a_n3z) {
      add_ph::add_triangle(a_p1x,a_p1y,a_p1z,a_p1w,
                           a_p2x,a_p2y,a_p2z,a_p2w,
                           a_p3x,a_p3y,a_p3z,a_p3w);
      return true;
    }
    virtual bool add_triangle_normal(
      float a_p1x,float a_p1y,float a_p1z,float a_p1w,
      float a_n1x,float a_n1y,float a_n1z,
      float a_r1,float a_g1,float a_b1,float a_a1,
      float a_p2x,float a_p2y,float a_p2z,float a_p2w,
      float a_n2x,float a_n2y,float a_n2z,
      float a_r2,float a_g2,float a_b2,float a_a2,
      float a_p3x,float a_p3y,float a_p3z,float a_p3w,
      float a_n3x,float a_n3y,float a_n3z,
      float a_r3,float a_g3,float a_b3,float a_a3){
      add_ph::add_triangle(a_p1x,a_p1y,a_p1z,a_p1w,
                           a_r1,a_g1,a_b1,a_a1,
                           a_p2x,a_p2y,a_p2z,a_p2w,
                           a_r2,a_g2,a_b2,a_a2,
                           a_p3x,a_p3y,a_p3z,a_p3w,
                           a_r3,a_g3,a_b3,a_a3);
      return true;
    }
public:
  add_ph(std::ostream& a_out,
         hep::polyhedron& a_ph,
         std::vector<hep::polyhedron>& a_phs,
         int a_nz,double* a_zs,
         double* a_scales,double* a_x0s,double* a_y0s)
  :m_out(a_out)
  ,m_ph(a_ph)
  ,m_phs(a_phs)

  ,m_nz(a_nz)
  //not owner
  ,m_zs(a_zs)
  ,m_scales(a_scales)
  ,m_x0s(a_x0s)
  ,m_y0s(a_y0s)
  {}
  virtual ~add_ph(){}
protected:
  add_ph(const add_ph& a_from)
  :primitive_visitor(a_from)
  ,m_out(a_from.m_out)
  ,m_ph(a_from.m_ph)
  ,m_phs(a_from.m_phs)

  ,m_nz(a_from.m_nz)
  //not owner
  ,m_zs(a_from.m_zs)
  ,m_scales(a_from.m_scales)
  ,m_x0s(a_from.m_x0s)
  ,m_y0s(a_from.m_y0s)
  {}
  add_ph& operator=(const add_ph& a_from){
    primitive_visitor::operator=(a_from);

    if(&a_from==this) return *this;

    m_nz = a_from.m_nz;

    m_zs = a_from.m_zs;
    m_scales = a_from.m_scales;
    m_x0s = a_from.m_x0s;
    m_y0s = a_from.m_y0s;
    return *this;
  }
protected:
  std::ostream& m_out;
  hep::polyhedron& m_ph;
  std::vector<hep::polyhedron>& m_phs;

  int m_nz;
  //not owner :
  double* m_zs;
  double* m_scales;
  double* m_x0s;
  double* m_y0s;
};

inline bool shape_set_polyhedron(std::ostream& a_out,
                                 const geo_shape& a_shape,
                                 hep::polyhedron& a_ph,
                                 std::vector<hep::polyhedron>& a_phs,
                                 sg::tessellate* a_tess){

    a_phs.clear();
    int nstep = 24;

     // not yet treated
    if(cast_shape<geo_half_space>(a_shape)){

      a_out << " no polyhedron for shape " << a_shape.s_cls() << std::endl;
      return false;

    } else if(const geo_ctub* ctub = cast_shape<geo_ctub>(a_shape)){
      //must be before tube_seg.

      hep::polyhedron_tubs tubs(ctub->rmin(),ctub->rmax(),ctub->dz(),ctub->phi1()*deg2rad(),
                                (ctub->phi2() - ctub->phi1())*deg2rad(),
                                nstep);

      double sz = ::sqrt(ctub->rmax()*ctub->rmax()+ctub->dz()*ctub->dz());
      sz *= 20;

      hep::polyhedron_box cut_low(sz,sz,sz);
     {cut_low.Translate(0,0,-sz); //then in xy plane.
      const double* norm = ctub->low();
      mat4f mtx;
      set_rotate_to(mtx,vec3f(float(norm[0]),float(norm[1]),float(norm[2])));
      hep::tsf_polyhedron(cut_low,mtx);
      cut_low.Translate(0,0,-ctub->dz());}

      hep::polyhedron_box cut_high(sz,sz,sz);
     {cut_high.Translate(0,0,-sz); //then in xy plane.
      const double* norm = ctub->high();
      mat4f mtx;
      set_rotate_to(mtx,vec3f(float(norm[0]),float(norm[1]),float(norm[2])));
      hep::tsf_polyhedron(cut_high,mtx);
      cut_high.Translate(0,0,ctub->dz());}

      hep::polyhedron cut_min_z = tubs.intersect(cut_low);
      a_ph = cut_min_z.intersect(cut_high);

    } else if(const geo_tube_seg* tubs = cast_shape<geo_tube_seg>(a_shape)){
      //must be before tube.

      return a_ph.set_polyhedron_tubs(tubs->rmin(),tubs->rmax(),tubs->dz(),
                                      tubs->phi1()*deg2rad(),
                                      (tubs->phi2() - tubs->phi1())*deg2rad(),
                                      nstep);

    } else if(const geo_hype* hype = cast_shape<geo_hype>(a_shape)){
      //must be before tube.

      return a_ph.set_polyhedron_hype(hype->st_in()*deg2rad(),
                              hype->st_out()*deg2rad(),
                              hype->rmin(),hype->rmax(),hype->dz(),
                              10,nstep);

    } else if(const geo_eltu* eltu = cast_shape<geo_eltu>(a_shape)){
      //must be before tube.

      return a_ph.set_polyhedron_eltu(eltu->a(),eltu->b(),eltu->dz(),
                                     10,nstep);

    } else if(const geo_tube* tube = cast_shape<geo_tube>(a_shape)){

      return a_ph.set_polyhedron_tube(tube->rmin(),tube->rmax(),tube->dz());

    } else if(const geo_cone_seg* cons = cast_shape<geo_cone_seg>(a_shape)){
      //must be before cone.

      return a_ph.set_polyhedron_cons(cons->rmin1(),cons->rmax1(),
                              cons->rmin2(),cons->rmax2(),
                              cons->dz(),
                              cons->phi1()*deg2rad(),
                              (cons->phi2() - cons->phi1())*deg2rad(),
                              nstep);

    } else if(const geo_torus* torus = cast_shape<geo_torus>(a_shape)){

      return a_ph.set_polyhedron_torus(torus->rmin(),torus->rmax(),
                               torus->r(),
                               torus->phi()*deg2rad(),
                               torus->dphi()*deg2rad(),
                               nstep,nstep);

    } else if(const geo_xtru* xtru = cast_shape<geo_xtru>(a_shape)){


      //if(!xtru->poly()) {
        //a_out << " xtru has no geo_polygon." << std::endl;
        //return false;
      //}

      int npts = xtru->nvert();
      int nz = xtru->nz();

      if((npts<=2)||(nz<=1)) {
        a_out << "inlib::rroot::shape_set_polyhedron :"
              << " xtru : bad npts or nz points."
              << std::endl;
        return false;
      }

      double* pxs = xtru->xs(); //npts
      double* pys = xtru->ys(); //npts
      double* zs = xtru->zs(); //nz
      double* scales = xtru->scales(); //nz
      double* x0s = xtru->x0s(); //nz
      double* y0s = xtru->y0s(); //nz

      // it is expected a clockwise polygon from geo_xtru.
     {bool convex = true;
      double xv = pxs[1]-pxs[0];
      double yv = pys[1]-pys[0];
      double xw,yw,cross_z;
      for(int j=2;j<npts;j++) {
        xw = pxs[j]-pxs[j-1];
        yw = pys[j]-pys[j-1];
        //z of cross :
        //  xv  xw
        //  yv  yw
        //   0   0
        cross_z = xv*yw-yv*xw;
        if(cross_z>0) {convex = false;break;}
        xv = xw;
        yv = yw;
      }
      if(convex) { // check seg(n-2,n-1) to seg(n-1,0)
        xw = pxs[0]-pxs[npts-1];
        yw = pys[0]-pys[npts-1];
        cross_z = xv*yw-yv*xw;
        if(cross_z>0) convex = false;
        xv = xw;
        yv = yw;
      }
      if(convex) { // check seg(n-1,0) to seg(0,1)
        xw = pxs[1]-pxs[0];
        yw = pys[1]-pys[0];
        cross_z = xv*yw-yv*xw;
        if(cross_z>0) convex = false;
      }

      if(!convex) {

        //a_out << "inlib::rroot::shape_set_polyhedron :"
        //      << " xtru : not convex polygon."
        //      << std::endl;

        if(!a_tess) {
          a_out << "inlib::rroot::shape_set_polyhedron :"
                << " xtru : no tessellate object given."
                << std::endl;
          return false;
        }

        double* solid_doubles = new double[npts*3];
       {double* pos = solid_doubles;
        for(int j=0;j<npts;j++) {
          *pos = pxs[j];pos++;
          *pos = pys[j];pos++;
          *pos =      0;pos++;
        }}

        sg::tessellate::prims_t prims;
        a_tess->do_it(npts,solid_doubles,prims);
        delete [] solid_doubles;

        add_ph aph(a_out,a_ph,a_phs,nz,zs,scales,x0s,y0s);

        sg::tessellate::prims_t::const_iterator it;
        for(it=prims.begin();it!=prims.end();++it) {
          const sg::tess_prim& item = *(*it);
          const std::vector<float>& coords = item.m_coords;

          const float* data = vec_data<float>(coords);

          if(item.m_mode==gl::triangle_strip()){
            if(!aph.add_triangle_strip(coords.size(),data,false)) {
              a_out << "inlib::rroot::shape_set_polyhedron :"
                    << " xtru : add_triangle_strip failed."
                    << std::endl;
              xtru->dump_4_rshape(a_out);
              raw_clear(prims);
              return false;
            }
          } else if(item.m_mode==gl::triangle_fan()){
            if(!aph.add_triangle_fan(coords.size(),data,false)) {
              a_out << "inlib::rroot::shape_set_polyhedron :"
                    << " xtru : add_triangle_fan failed."
                    << std::endl;
              xtru->dump_4_rshape(a_out);
              raw_clear(prims);
              return false;
            }
          } else if(item.m_mode==gl::triangles()){
            if(!aph.add_triangles(coords.size(),data,false)) {
              a_out << "inlib::rroot::shape_set_polyhedron :"
                    << " xtru : add_triangles failed."
                    << std::endl;
              xtru->dump_4_rshape(a_out);
              raw_clear(prims);
              return false;
            }
          }

        }

        raw_clear(prims);

        return true;

      } else {
        //a_out << "debug : found convex." << std::endl;
      }}

      double* xs = new double[nz*npts];
      double* ys = new double[nz*npts];

      //int indn = xtru->poly()->nvert();
      int* inds = xtru->poly()?xtru->poly()->inds():0; //usage ???

      //::printf("debug : xtru : npts %d, indn %d, nz %d\n",npts,indn,nz);
      //NOTE : hep::polyhedron_xtru wants xs,ysanticlockwise
      //       and z(+ to -) ordering.
     {int i,j,jj;
      for(j=0;j<npts;j++) {
        jj = inds?inds[j]:j;
        //::printf("debug :  -> %d : %d : %g %g\n",j,inds[j],pxs[jj],pys[jj]);
        for(i=0;i<nz;i++) {
          xs[i*npts+j] = scales[i]*pxs[jj]+x0s[i];
          ys[i*npts+j] = scales[i]*pys[jj]+y0s[i];
        }
      }}

      bool status = a_ph.set_polyhedron_xtru(npts,nz,xs,ys,zs,false,false);
      delete [] xs;
      delete [] ys;
      if(!status) {
        a_out << "inlib::rroot::shape_set_polyhedron :"
              << " xtru : set_polyhedron_xtru failed."
              << std::endl;
        return false;
      }

    } else if(const geo_cone* cone = cast_shape<geo_cone>(a_shape)){

      return a_ph.set_polyhedron_cone(cone->rmin1(),cone->rmax1(),
                              cone->rmin2(),cone->rmax2(),
                              cone->dz(),nstep);

    } else if(const geo_trd1* trd1 = cast_shape<geo_trd1>(a_shape)){

      return a_ph.set_polyhedron_trd1(trd1->dx1(),trd1->dx2(),
                                     trd1->dy(),trd1->dz());

    } else if(const geo_trd2* trd2 = cast_shape<geo_trd2>(a_shape)){

      return a_ph.set_polyhedron_trd2(trd2->dx1(),trd2->dx2(),
                                     trd2->dy1(),trd2->dy2(),
                                     trd2->dz());

    } else if(const geo_sphere* sphere = cast_shape<geo_sphere>(a_shape)){

      return a_ph.set_polyhedron_sphere(sphere->rmin(),sphere->rmax(),
                         sphere->phi1()*deg2rad(),
                         (sphere->phi2()-sphere->phi1())*deg2rad(),
                         sphere->theta1()*deg2rad(),
                         (sphere->theta2()-sphere->theta1())*deg2rad(),
                         sphere->nseg(),
                         sphere->nz());

    } else if(const geo_para* para = cast_shape<geo_para>(a_shape)){

      return a_ph.set_polyhedron_para(para->dx(),para->dy(),para->dz(),
                              para->alpha()*deg2rad(),
                              para->theta()*deg2rad(),
                              para->phi()*deg2rad());

    } else if(const geo_gtra* gtra = cast_shape<geo_gtra>(a_shape)){
      //must be before trap.

      return a_ph.set_polyhedron_arb8(gtra->dz(),gtra->xy());

    } else if(const geo_trap* trap = cast_shape<geo_trap>(a_shape)){

      //in principle we could have used a_ph.set_polyhedron_arb8() too.

      return a_ph.set_polyhedron_trap(trap->dz(),
                              trap->theta()*deg2rad(),
                              trap->phi()*deg2rad(),
                              trap->h1(),trap->bl1(),trap->tl1(),
                              trap->alpha1()*deg2rad(),
                              trap->h2(),trap->bl2(),trap->tl2(),
                              trap->alpha2()*deg2rad());

    } else if(const geo_pcon* pcon = cast_shape<geo_pcon>(a_shape)){

      return a_ph.set_polyhedron_pcon(pcon->phi1()*deg2rad(),
                              pcon->dphi()*deg2rad(),
                              pcon->nz(),
                              pcon->z(),pcon->rmin(),pcon->rmax());

    } else if(const geo_arb8* arb8 = cast_shape<geo_arb8>(a_shape)){

      return a_ph.set_polyhedron_arb8(arb8->dz(),arb8->xy());

    } else if(const geo_composite_shape* cshape = cast_shape<geo_composite_shape>(a_shape)){

      //a_out << "debug : composite_shape" << std::endl;

      const geo_bool_node* bnode = cshape->node();
      if(!bnode) return false;
      const geo_shape* ln = bnode->left();
      const geo_shape* rn = bnode->right();
      const geo_matrix* lm = bnode->left_matrix();
      const geo_matrix* rm = bnode->right_matrix();
      if(!ln||!rn||!lm||!rm) return false;

      bool verbose = false;
      //bool verbose = true;
      if(verbose)
      a_out << "inlib::rroot::shape_set_polyhedron :"
            << " geo_composite_shape :"
            << " left shape : " << ln->s_cls()
            << " right shape : " << rn->s_cls()
            << " ..."
            << std::endl;

      hep::polyhedron lph;
      std::vector<hep::polyhedron> lphs;
      if(!shape_set_polyhedron(a_out,*ln,lph,lphs,a_tess)) {
        a_out << "inlib::rroot::shape_set_polyhedron :"
              << " geo_composite_shape :"
              << " shape_set_polyhedron for lph failed."
              << std::endl;
        a_out << "  left shape : " << ln->s_cls() << std::endl;
        ln->dump(a_out);
        a_out << "  right shape : " << rn->s_cls() << std::endl;
        rn->dump(a_out);
        return false;
      }

     {mat4f mtx;
      mtx.set_identity();
      mul_mtx(a_out,*lm,mtx);
      if(lphs.empty()) {
        hep::tsf_polyhedron(lph,mtx);
        lphs.push_back(lph);
      } else {
        //a_out << "inlib::rroot::shape_set_polyhedron :"
        //      << " geo_composite_shape :"
        //      << " not empty lphs."
        //      << std::endl;
        std::vector<hep::polyhedron>::iterator it;
        for(it=lphs.begin();it!=lphs.end();++it) {
          hep::tsf_polyhedron(*it,mtx);
        }
      }}

      hep::polyhedron rph;
      std::vector<hep::polyhedron> rphs;
      if(!shape_set_polyhedron(a_out,*rn,rph,rphs,a_tess)) {
        //a_out << "inlib::rroot::shape_set_polyhedron :"
        //      << " geo_composite_shape :"
        //      << " shape_set_polyhedron for rph failed."
        //      << std::endl;
        a_out << "  left shape : " << ln->s_cls() << std::endl;
        ln->dump(a_out);
        a_out << "  right shape : " << rn->s_cls() << std::endl;
        rn->dump(a_out);
        return false;
      }

     {mat4f mtx;
      mtx.set_identity();
      mul_mtx(a_out,*rm,mtx);
      if(rphs.empty()) {
        hep::tsf_polyhedron(rph,mtx);
        rphs.push_back(rph);
      } else {
        //a_out << "inlib::rroot::shape_set_polyhedron :"
        //      << " geo_composite_shape :"
        //      << " not empty rphs."
        //      << std::endl;
        std::vector<hep::polyhedron>::iterator it;
        for(it=rphs.begin();it!=rphs.end();++it) {
          hep::tsf_polyhedron(*it,mtx);
        }
      }}

      int OPERATION = -1;

      if(cast_bool_node<geo_union>(*bnode)){

        if((lphs.size()!=1)||(rphs.size()!=1)) {

         {std::vector<hep::polyhedron>::const_iterator it;
          for(it=lphs.begin();it!=lphs.end();++it) {
            a_phs.push_back(*it);
          }}

         {std::vector<hep::polyhedron>::const_iterator it;
          for(it=rphs.begin();it!=rphs.end();++it) {
            a_phs.push_back(*it);
          }}

          return true;

        } else {
          OPERATION = hep::OP_UNION;
        }

      } else if(cast_bool_node<geo_intersection>(*bnode)){
        OPERATION = hep::OP_INTERSECTION;
      } else if(cast_bool_node<geo_subtraction>(*bnode)){
        OPERATION = hep::OP_SUBTRACTION;
      } else {
        a_out << " unknown bool_node " << bnode->s_cls() << std::endl;
        return false;
      }

      int err;

      hep::polyhedron res;

      std::vector<hep::polyhedron>::const_iterator lit;
      for(lit=lphs.begin();lit!=lphs.end();++lit) {
        const hep::polyhedron& _lph = *lit;

        std::vector<hep::polyhedron>::const_iterator rit;
        for(rit=rphs.begin();rit!=rphs.end();++rit) {
          const hep::polyhedron& _rph = *rit;

          hep::BooleanProcessor processor; //G.Barrand
          res = processor.execute(OPERATION,_lph,_rph,err);
          if(err) {
            if(OPERATION==hep::OP_UNION) {
              //should issue a warning.
              //if rendered solid it will look ok.
              a_phs.push_back(_lph);
              a_phs.push_back(_rph);
            } else {
              a_out << "inlib::rroot::shape_set_polyhedron :"
                    << " bool op " << OPERATION << " failed."
                    << " (0=UNION, 1=INTER, 2=SUB)."
                    << std::endl;
              a_out << "  left shape : " << ln->s_cls() << std::endl;
              ln->dump(a_out);
              a_out << "  right shape : " << rn->s_cls() << std::endl;
              rn->dump(a_out);
              return false;
            }
          } else {
            a_phs.push_back(res);
          }

        }
      }
      if(a_phs.size()==1) {
        a_ph = a_phs[0];
        a_phs.clear();
      }

      if(verbose)
      a_out << "inlib::rroot::shape_set_polyhedron :"
            << " geo_composite_shape : bool op " << OPERATION << " of :"
            << " left shape : " << ln->s_cls()
            << " right shape : " << rn->s_cls()
            << " ok."
            << std::endl;


    } else if(const geo_scaled_shape* sshape = cast_shape<geo_scaled_shape>(a_shape)){

      const geo_shape* gshape = sshape->shape();

      hep::polyhedron ph;
      std::vector<hep::polyhedron> phs;
      if(!shape_set_polyhedron(a_out,*gshape,ph,phs,a_tess)) {
        a_out << "inlib::rroot::shape_set_polyhedron :"
              << " geo_scaled_shape :"
              << " shape_set_polyhedron failed."
              << std::endl;
        return false;
      }

      const geo_scale* gscale = sshape->scale();
      const double* scale = gscale->scale();

      mat4f mtx;
      mtx.set_scale(float(scale[0]),float(scale[1]),float(scale[2]));

      if(phs.empty()) {
        hep::tsf_polyhedron(ph,mtx);
      } else {
        std::vector<hep::polyhedron>::iterator it;
        for(it=phs.begin();it!=phs.end();++it) {
          hep::tsf_polyhedron(*it,mtx);
        }
      }

    } else if(cast_shape<geo_pgon>(a_shape)){
      a_out << " no polyhedron for shape " << a_shape.s_cls() << std::endl;
      return false;

    //bbox must be the last since inherited by most shapes.
    } else if(const geo_bbox* box = cast_shape<geo_bbox>(a_shape)){

      //const double* vec = box->origin();
      //a_out << " orig "
      //          << vec[0] << " " << vec[1] << " " << vec[2] << std::endl;

      if(!a_ph.set_polyhedron_box(box->d_x(),box->d_y(),box->d_z())) return false;
      a_ph.Translate(box->origin_x(),box->origin_y(),box->origin_z());

    } else {
      a_out << " no polyhedron for shape " << a_shape.s_cls() << std::endl;
      return false;
    }
    return true;
}

}}

#endif
