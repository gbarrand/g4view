// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_geo_volume
#define inlib_rroot_geo_volume

#include "named"
#include "obj_array"

#include "geo_shape"
#include "geo_medium"

#include "geo_volume_cls"

#include "geo_node"

namespace inlib {
namespace rroot {

class geo_volume : public virtual iro {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoVolume");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v(geo_volume_cls());
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_volume>(this,a_class)) return p;
    return 0;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_volume_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_volume>(this,a_class)) {return p;}
    else return 0;
  }
public:
  virtual iro* copy() const {return new geo_volume(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!Named_stream(a_buffer,m_name,m_title)) return false;

    if(!GeoAtt_stream(a_buffer)) return false;
   {short style,width;
    if(!AttLine_stream(a_buffer,m_line_color,style,width)) return false;}
   {short style;
    if(!AttFill_stream(a_buffer,m_fill_color,style)) return false;}
    if(!Att3D_stream(a_buffer)) return false;

    //TObjArray* fNodes // array of nodes inside this volume
   {ifac::args args;
    args[ifac::arg_class()] = (void*)&(geo_node::s_class());
    if(!pointer_stream(a_buffer,m_fac,args,m_nodes)){
      a_buffer.out() << "inlib::rroot::geo_volume::stream : "
                     << "can't read fNodes."
                     << std::endl;
      return false;
    }}

    ifac::args args;

    //TGeoShape* fShape;          // shape
    if(!pointer_stream(a_buffer,m_fac,args,m_shape)) {
      a_buffer.out() << "inlib::rroot::geo_volume::stream : "
                     << "can't read fShape."
                     << std::endl;
      return false;
    }

    //TGeoMedium* fMedium;         // tracking medium
    if(!pointer_stream(a_buffer,m_fac,args,m_medium)) {
      a_buffer.out() << "inlib::rroot::geo_volume::stream : "
                     << "can't read fMedium."
                     << std::endl;
      return false;
    }

    //TGeoPatternFinder* fFinder;         // finder object for divisions
    if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
      a_buffer.out() << "inlib::rroot::geo_volume::stream : "
                     << "can't read fFinder."
                     << std::endl;
      return false;
    }

    //TGeoVoxelFinder* fVoxels;         // finder object for bounding boxes
    if(!dummy_TXxx_pointer_stream(a_buffer,m_fac,false)) {
      a_buffer.out() << "inlib::rroot::geo_volume::stream : "
                     << "can't read fVoxels."
                     << std::endl;
      return false;
    }

    int fNumber;         //  volume serial number in the list of volumes
    if(!a_buffer.read(fNumber)) return false;

    int fNtotal;         // total number of physical nodes
    if(!a_buffer.read(fNtotal)) return false;

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_volume(ifac& a_fac)
  :m_fac(a_fac)
  ,m_nodes(0) //not owner
  ,m_shape(0) //not owner
  ,m_medium(0) //not owner
  ,m_line_color(1)
  ,m_fill_color(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_volume(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_volume(const geo_volume& a_from)
  :iro(a_from)
  ,m_fac(a_from.m_fac)
  ,m_name(a_from.m_name)
  ,m_title(a_from.m_title)
  ,m_nodes(a_from.m_nodes)
  ,m_shape(a_from.m_shape)
  ,m_medium(a_from.m_medium)
  ,m_line_color(a_from.m_line_color)
  ,m_fill_color(a_from.m_fill_color)
  {}
  geo_volume& operator=(const geo_volume& a_from){
    if(&a_from==this) return *this;
    m_name = a_from.m_name;
    m_title = a_from.m_title;
    m_nodes = a_from.m_nodes;
    m_shape = a_from.m_shape;
    m_medium = a_from.m_medium;
    m_line_color = a_from.m_line_color;
    m_fill_color = a_from.m_fill_color;
    return *this;
  }
public:
  const ifac& fac() const {return m_fac;}
  ifac& fac() {return m_fac;}

  const std::string& name() const {return m_name;}
  const std::string& title() const {return m_title;}

  const std::vector<geo_node*>* nodes() const {return m_nodes;}
  std::vector<geo_node*>* nodes() {return m_nodes;}

  const geo_shape* shape() const {return m_shape;}
  geo_shape* shape() {return m_shape;}

  const geo_medium* medium() const {return m_medium;}
  geo_medium* medium() {return m_medium;}

  short line_color() const {return m_line_color;}
  short fill_color() const {return m_fill_color;}

  void set_line_color(short a_v) {m_line_color = a_v;}
  void set_fill_color(short a_v) {m_fill_color = a_v;}
protected:
  ifac& m_fac;
  std::string m_name;
  std::string m_title;  
  obj_array<geo_node>* m_nodes;
  geo_shape* m_shape;
  geo_medium* m_medium;
  short m_line_color;
  short m_fill_color;
};

class geo_volume_assembly : public geo_volume {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoVolumeAssembly");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_volume_assembly");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_volume_assembly>(this,a_class)) return p;
    return geo_volume::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_volume_assembly_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_volume_assembly>(this,a_class)) {return p;}
    return geo_volume::cast(a_class);
  }
public:
  virtual iro* copy() const {return new geo_volume_assembly(*this);}
  virtual bool stream(buffer& a_buffer) {
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    if(!geo_volume::stream(a_buffer)) return false;

    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_volume_assembly(ifac& a_fac):geo_volume(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_volume_assembly(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_volume_assembly(const geo_volume_assembly& a_from):iro(a_from),geo_volume(a_from){}
  geo_volume_assembly& operator=(const geo_volume_assembly&){return *this;}
};

class geo_volume_multi : public geo_volume {
  static const std::string& s_store_class() {
    static const std::string s_v("TGeoVolumeMulti");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::geo_volume_multi");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<geo_volume_multi>(this,a_class)) return p;
    return geo_volume::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return geo_volume_multi_cid();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<geo_volume_multi>(this,a_class)) {return p;}
    return geo_volume::cast(a_class);
  }
public:
  virtual iro* copy() const {return new geo_volume_multi(*this);}
  virtual bool stream(buffer& a_buffer) {
    uint32 startpos = a_buffer.length();
    unsigned int s, c;
    short v;
    if(!a_buffer.read_version(v,s,c)) return false;

    //if(!geo_volume::stream(a_buffer)) return false;

    a_buffer.set_offset(startpos+c+sizeof(unsigned int));
    if(!a_buffer.check_byte_count(s,c,s_store_class())) return false;
    return true;
  }

public:
  geo_volume_multi(ifac& a_fac):geo_volume(a_fac){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~geo_volume_multi(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  geo_volume_multi(const geo_volume_multi& a_from):iro(a_from),geo_volume(a_from){}
  geo_volume_multi& operator=(const geo_volume_multi&){return *this;}
};

template <class T>
inline const T* cast_volume(const geo_volume& a_volume) {
  return id_cast<geo_volume,T>(a_volume);
}
template <class T>
inline T* cast_volume(geo_volume& a_volume) {
  return id_cast<geo_volume,T>(a_volume);
}
  
inline bool vol_depth(const geo_volume& a_vol,
                      unsigned int a_depth,
                      const std::string& a_name,
                      int& a_vol_depth) {

  if(rcmp(a_name,a_vol.name())) {
    a_vol_depth = (int)a_depth;
    //std::cout << " found at " << a_depth << std::endl;
    return false; //stop
  }

  const std::vector<geo_node*>* nodes = a_vol.nodes();
  if(nodes) { 
    std::vector<geo_node*>::const_iterator it;
    for(it=nodes->begin();it!=nodes->end();++it) {
      if(!vol_depth(*((*it)->volume()),a_depth+1,
                    a_name,a_vol_depth)) return false;
    }
  }
  return true;
}

inline void tree_voln(const geo_volume& a_vol,
                      unsigned int a_depth,
                      unsigned int& a_number) {
  a_number++;
  const std::vector<geo_node*>* nodes = a_vol.nodes();
  if(nodes) {
    std::vector<geo_node*>::const_iterator it;
    for(it=nodes->begin();it!=nodes->end();++it) {
      tree_voln(*((*it)->volume()),a_depth+1,a_number);
    }
  }
}

inline void vds(const geo_volume& a_vol,
                unsigned int a_depth,
                std::vector< std::pair<std::string,unsigned int> >& a_vds){

  //must not clear a_vds since this function is recursive.

 {std::vector< std::pair<std::string,unsigned int> >::const_iterator it;
  const std::string& name = a_vol.name();
  bool found = false; 
  for(it=a_vds.begin();it!=a_vds.end();++it) {
    if(rcmp((*it).first,name)) {found=true;break;}
  }
  if(!found) {
    a_vds.push_back(std::pair<std::string,unsigned int>(name,a_depth));
  }}

 {const std::vector<geo_node*>* nodes = a_vol.nodes();
  if(nodes) {
    std::vector<geo_node*>::const_iterator it;
    for(it=nodes->begin();it!=nodes->end();++it) {
      vds(*((*it)->volume()),a_depth+1,a_vds);
    }
  }}
}

}}

#include "../mnmx"

namespace inlib {
namespace rroot {

inline void max_depth(const geo_volume& a_vol,
                          unsigned int a_depth,
                          unsigned int& a_max_depth) {
  a_max_depth = max_of(a_depth+1,a_max_depth);

  const std::vector<geo_node*>* nodes = a_vol.nodes();
  if(nodes) {
    std::vector<geo_node*>::const_iterator it;
    for(it=nodes->begin();it!=nodes->end();++it) {
      max_depth(*((*it)->volume()),a_depth+1,a_max_depth);
    }
  }
}

}}

#endif
