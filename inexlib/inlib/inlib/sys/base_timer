// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sys_base_timer
#define inlib_sys_base_timer

#include "atime"

namespace inlib {

class base_timer {
public:
  virtual void action() = 0;
public:
  static const std::string& s_class() { //for holder<base_timer>
    static const std::string s_v("inlib::base_timer");
    return s_v;
  }
  virtual void* cast(const std::string&) const = 0;
public:
  virtual void start() {
    m_started = true;
    m_prev = atime::now();
  }
  virtual void stop() {
    m_started = false;
  }
public:
  base_timer(unsigned int a_interval)
  :m_interval(a_interval)
  ,m_started(false)
  ,m_prev(atime(0,0))
  {}
  virtual ~base_timer(){}
public:
  base_timer(const base_timer& a_from)
  :m_interval(a_from.m_interval)
  ,m_started(false)
  ,m_prev(atime(0,0))
  {}
  base_timer& operator=(const base_timer& a_from){
    if(&a_from==this) return *this;
    m_interval = a_from.m_interval;
    m_started = false;
    m_prev = atime(0,0);
    return *this;
  }
public:
  void set_interval(unsigned int a_interval) {m_interval = a_interval;}
  unsigned int interval() const {return m_interval;}
  bool active() const {return m_started;}
  void check_time_out() {
    if(!m_started) return;
    atime elaps = atime::elapsed(m_prev);
    if((unsigned int)elaps.milli_seconds()>m_interval) {
      action();
      m_prev = atime::now();    
    }
  }  
protected:
  unsigned int m_interval; //milliseconds.
  bool m_started;
  atime m_prev;
};

}

#endif
