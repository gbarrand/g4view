// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_insh_opener
#define inlib_insh_opener

#include "../sg/iopener"
#include "../sg/gui_viewer"
#include "../file_is"
#include "ishell"

namespace inlib {

class insh_opener : public virtual iopener {
  typedef iopener parent;
  INLIB_SCLASS(inlib::insh_opener)
public:
  virtual parent* copy() const {return new insh_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {return file::is_insh(a_path,a_is);}

  virtual bool open(const std::string& a_path,sg::viewer& a_viewer,const args&,bool& a_done) const {
    if(!m_insh.exec_file_reset_to_stop(a_path)) {  //=sourced.
      a_done = false;
      return false;
    }
    a_done = true;
    return true;
  }

  virtual bool is(uint64,const char*,bool& a_is) const {a_is = false;return true;}
  virtual bool open(uint64,const char*,sg::viewer&,const args&,bool& a_done) const {a_done = false;return true;}
  virtual bool open(const std::string&,sg::viewer&,const xml::scenario&,sg::cmaps_t&,const args&,bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  insh_opener(ishell& a_insh):m_insh(a_insh) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~insh_opener(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  insh_opener(const insh_opener& a_from):parent(a_from),m_insh(a_from.m_insh) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  insh_opener& operator=(const insh_opener&){return *this;}
protected:
  ishell& m_insh;
};

}

#endif
