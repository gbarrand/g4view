// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_osprintf
#define inlib_osprintf

#include "snpf"

#include <ostream>

namespace inlib {

/*
inline bool vosprintf(std::ostream& a_out,size_t a_length,const char* a_format,va_list a_args){
  if(!a_format) return false;
  char* s = new char[a_length+1];
  if(!s) return false;
  s[a_length] = '\0';
  int n = vsnpf(s,a_length+1,a_format,a_args);
  if((size_t)n>a_length) {
    delete [] s;
    return false;
  }
  if(s[a_length]!='\0') {
    delete [] s;
    return false;
  }
  a_out << s;
  delete [] s;
  return true;
}


inline bool osprintf(std::ostream& a_out,size_t a_length,const char* a_format,...){
  if(!a_format) return false;
  char* s = new char[a_length+1];
  if(!s) return false;
  s[a_length] = '\0';
  va_list args;
  va_start(args,a_format);
  int n = vsnpf(s,a_length+1,a_format,args);
  va_end(args);
  if((size_t)n>a_length) {
    delete [] s;
    return false;
  }
  if(s[a_length]!='\0') {
    delete [] s;
    return false;
  }
  a_out << s;
  delete [] s;
  return true;
}
*/

inline bool osprintf(std::ostream& a_out,char* a_s,size_t a_length,const char* a_format,...){
  //warning : a_s should have size of a_length+1
  //used in hep/pdgs
  if(!a_format) return false;
  a_s[a_length] = '\0';
  va_list args;
  va_start(args,a_format);
  int n = vsnpf(a_s,a_length+1,a_format,args);
  va_end(args);
  if((size_t)n>a_length) return false;
  if(a_s[a_length]!='\0') return false;
  a_out << a_s;
  return true;
}

}

#endif
