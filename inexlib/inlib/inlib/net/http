// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_http
#define inlib_http

#include "inet_socket"
#include "../cstr"
#include "../newdel"
#include "../realloc"
#include "../num2s"

namespace inlib {
namespace net {

class http : public inet_socket {
  typedef inet_socket parent;
public:
  http(std::ostream& a_out,bool a_verbose)
  :parent(a_out,a_verbose)
//:parent(a_out,true)
  {}
  virtual ~http(){}
protected:
  http(const http& a_from):parent(a_from){}
  http& operator=(const http&){return *this;}
public:
  bool start(const std::string& a_host,unsigned int a_port /*= 80*/) {
    if(!connect(a_host,a_port,10,3,1)) return false;
    m_host = a_host;
    return true;
  }

  bool GET(const std::string& a_req,
           const std::string& a_in_cookie,char*& a_bdoc,uint64& a_ldoc,
           std::string& a_out_cookie,bool a_verbose_if_failure = true) {
    // a_bdoc is null terminated. It should be deleted with "delete []".
    a_bdoc = 0;
    a_ldoc = 0;
    a_out_cookie.clear();
    if(m_host.empty()) return false;

    if(m_verbose) {
      m_out << "inlib::net::http::GET :"
            << " fetch " << sout(a_req) << "."
            << std::endl;
    }

    //NOTE : use C str. std::string does not like CR,LF.
   {char* cmd = str_new();
    str_cat(cmd,"GET ");
    str_cat(cmd,a_req.c_str());
    str_cat(cmd," HTTP/1.1");
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    str_cat(cmd,"Host: ");
    str_cat(cmd,m_host.c_str());
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    if(a_in_cookie.size()) {
      str_cat(cmd,"Cookie: ");
      str_cat(cmd,a_in_cookie.c_str());
      str_cat(cmd,CR());
      str_cat(cmd,LF());
    }

    //end :
    str_cat(cmd,CR());
    str_cat(cmd,LF());
    if(m_verbose) {
      m_out << "inlib::net::http::GET :"
            << " send_command : " << sout(std::string(cmd))
            << std::endl;
    }
    if(!send_buffer(cmd,::strlen(cmd))) {
      m_out << "inlib::net::http::GET :"
            << " send_buffer failed."
            << std::endl;
      str_del(cmd);
      return false;
    }
    str_del(cmd);}

    std::string first_line;
    char* doc; // begin of document. Should end with a null char.
    size_t ldoc; //could be zero
    char* head; //not a C string.
    size_t lhead; //could be zero.
    if(!get_data(first_line,doc,ldoc,head,lhead,a_verbose_if_failure)) {
      if(a_verbose_if_failure) {
        m_out << "inlib::net::http::GET :"
              << " get_data() failed."
              << std::endl;
      }
      return false;
    }
    //WARNING : we have to : delete [] doc and delete [] head.

    if(m_verbose) {
      m_out << "inlib::net::http::GET :"
            << " received first line " << sout(first_line) << "."
            << std::endl;
    }

    if((first_line=="HTTP/1.1 200 OK") && doc){
      if(m_verbose) {
        m_out << "inlib::net::http::GET :"
              << " OK."
              << std::endl;
      }

      if(m_verbose) {
        m_out << "inlib::net::http::GET :"
              << " document length " << (uint64)ldoc
              << std::endl;
      }

      a_bdoc = doc;
      a_ldoc = ldoc;

      if(head) {
        head[lhead] = 0;
        char* pos = ::strstr(head,"Set-Cookie: ");
        if(pos) {
          char* beg = pos+12;
          pos = ::strchr(beg,CR());
          if(pos) *pos = 0;
          a_out_cookie = beg;
        }
      }

      delete [] head;

      return true;
    }

    // troubles :
    std::string msg;
    if(doc) msg = std::string(doc); //doc should be ended with a null char.
    delete [] doc;
    delete [] head;

    if(first_line=="HTTP/1.1 301 Moved Permanently"){
      m_out << "inlib::net::http::GET :"
            << " received a 301 message."
            << " Document " << sout(a_req) << " moved."
            << std::endl;

      m_out << "inlib::net::http::GET :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    } else if(first_line=="HTTP/1.1 404 Not Found"){
      m_out << "inlib::net::http::GET :"
            << " received a 404 message."
            << " Document " << sout(a_req) << " not found."
            << std::endl;
      m_out << "inlib::net::http::GET :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    } else if(first_line=="HTTP/1.1 400 Bad Request"){
      m_out << "inlib::net::http::GET :"
            << " received a 400 message."
            << " " << sout(a_req) << " is a bad request."
            << std::endl;
      m_out << "inlib::net::http::GET :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    } else {
      m_out << "inlib::net::http::GET :"
            << " first line " << sout(first_line) << " not treated."
            << std::endl;
      m_out << "inlib::net::http::GET :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    }

    return false;
  }

  bool GET(const std::string& a_req,const std::string& a_in_cookie,const std::string& a_local,std::string& a_out_cookie) {
    char* buffer;
    uint64 length;
    if(!GET(a_req,a_in_cookie,buffer,length,a_out_cookie)) return false;
    //if( (length>=s_failed().size()) && (!::strncmp(buffer,s_failed().c_str(),s_failed().size())) ) {
    //}
    bool status = file::write_bytes(a_local,buffer,(size_t)length);
    mdel(buffer);
    if(!status) {
      m_out << "inlib::net::http::GET :"
            << " file::write_bytes() failed for file " << sout(a_local) << "."
            << std::endl;
    }
    return status;
  }

  bool GET(const std::string& a_req,const std::string& a_local) {
    std::string icook,ocook;
    char* buffer;
    uint64 length;
    if(!GET(a_req,icook,buffer,length,ocook)) return false;
    bool status = file::write_bytes(a_local,buffer,(size_t)length);
    mdel(buffer);
    if(!status) {
      m_out << "inlib::net::http::GET(2) :"
            << " file::write_bytes() failed for file " << sout(a_local) << "."
            << std::endl;
    }
    return status;
  }

  bool POST(const std::string& a_string,const std::string& a_in_cookie,
            char*& a_bdoc,uint64& a_ldoc,std::string& a_out_cookie) {
    // a_bdoc is null terminated. It should be deleted with "delete []".
    a_bdoc = 0;
    a_ldoc = 0;
    a_out_cookie.clear();
    if(m_host.empty()) return false;

    if(m_verbose) {
      m_out << "inlib::net::http::POST :"
            << " send " << sout(a_string) << "."
            << std::endl;
    }

    //NOTE : use C str. std::string does not like CR,LF.
   {char* cmd = str_new();
    str_cat(cmd,"POST /");
    str_cat(cmd," HTTP/1.1");
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    str_cat(cmd,"Host: ");
    str_cat(cmd,m_host.c_str());
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    if(a_in_cookie.size()) {
      str_cat(cmd,"Cookie: ");
      str_cat(cmd,a_in_cookie.c_str());
      str_cat(cmd,CR());
      str_cat(cmd,LF());
    }

    str_cat(cmd,"Content-Type: application/x-www-form-urlencoded");
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    str_cat(cmd,"Content-Length: ");
   {std::string stmp;
    if(!num2s((uint64)a_string.size(),stmp)){}
    str_cat(cmd,stmp.c_str());}
    str_cat(cmd,CR());
    str_cat(cmd,LF());
    //end :
    str_cat(cmd,CR());
    str_cat(cmd,LF());
    //data :
    str_cat(cmd,a_string.c_str());
    if(m_verbose) {
      m_out << "inlib::net::http::POST :"
            << " send_command : " << sout(std::string(cmd))
            << std::endl;
    }

    if(!send_buffer(cmd,::strlen(cmd))) {
      m_out << "inlib::net::http::POST :"
            << " send_buffer failed."
            << std::endl;
      str_del(cmd);
      return false;
    }
    str_del(cmd);}

    std::string first_line;
    char* doc; // begin of document. Should end with a null char.
    size_t ldoc; //could be zero
    char* head; //not a C string.
    size_t lhead; //could be zero.
    if(!get_data(first_line,doc,ldoc,head,lhead,true)) {
      m_out << "inlib::net::http::POST :"
            << " get_data() failed."
            << std::endl;
      return false;
    }
    //WARNING : we have to : delete [] doc and delete [] head.

    if(m_verbose) {
      m_out << "inlib::net::http::POST :"
            << " received first line " << sout(first_line) << "."
            << std::endl;
    }

    if((first_line=="HTTP/1.1 200 OK") && doc){
      if(m_verbose) {
        m_out << "inlib::net::http::POST :"
              << " OK."
              << std::endl;
      }

      if(m_verbose) {
        m_out << "inlib::net::http::POST :"
              << " document length " << (uint64)ldoc
              << std::endl;
      }

      a_bdoc = doc;
      a_ldoc = ldoc;

      if(head) {
        head[lhead] = 0;
        char* pos = ::strstr(head,"Set-Cookie: ");
        if(pos) {
          char* beg = pos+12;
          pos = ::strchr(beg,CR());
          if(pos) *pos = 0;
          a_out_cookie = beg;
        }
      }

      delete [] head;

      return true;
    }

    // troubles :
    std::string msg;
    if(doc) msg = std::string(doc); //doc should be ended with a null char.
    delete [] doc;
    delete [] head;

    if(first_line=="HTTP/1.1 400 Bad Request"){
      m_out << "inlib::net::http::POST :"
            << " received a 400 message."
            << " Bad request."
            << std::endl;
      m_out << "inlib::net::http::send :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    } else {
      m_out << "inlib::net::http::POST :"
            << " first line " << sout(first_line) << " not treated."
            << std::endl;
      m_out << "inlib::net::http::POST :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    }

    return false;
  }

  bool POST(const std::string& a_string,const std::string& a_in_cookie,const std::string& a_local,std::string& a_out_cookie) {
    a_out_cookie.clear();

    FILE* file = ::fopen(a_local.c_str(),"wb");
    if(!file) return false;

    if(m_host.empty()) {::fclose(file);return false;}

    if(m_verbose) {
      m_out << "inlib::net::http::POST(FILE) :"
            << " send " << sout(a_string) << "."
            << std::endl;
    }

    //NOTE : use C str. std::string does not like CR,LF.
   {char* cmd = str_new();
    str_cat(cmd,"POST /");
    str_cat(cmd," HTTP/1.1");
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    str_cat(cmd,"Host: ");
    str_cat(cmd,m_host.c_str());
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    if(a_in_cookie.size()) {
      str_cat(cmd,"Cookie: ");
      str_cat(cmd,a_in_cookie.c_str());
      str_cat(cmd,CR());
      str_cat(cmd,LF());
    }

    str_cat(cmd,"Content-Type: application/x-www-form-urlencoded");
    str_cat(cmd,CR());
    str_cat(cmd,LF());

    str_cat(cmd,"Content-Length: ");
   {std::string stmp;
    if(!num2s((uint64)a_string.size(),stmp)){}
    str_cat(cmd,stmp.c_str());}
    str_cat(cmd,CR());
    str_cat(cmd,LF());
    //end :
    str_cat(cmd,CR());
    str_cat(cmd,LF());
    //data :
    str_cat(cmd,a_string.c_str());
    if(m_verbose) {
      m_out << "inlib::net::http::POST(FILE) :"
            << " send_command : " << sout(std::string(cmd))
            << std::endl;
    }

    if(!send_buffer(cmd,::strlen(cmd))) {
      m_out << "inlib::net::http::POST(FILE) :"
            << " send_buffer failed."
            << std::endl;
      str_del(cmd);
      ::fclose(file);
      return false;
    }
    str_del(cmd);}

    std::string first_line;
    size_t ldoc; //could be zero
    char* head; //not a C string.
    size_t lhead; //could be zero.
    if(!data_in_file(file,ldoc,first_line,head,lhead)) {
      m_out << "inlib::net::http::POST(FILE) :"
            << " get_data() failed."
            << std::endl;
      ::fclose(file);
      return false;
    }
    //WARNING : we have to : delete [] doc and delete [] head.

    if(m_verbose) {
      m_out << "inlib::net::http::POST(FILE) :"
            << " received first line " << sout(first_line) << "."
            << std::endl;
    }

    if((first_line=="HTTP/1.1 200 OK") /*&& doc*/){
      if(m_verbose) {
        m_out << "inlib::net::http::POST(FILE) :"
              << " OK."
              << std::endl;
      }

      if(m_verbose) {
        m_out << "inlib::net::http::POST(FILE) :"
              << " document length " << (uint64)ldoc
              << std::endl;
      }

      if(head) {
        head[lhead] = 0;
        char* pos = ::strstr(head,"Set-Cookie: ");
        if(pos) {
          char* beg = pos+12;
          pos = ::strchr(beg,CR());
          if(pos) *pos = 0;
          a_out_cookie = beg;
        }
      }

      delete [] head;

      ::fclose(file);
      return true;
    }

    // troubles :
    std::string msg;
    //if(doc) msg = std::string(doc); //doc should be ended with a null char.
    //delete [] doc;
    delete [] head;

    if(first_line=="HTTP/1.1 400 Bad Request"){
      m_out << "inlib::net::http::POST(FILE) :"
            << " received a 400 message."
            << " Bad request."
            << std::endl;
      m_out << "inlib::net::http::send :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    } else {
      m_out << "inlib::net::http::POST(FILE) :"
            << " first line " << sout(first_line) << " not treated."
            << std::endl;
      m_out << "inlib::net::http::POST(FILE) :"
            << " full message :" << std::endl
            << msg
            << std::endl;

    }

    ::fclose(file);
    return false;
  }

protected:
  static char LF() {return 10;} //\n line feed
  static char CR() {return 13;} //\r carriage return

  static ptrdiff_t NOT_FOUND() {return -1;}

  bool get_data(std::string& a_first_line,
                char*& a_bdoc,size_t& a_ldoc,
                char*& a_bhead,size_t& a_lhead,bool a_verbose_if_failure) {
    a_first_line.clear();
    a_bdoc = 0;
    a_ldoc = 0;
    a_bhead = 0;
    a_lhead = 0;
    if(m_socket==(-1)) return false;

    unsigned int content_length;
    bool found_Content_Length = false;
    ptrdiff_t pos_search_Content_Length = 0;

    bool found_Transfer_Encoding_chunked = false;
    ptrdiff_t pos_search_Transfer_Encoding_chunked = 0;

    ptrdiff_t pos_search_doc = 0;

    ptrdiff_t pos_beg_doc = NOT_FOUND();
    size_t ldoc = 0;

    bool found_chunks = false;
    bool chunk_started = false;

    typedef std::pair<ptrdiff_t,size_t> chunk_t;
    std::vector<chunk_t> chunks;

    ptrdiff_t to_read = 0;
    size_t got = 0;

    size_t BLOCK = 65536;
    char* buf = new char[BLOCK];
    if(!buf) return false;

    char* bsvr = 0; //store what is coming from web server.
    size_t lsvr = 0;

    while(true) {
      size_t to_get = BLOCK;
      if(found_Content_Length && (pos_beg_doc!=NOT_FOUND())) {
        if(to_read<ptrdiff_t(got)) {
          m_out << "inlib::http::get_data :"
                << " Content_Length : to_read<got"
                << std::endl;
          disconnect();
          delete [] buf;
          delete [] bsvr;
          a_first_line.clear();
          return false;

        } else if((to_read-got)==0) {
          char* bdoc = mnew<char>(ldoc+1); //take into account empty doc.
          ::memcpy(bdoc,bsvr+pos_beg_doc,ldoc);
          *(bdoc+ldoc) = 0;
          a_bdoc = bdoc;
          a_ldoc = ldoc;

          a_bhead = bsvr;
          a_lhead = pos_beg_doc;

          //a_bhead[a_lhead] = 0;
          //::printf("debug : get_data(1) : header |%s|\n",a_bhead);

          delete [] buf;
          //delete [] bsvr;
          return true;
        } else {
          to_get = mn<size_t>(BLOCK,to_read-got);
        }
      }

      if(found_Transfer_Encoding_chunked) {

        if(found_chunks) {
          size_t sz = 0;
          std::vector<chunk_t>::const_iterator it;
         {for(it=chunks.begin();it!=chunks.end();++it) sz += (*it).second;}

          char* bdoc = mnew<char>(sz+1); //take into account empty doc.
          char* pos = bdoc;
         {for(it=chunks.begin();it!=chunks.end();++it){
            ::memcpy(pos,bsvr+(*it).first,(*it).second);
            pos += (*it).second;
          }}
          *(bdoc+sz) = 0;
          a_bdoc = bdoc;
          a_ldoc = sz;

          a_bhead = bsvr;
          a_lhead = sz;

          //a_bhead[a_lhead] = 0;
          //::printf("debug : get_data(2) : header |%s|\n",a_bhead);

          delete [] buf;
          //delete [] bsvr;
          return true;

        } else {

          if(chunk_started) {

            if(ptrdiff_t(got)>=to_read) {
              //m_out << "inlib::http::get_data :"
              //      << " chunked : get all chunk (and may be more)."
              //      << std::endl;
              chunk_started = false;
              to_get = 0;
            } else {
              to_get = mn<size_t>(BLOCK,size_t(to_read)-got);
            }

          } else {
          }

        }
      }

      if(to_get) {

      if(m_verbose) {
        m_out << "inlib::http::get_data : recv " << (int64)to_get << " ... " << std::endl;
      }

      sock_size_t num_char = ::recv(m_socket,buf,(size_t)to_get,0);
      if(num_char<0) {
        m_out << "inlib::http::get_data : recv : " << serror() << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      if(num_char==0) {
        if(lsvr) { //We have some data.
          // Search begin of document :
          bool found_CR_LF_CR_LF = false;
          char* pos = bsvr;
          char* pend = bsvr+lsvr;
          for(;(pos+3)<pend;pos++) {
            if( ((*(pos+0))==CR()) &&
                ((*(pos+1))==LF()) &&
                ((*(pos+2))==CR()) &&
                ((*(pos+3))==LF())
              ){
              found_CR_LF_CR_LF = true;
              pos += 4;
              break;
            }
          }
          if(!found_CR_LF_CR_LF) {
            m_out << "inlib::http::get_data :"
                  << " recv : returned 0. Have some data (" << lsvr << ") but begin of document not found."
                  << std::endl;
            disconnect();
            delete [] buf;
            delete [] bsvr;
            a_first_line.clear();
            return false;
          }

          pos_beg_doc = pos-bsvr;
          ldoc = pend-pos;

          char* bdoc = mnew<char>(ldoc+1); //take into account empty doc.
          ::memcpy(bdoc,bsvr+pos_beg_doc,ldoc);
          *(bdoc+ldoc) = 0;
          a_bdoc = bdoc;
          a_ldoc = ldoc;

          a_bhead = bsvr;
          a_lhead = pos_beg_doc;

          delete [] buf;
          //delete [] bsvr;
          return true;
        }
        if(a_verbose_if_failure) {
          m_out << "inlib::http::get_data :"
                << " recv : returned 0 and have no data."
                << std::endl;
        }
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      got += num_char;

      if(m_verbose) {
        m_out << "inlib::http::get_data :"
              << " recv : " << (int)num_char
              << std::endl;
      }

     {if(!realloc<char>(bsvr,lsvr+num_char+1,lsvr+1)) {
        m_out << "inlib::http::get_data :"
              << " can't realloc " << (uint64)(lsvr+num_char+1) << " bytes."
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      ::memcpy(bsvr+lsvr,buf,num_char);
      lsvr += num_char;

      if(!fetch_cbk(lsvr)) {
        m_out << "inlib::http::get_data :"
              << " fetch_cbk returns false, stop recv data."
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }}

      //file::write_bytes("debug.log",bsvr,lsvr);
      //for(int i=0;i<500;i++) {
      //  ::printf("debug : %d : %d %c\n",i,bsvr[i],bsvr[i]);
      //}

      }

      if(a_first_line.empty()) {
        char* end = 0;
        char* pos = bsvr;
        char* pend = bsvr+lsvr;
        for(;pos!=pend;pos++) {
          if((*pos)==CR()) {
            end = pos;
            break;
          }
        }
        if(end) {
          char c_end = *end;
          *end = 0;
          a_first_line = bsvr;
          *end = c_end;
        }
      }

      if(!found_Content_Length) {
        while(true) {
          char* end = 0;
          char* pos = bsvr+pos_search_Content_Length;
          char* pend = bsvr+lsvr;
          for(;pos!=pend;pos++) {
            if((*pos)==CR()) {
              end = pos;
              break;
            }
          }
          if(!end) break;
          char c_end = *end;
          *end = 0; //transform temporarily to C string.
          pos = ::strstr(bsvr+pos_search_Content_Length,"Content-Length: ");
          if(!pos) pos = ::strstr(bsvr+pos_search_Content_Length,"Content-length: "); //SDSS files.
          if(pos) { //found it !
            if(::sscanf(pos+16,"%u",&content_length)!=1) {
              m_out << "inlib::http::get_data :"
                    << " sscanf error."
                    << std::endl;
              disconnect();
              delete [] buf;
              delete [] bsvr;
              a_first_line.clear();
              return false;
            }
            *end = c_end;
            if(m_verbose) {
              m_out << "inlib::http::get_data :"
                    << " found content-length " << content_length
                    << std::endl;
            }
            found_Content_Length = true;
            pos_search_doc = end-bsvr; //start at CR for finding start doc.
            break;
          }
          *end = c_end;
          pos_search_Content_Length = end+1-bsvr;
        }

      }

      if(!found_Transfer_Encoding_chunked) {
        while(true) {
          char* end = 0;
          char* pos = bsvr+pos_search_Transfer_Encoding_chunked;
          char* pend = bsvr+lsvr;
          for(;pos!=pend;pos++) {
            if((*pos)==CR()) {
              end = pos;
              break;
            }
          }
          if(!end) break;

         {char c_end = *end;
          *end = 0; //transform temporarily to C string.
          pos = ::strstr(bsvr+pos_search_Transfer_Encoding_chunked,
                         "Transfer-Encoding: chunked");
          *end = c_end;}

          if(pos) { //found it !
            if(m_verbose) {
              m_out << "inlib::http::get_data :"
                    << " found Transfer-Encoding chunked."
                    << std::endl;
            }
            found_Transfer_Encoding_chunked = true;
            pos_search_doc = end-bsvr; //start at CR for finding first chunk.
            break;
          }
          pos_search_Transfer_Encoding_chunked = end+1-bsvr;
        }

      }

      if(found_Content_Length && (pos_beg_doc==NOT_FOUND())) {
        // We have the document length. Search the doc beginning :

        bool found_CR_LF_CR_LF = false;
        char* pos = bsvr+pos_search_doc;
       {char* pend = bsvr+lsvr;
        for(;(pos+3)<pend;pos++) {
          if( ((*(pos+0))==CR()) &&
              ((*(pos+1))==LF()) &&
              ((*(pos+2))==CR()) &&
              ((*(pos+3))==LF())
            ){
            found_CR_LF_CR_LF = true;
            pos += 4;
            break;
          }
        }}
        if(found_CR_LF_CR_LF) {
          if(m_verbose) {
            m_out << "inlib::http::get_data :"
                  << " at_once : begin document found."
                  << std::endl;
          }
          pos_beg_doc = pos-bsvr;
          ldoc = content_length;
          to_read = (pos-bsvr)+content_length;
          // have content_length and found beg_doc !
        } else {
          //not found. get more data...
        }
      }

      if(found_Transfer_Encoding_chunked  && (pos_beg_doc==NOT_FOUND())) {
        // We know it is chunked. Search the doc beginning :

        bool found_CR_LF_CR_LF = false;
        char* pos = bsvr+pos_search_doc;
       {char* pend = bsvr+lsvr;
        for(;(pos+3)<pend;pos++) {
          if( ((*(pos+0))==CR()) &&
              ((*(pos+1))==LF()) &&
              ((*(pos+2))==CR()) &&
              ((*(pos+3))==LF())
            ){
            found_CR_LF_CR_LF = true;
            pos += 4;
            break;
          }
        }}
        if(found_CR_LF_CR_LF) {
          if(m_verbose) {
            m_out << "inlib::http::get_data :"
                  << " chunked : begin document found."
                  << std::endl;
          }
          pos_beg_doc = pos-bsvr;
          ldoc = 0; //unknown
        } else {
          //not found. get more data...
        }

      }

      if(found_Transfer_Encoding_chunked  &&
         (pos_beg_doc!=NOT_FOUND()) && !chunk_started) {
        //search chunk :

        char* pos = bsvr+pos_beg_doc;

        unsigned int sz_chunk = 0;
       {char* end = bsvr+lsvr;
        if(pos>=end){
          continue;
        }

        char cend = *end;
        *end = 0;

       //{for(int i=0;i<10;i++) {
       //   ::printf("debug : %d : %d %c\n",i,*(pos+i),*(pos+i));
       //}}

        if(::sscanf(pos,"%x",&sz_chunk)!=1) {
          // may need more data.
          // FIXME : yes, but we may have also the case
          // where there is no number at pos !
          continue;
        }
        *end = cend;}

        if(m_verbose) {
          m_out << "inlib::http::get_data :"
                << " sz_chunk " << sz_chunk
                << std::endl;
          //::printf("debug : sz_chunk : %x %u\n",sz_chunk,sz_chunk);
        }

       {bool found = false;
        char* pend = bsvr+lsvr;
        for(;(pos+1)<pend;pos++) {
          if(((*(pos+0))==CR())&&((*(pos+1))==LF())) {
            found = true;
            pos += 2;
            break;
          }
        }
        if(found) {

         //{char c1 = *pos;
         // if(is_printable(c1)) printf("%c",c1);
         // else printf("%d",c1);}
         // printf("|\n");

          if(sz_chunk) {
            chunks.push_back(chunk_t(pos-bsvr,sz_chunk));
            to_read = (pos-bsvr)+sz_chunk;
            pos_beg_doc = pos+sz_chunk+2-bsvr; //next chunk pos.
            chunk_started = true;
          } else {
            found_chunks = true;
          }

        }}
      }

    }
  }

  bool data_in_file(FILE* a_FILE,size_t& a_ldoc,
                    std::string& a_first_line,
                    char*& a_bhead,size_t& a_lhead){
    a_first_line.clear();
    a_ldoc = 0;
    a_bhead = 0;
    a_lhead = 0;
    if(m_socket==(-1)) return false;

    unsigned int content_length;
    bool found_Content_Length = false;
    ptrdiff_t pos_search_Content_Length = 0;

    bool found_Transfer_Encoding_chunked = false;
    ptrdiff_t pos_search_Transfer_Encoding_chunked = 0;

    ptrdiff_t pos_search_doc = 0;

    ptrdiff_t pos_beg_doc = NOT_FOUND();
    size_t ldoc = 0;

    bool found_chunks = false;
    bool chunk_started = false;

    typedef std::pair<ptrdiff_t,size_t> chunk_t;
    std::vector<chunk_t> chunks;

    ptrdiff_t to_read = 0;

    size_t got = 0;

    size_t BLOCK = 65536;
    char* buf = new char[BLOCK];
    if(!buf) return false;

    char* bsvr = 0; //store what is coming from web server.
    size_t lsvr = 0;

    while(true) {
      size_t to_get = BLOCK;
      if(found_Content_Length && (pos_beg_doc!=NOT_FOUND())) {
        if(to_read<ptrdiff_t(got)) {
          m_out << "inlib::http::data_in_file :"
                << " Content_Length : to_read<got"
                << std::endl;
          disconnect();
          delete [] buf;
          delete [] bsvr;
          a_first_line.clear();
          return false;

        } else if((to_read-got)==0) {
          if(::fwrite(bsvr+pos_beg_doc,ldoc,(size_t)1,a_FILE)!=1) {
            disconnect();
            delete [] buf;
            delete [] bsvr;
            a_first_line.clear();
            return false;
          }
          a_ldoc = ldoc;

          a_bhead = bsvr;
          a_lhead = pos_beg_doc;

          //a_bhead[a_lhead] = 0;
          //::printf("debug : get_data(1) : header |%s|\n",a_bhead);

          delete [] buf;
          //delete [] bsvr;
          return true;
        } else {
          to_get = mn<size_t>(BLOCK,to_read-got);
        }
      }

      if(found_Transfer_Encoding_chunked) {

        if(found_chunks) {
          size_t sz = 0;
          std::vector<chunk_t>::const_iterator it;
         {for(it=chunks.begin();it!=chunks.end();++it) sz += (*it).second;}

/*
          char* bdoc = mnew<char>(sz+1); //take into account empty doc.
          char* pos = bdoc;
         {for(it=chunks.begin();it!=chunks.end();++it){
            ::memcpy(pos,bsvr+(*it).first,(*it).second);
            pos += (*it).second;
          }}
          *(bdoc+sz) = 0;
          a_bdoc = bdoc;
*/
          a_ldoc = sz;

          a_bhead = bsvr;
          a_lhead = sz;

          //a_bhead[a_lhead] = 0;
          //::printf("debug : get_data(2) : header |%s|\n",a_bhead);

          delete [] buf;
          //delete [] bsvr;
          return true;

        } else {

          if(chunk_started) {

            if(ptrdiff_t(got)>=to_read) {
              //m_out << "inlib::http::data_in_file :"
              //      << " chunked : get all chunk (and may be more)."
              //      << std::endl;
              chunk_started = false;
              to_get = 0;
            } else {
              to_get = mn<size_t>(BLOCK,size_t(to_read)-got);
            }

          } else {
          }

        }
      }

      if(to_get) {

      if(m_verbose) {
        m_out << "inlib::http::data_in_file :"
              << " recv " << (int64)to_get << " ... "
              << std::endl;
      }

      sock_size_t num_char = ::recv(m_socket,buf,(size_t)to_get,0);
      if(num_char<0) {
        m_out << "inlib::http::data_in_file :"
              << " recv : " << serror()
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      if(num_char==0) {
        m_out << "inlib::http::data_in_file :"
              << " recv : returned 0. lsvr " << lsvr << "."
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      got += num_char;

      if(m_verbose) {
        m_out << "inlib::http::data_in_file :"
              << " recv : " << (int)num_char
              << std::endl;
      }

     {if(!realloc<char>(bsvr,lsvr+num_char+1,lsvr+1)) {
        m_out << "inlib::http::data_in_file :"
              << " can't realloc " << (uint64)(lsvr+num_char+1) << " bytes."
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }
      ::memcpy(bsvr+lsvr,buf,num_char);
      lsvr += num_char;

      if(!fetch_cbk(lsvr)) {
        m_out << "inlib::http::data_in_file :"
              << " fetch_cbk returns false, stop recv data."
              << std::endl;
        disconnect();
        delete [] buf;
        delete [] bsvr;
        a_first_line.clear();
        return false;
      }}

      //file::write_bytes("debug.log",bsvr,lsvr);
      //for(int i=0;i<500;i++) {
      //  ::printf("debug : %d : %d %c\n",i,bsvr[i],bsvr[i]);
      //}

      }

      if(a_first_line.empty()) {
        char* end = 0;
        char* pos = bsvr;
        char* pend = bsvr+lsvr;
        for(;pos!=pend;pos++) {
          if((*pos)==CR()) {
            end = pos;
            break;
          }
        }
        if(end) {
          char c_end = *end;
          *end = 0;
          a_first_line = bsvr;
          *end = c_end;
        }
      }

      if(!found_Content_Length) {
        while(true) {
          char* end = 0;
          char* pos = bsvr+pos_search_Content_Length;
          char* pend = bsvr+lsvr;
          for(;pos!=pend;pos++) {
            if((*pos)==CR()) {
              end = pos;
              break;
            }
          }
          if(!end) break;
          char c_end = *end;
          *end = 0; //transform temporarily to C string.
          pos = ::strstr(bsvr+pos_search_Content_Length,"Content-Length: ");
          if(!pos) pos = ::strstr(bsvr+pos_search_Content_Length,"Content-length: ");
          if(pos) { //found it !
            if(::sscanf(pos+16,"%u",&content_length)!=1) {
              m_out << "inlib::http::data_in_file :"
                    << " sscanf error."
                    << std::endl;
              disconnect();
              delete [] buf;
              delete [] bsvr;
              a_first_line.clear();
              return false;
            }
            *end = c_end;
            if(m_verbose) {
              m_out << "inlib::http::data_in_file :"
                    << " found content-length " << content_length
                    << std::endl;
            }
            found_Content_Length = true;
            pos_search_doc = end-bsvr; //start at CR for finding start doc.
            break;
          }
          *end = c_end;
          pos_search_Content_Length = end+1-bsvr;
        }

      }

      if(!found_Transfer_Encoding_chunked) {
        while(true) {
          char* end = 0;
          char* pos = bsvr+pos_search_Transfer_Encoding_chunked;
          char* pend = bsvr+lsvr;
          for(;pos!=pend;pos++) {
            if((*pos)==CR()) {
              end = pos;
              break;
            }
          }
          if(!end) break;

         {char c_end = *end;
          *end = 0; //transform temporarily to C string.
          pos = ::strstr(bsvr+pos_search_Transfer_Encoding_chunked,
                         "Transfer-Encoding: chunked");
          *end = c_end;}

          if(pos) { //found it !
            if(m_verbose) {
              m_out << "inlib::http::data_in_file :"
                    << " found Transfer-Encoding chunked."
                    << std::endl;
            }
            found_Transfer_Encoding_chunked = true;
            pos_search_doc = end-bsvr; //start at CR for finding first chunk.
            break;
          }
          pos_search_Transfer_Encoding_chunked = end+1-bsvr;
        }

      }

      if(found_Content_Length && (pos_beg_doc==NOT_FOUND())) {
        // We have the document length. Search the doc beginning :

        bool found_CR_LF_CR_LF = false;
        char* pos = bsvr+pos_search_doc;
       {char* pend = bsvr+lsvr;
        for(;(pos+3)<pend;pos++) {
          if( ((*(pos+0))==CR()) &&
              ((*(pos+1))==LF()) &&
              ((*(pos+2))==CR()) &&
              ((*(pos+3))==LF())
            ){
            found_CR_LF_CR_LF = true;
            pos += 4;
            break;
          }
        }}
        if(found_CR_LF_CR_LF) {
          if(m_verbose) {
            m_out << "inlib::http::data_in_file :"
                  << " at_once : begin document found."
                  << std::endl;
          }
          pos_beg_doc = pos-bsvr;
          ldoc = content_length;
          to_read = (pos-bsvr)+content_length;
          // have content_length and found beg_doc !
        } else {
          //not found. get more data...
        }
      }

      if(found_Transfer_Encoding_chunked  && (pos_beg_doc==NOT_FOUND())) {
        // We know it is chunked. Search the doc beginning :

        bool found_CR_LF_CR_LF = false;
        char* pos = bsvr+pos_search_doc;
       {char* pend = bsvr+lsvr;
        for(;(pos+3)<pend;pos++) {
          if( ((*(pos+0))==CR()) &&
              ((*(pos+1))==LF()) &&
              ((*(pos+2))==CR()) &&
              ((*(pos+3))==LF())
            ){
            found_CR_LF_CR_LF = true;
            pos += 4;
            break;
          }
        }}
        if(found_CR_LF_CR_LF) {
          if(m_verbose) {
            m_out << "inlib::http::data_in_file :"
                  << " chunked : begin document found."
                  << std::endl;
          }
          pos_beg_doc = pos-bsvr;
          ldoc = 0; //unknown
        } else {
          //not found. get more data...
        }

      }

      if(found_Transfer_Encoding_chunked  &&
         (pos_beg_doc!=NOT_FOUND()) && !chunk_started) {
        //search chunk :

        char* pos = bsvr+pos_beg_doc;

        unsigned int sz_chunk = 0;
       {char* end = bsvr+lsvr;
        if(pos>=end){
          continue;
        }

        char cend = *end;
        *end = 0;

       //{for(int i=0;i<10;i++) {
       //   ::printf("debug : %d : %d %c\n",i,*(pos+i),*(pos+i));
       //}}

        if(::sscanf(pos,"%x",&sz_chunk)!=1) {
          // may need more data.
          // FIXME : yes, but we may have also the case
          // where there is no number at pos !
          continue;
        }
        *end = cend;}

        if(m_verbose) {
          m_out << "inlib::http::data_in_file :"
                << " sz_chunk " << sz_chunk
                << std::endl;
          //::printf("debug : sz_chunk : %x %u\n",sz_chunk,sz_chunk);
        }

       {bool found = false;
        char* pend = bsvr+lsvr;
        for(;(pos+1)<pend;pos++) {
          if(((*(pos+0))==CR())&&((*(pos+1))==LF())) {
            found = true;
            pos += 2;
            break;
          }
        }
        if(found) {

         //{char c1 = *pos;
         // if(is_printable(c1)) printf("%c",c1);
         // else printf("%d",c1);}
         // printf("|\n");

          if(sz_chunk) {
            //chunks.push_back(chunk_t(pos-bsvr,sz_chunk));
            chunks.push_back(chunk_t(0,sz_chunk));
            if(::fwrite(pos,sz_chunk,(size_t)1,a_FILE)!=1) {
              disconnect();
              delete [] buf;
              delete [] bsvr;
              a_first_line.clear();
              return false;
            }

            to_read = (pos-bsvr)+sz_chunk;
            pos_beg_doc = pos+sz_chunk+2-bsvr; //next chunk pos.
            chunk_started = true;
          } else {
            found_chunks = true;
          }

        }}
      }

    }
  }

protected:
  std::string m_host;
};

}}

//inlib_build_use socket

#endif
