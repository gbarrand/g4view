// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_scolor
#define inlib_scolor

// used in osc/OnX.

#include "colord"

#include "svalues" //for values<>
//#include "num2s"

#include "named_colors"

#include <cstdio> //::sscanf

namespace inlib {

inline bool to_rgb(const std::string& a_string,double& a_r,double& a_g,double& a_b){
  a_r = 0.5;
  a_g = 0.5;
  a_b = 0.5;
  if(a_string.empty()) return false;
  std::vector<double> ds;
  if(values<double>(a_string," ",false,ds) && (ds.size()>=3)) {
    if( ds[0]<0 || ds[0]>1 ||
        ds[1]<0 || ds[1]>1 ||
        ds[2]<0 || ds[2]>1 ) return false;
    a_r = ds[0];
    a_g = ds[1];
    a_b = ds[2];
    return true;
  } else if( (a_string.size()==7) && (a_string[0]=='#') ) {
    // #RRGGBB format :
    //  1 3 5
    unsigned int rr;
    if(::sscanf(a_string.substr(1,2).c_str(),"%x",&rr)!=1) return false;
    unsigned int gg;
    if(::sscanf(a_string.substr(3,2).c_str(),"%x",&gg)!=1) return false;
    unsigned int bb;
    if(::sscanf(a_string.substr(5,2).c_str(),"%x",&bb)!=1) return false;
    a_r = double(rr)/255.;
    a_g = double(gg)/255.;
    a_b = double(bb)/255.;
    return true;
  } else {
    const std::map<std::string,const colord*>& named_colors = get_named_colors<colord>();
    colord _color;
    if(!find_named_color(named_colors,a_string,_color)) {
      a_r = 0.5;
      a_g = 0.5;
      a_b = 0.5;
      return false;
    }
    a_r = _color.r();
    a_g = _color.g();
    a_b = _color.b();
    return true;
  }
}

inline bool to_rgba(const std::string& a_string,double& a_r,double& a_g,double& a_b,double& a_a){
  a_r = 0.5;
  a_g = 0.5;
  a_b = 0.5;
  a_a = 0;
  if(a_string.empty()) return false;
  std::vector<double> ds;
  if(values<double>(a_string," ",false,ds) && (ds.size()>=4)) {
    if( ds[0]<0 || ds[0]>1 ||
        ds[1]<0 || ds[1]>1 ||
        ds[2]<0 || ds[2]>1 ||
        ds[3]<0 || ds[3]>1 ) return false;
    a_r = ds[0];
    a_g = ds[1];
    a_b = ds[2];
    a_a = ds[3];
    return true;
  } else {  
    return to_rgb(a_string,a_r,a_g,a_b);
  }
}

}

#endif
