// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

// From SOPHYA/PI/picmap.[h,cc] distributed with copyright :
//   LAL (Orsay) / IN2P3-CNRS  DAPNIA/SPP (Saclay) / CEA

#ifndef inlib_picmap
#define inlib_picmap

#ifdef INLIB_MEM
#include "mem"
#include "S_STRING"
#endif

#include <vector>
#include <string>

namespace inlib {
namespace SOPI { //pi clashes with inlib::pi(). PI clashes with some cpp macro coming for example from wcslib.

class color {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::SOPI::color)
#endif
protected:
  typedef unsigned short ushort;
  typedef unsigned char uchar;
public:
  color():red(0),green(0),blue(0){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  color(ushort a_r,ushort a_g,ushort a_b)
  :red(a_r),green(a_g),blue(a_b){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~color(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  color(const color& a_from)
  :red(a_from.red),green(a_from.green),blue(a_from.blue){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  color& operator=(const color& a_from){
    red = a_from.red;
    green = a_from.green;
    blue = a_from.blue;
    return *this;
  }
  uchar rchar() const {return uchar(255.0*(double(red)/65535.0));}
  uchar gchar() const {return uchar(255.0*(double(green)/65535.0));}
  uchar bchar() const {return uchar(255.0*(double(blue)/65535.0));}
  float r() const {return float(double(red)/65535.0);}
  float g() const {return float(double(green)/65535.0);}
  float b() const {return float(double(blue)/65535.0);}
public:
  ushort red;
  ushort green;
  ushort blue;
};

class cmap {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::SOPI::cmap)
#endif
protected:
  typedef unsigned short ushort;
public:
  static const color& black() {static color s_v(0,0,0);return s_v;}
public:
  cmap(unsigned int a_sz):m_cols(a_sz){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  cmap(const cmap& a_from):m_cols(a_from.m_cols){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  cmap& operator=(const cmap& a_from){
    m_cols = a_from.m_cols;
    return *this;
  }
  virtual ~cmap(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  const color& get_color(unsigned int a_index) const {
    if(a_index>=m_cols.size()) return black();
    return m_cols[a_index];
  }
  size_t size() const {return m_cols.size();}
protected:
  std::vector<color> m_cols;
};

//  CMAP_GREY32     :  32 niveaux de gris
//  CMAP_GREYINV32  :  32 niveaux gris du blanc au noir
//  CMAP_COLRJ32    :  32 couleurs, du Rouge au Jaune/blanc
//  CMAP_COLBR32    :  32 couleurs du bleu au rouge (arcenciel)
//  CMAP_COLRV32    :  32 couleurs du rouge au violet
//  CMAP_GREY128    :  128 niveaux de gris
//  CMAP_GREYINV128 :  128 niveaux gris inverse
//  CMAP_COLRJ128   :  128 couleurs, du Rouge au Jaune/blanc
//  CMAP_COLBR128   :  128 couleurs du bleu au rouge (arcenciel)
//  CMAP_RED32      :  32 couleurs, nuances de rouge
//  CMAP_GREEN32    :  32 couleurs, nuances de vert
//  CMAP_BLUE32     :  32 couleurs, nuances de bleu
//  CMAP_YELLOW32   :  32 couleurs, nuances de jaune
//  CMAP_ORANGE32   :  32 couleurs, nuances d'orange
//  CMAP_CYAN32     :  32 couleurs, nuances de cyan
//  CMAP_VIOLET32   :  32 couleurs, nuances de violet
//  CMAP_COL16      :  16 Couleurs arcenciel
//  CMAP_COL64      :  64 Couleurs arcenciel
//  CMAP_RGB216     :  216 couleurs, 6x6x6 couleurs en composantes RGB
//  CMAP_RGB512     :  512 couleurs, 8x8x8 couleurs en composantes RGB
//  CMAP_RGB4096    :  4096 couleurs, 16x16x16 couleurs en composantes RGB
//  CMAP_RGB32768   :  32768 couleurs, 32x32x32 couleurs en composantes RGB

//  CMAP_OTHER      :  Table non standard

//  Toutes les tables de couleurs standard possèdent 256 cellules de couleurs,
//  contenant 16 ou 32 ou 128 (ou 216) couleurs distinctes,
//  sauf CMAP_RGB512 , CMAP_RGB4096 et CMAP_RGB32768.

class grey32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::grey32");
    return s_v;
  }
public:
  grey32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 3535+(i*62000/32);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~grey32(){}
public:
  grey32(const grey32& a_from):cmap(a_from){}
  grey32& operator=(const grey32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class greyinv32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::greyinv32");
    return s_v;
  }
public:
  greyinv32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 3535+(i*62000/32);
      for(unsigned int k=0; k<8; k++) m_cols[m_cols.size()-(i*8+k)-1] = mycol;
    }
  }
  virtual ~greyinv32(){}
public:
  greyinv32(const greyinv32& a_from):cmap(a_from){}
  greyinv32& operator=(const greyinv32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class grey128 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::grey128");
    return s_v;
  }
public:
  grey128():cmap(256){
    color mycol;
    for(unsigned int i=0; i<128; i++) {
      mycol.red = mycol.green = mycol.blue = 2035+(i*500);
      for(unsigned int k=0; k<2; k++) m_cols[i*2+k] = mycol;
    }
  }
  virtual ~grey128(){}
public:
  grey128(const grey128& a_from):cmap(a_from){}
  grey128& operator=(const grey128& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class greyinv128 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::greyinv128");
    return s_v;
  }
public:
  greyinv128():cmap(256){
    color mycol;
    for(unsigned int i=0; i<128; i++) {
      mycol.red = mycol.green = mycol.blue = 2035+(i*500);
      for(unsigned int k=0; k<2; k++) m_cols[m_cols.size()-(i*2+k)-1] = mycol;
    }
  }
  virtual ~greyinv128(){}
public:
  greyinv128(const greyinv128& a_from):cmap(a_from){}
  greyinv128& operator=(const greyinv128& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class grey256 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::grey256");
    return s_v;
  }
public:
  grey256():cmap(256){
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = mycol.green = mycol.blue = i*257;
      m_cols[i] = mycol;
    }
  }
  virtual ~grey256(){}
public:
  grey256(const grey256& a_from):cmap(a_from){}
  grey256& operator=(const grey256& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class col16 : public cmap {
  static double R_RGB1(unsigned int a_index) {
    static const double s_v[16] =
    {0.0,0.00,0.0,0.0,0.0,0.00,0.0,0.6,0.8,1.0,1.00,1.0,0.75,1.0,0.85,1.0};
    return s_v[a_index];
  }
  static double G_RGB1(unsigned int a_index) {
    static const double s_v[16] =
    {0.0,0.00,0.0,0.8,1.0,1.00,1.0,0.8,0.8,1.0,0.75,0.6,0.00,0.0,0.0,0.0};
    return s_v[a_index];
  }
  static double B_RGB1(unsigned int a_index) {
    static const double s_v[16] =
    {0.0,0.75,1.0,1.0,1.0,0.75,0.0,0.0,0.0,0.0,0.00,0.5,0.75,1.0,0.0,0.0};
    return s_v[a_index];
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::col16");
    return s_v;
  }
public:
  col16():cmap(256){
    color mycol;
    for(unsigned int i=0; i<16; i++) {
      mycol.red = (unsigned short)(R_RGB1(i)*65535.0);
      mycol.green = (unsigned short)(G_RGB1(i)*65535.0);
      mycol.blue =(unsigned short)(B_RGB1(i)*65535.0) ;
      for(unsigned int k=0; k<16; k++) m_cols[i*16+k] = mycol;
    }
  }
  virtual ~col16(){}
public:
  col16(const col16& a_from):cmap(a_from){}
  col16& operator=(const col16& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class colrj32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::colrj32");
    return s_v;
  }
public:
  colrj32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<32; i++) {
      if (i < 12)  {
        mycol.green = mycol.blue = 0;
        mycol.red = 21535+(i*4000);
      } else if (i < 24) {
        mycol.blue = 0;   mycol.red = 65535;
        mycol.green = 21535+(i-12)*4000;
      } else {
        mycol.green = mycol.red = 65535;
        mycol.blue = 17535+(i-23)*6000;
      }
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~colrj32(){}
public:
  colrj32(const colrj32& a_from):cmap(a_from){}
  colrj32& operator=(const colrj32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class colbr32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::colbr32");
    return s_v;
  }
public:
  colbr32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<32; i++) {
      if (i < 5) {
        mycol.green = mycol.red = 0;    // Du bleu sombre au bleu clair
        mycol.blue = 5535+i*15000;
      } else if (i < 10) {
        mycol.blue = 65535; // Plein bleu - On rajoute du vert -> bleu clair
        mycol.green = 5535+(i-5)*9000;
        mycol.red = 0;
      } else if (i < 15) {
        mycol.blue = 60000-(i-10)*15000;   // On passe au vert
        mycol.green = 41535+(i-10)*6000;
        mycol.red = 0;
      } else if (i < 21) {
        mycol.blue = 0;
        mycol.green = 65535; // Plein vert, on rajoute du rouge -> jaune
        mycol.red = 5535+(i-15)*12000;
      } else if (i < 27) {
        mycol.blue = 0;                     //  On diminue vert -> Orange
        mycol.green = 60000-(i-21)*12000;
        mycol.red = 65535-(i-21)*2000;
      } else {
        mycol.blue = 0;                     // Plein rouge
        mycol.green = 0;
        mycol.red = 57535+(i-27)*2000;
      }

      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~colbr32(){}
public:
  colbr32(const colbr32& a_from):cmap(a_from){}
  colbr32& operator=(const colbr32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class colrv32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::colrv32");
    return s_v;
  }
public:
  colrv32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<32; i++) {
      if (i < 9) {
        mycol.green = i*5000; mycol.blue = 0;
        mycol.red = i*6000;
      } else if (i < 15) {
	mycol.green = 40000;
	mycol.blue = 0;
	mycol.red = 50000+(i-9)*1000;
      } else if (i < 21) {
        mycol.green = 40000-(i-15)*8000;
        mycol.blue = 0;
        mycol.red = 57535+(i-15)*1600;
      } else {
        mycol.green = 0;  mycol.red = 65535;
        mycol.blue = 15535+(i-21)*5000;
      }
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~colrv32(){}
public:
  colrv32(const colrv32& a_from):cmap(a_from){}
  colrv32& operator=(const colrv32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class colrj128 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::colrj128");
    return s_v;
  }
public:
  colrj128():cmap(256){
    color mycol;
    for(unsigned int i=0; i<128; i++) {
      if (i < 48)  {
          mycol.green = mycol.blue = 0;
          mycol.red = 5375+(i*1280);
      } else if (i < 96) {
          mycol.blue = 0;   mycol.red = 65535;
          mycol.green = 5375+((i-48)*1280);
      } else {
          mycol.green = mycol.red = 65535;
          mycol.blue = 3535+(i-96)*2000;
      }
      for(unsigned int k=0; k<2; k++) m_cols[i*2+k] = mycol;
    }
  }
  virtual ~colrj128(){}
public:
  colrj128(const colrj128& a_from):cmap(a_from){}
  colrj128& operator=(const colrj128& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class colbr128 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::colbr128");
    return s_v;
  }
public:
  colbr128():cmap(256){
    color mycol;
    for(unsigned int i=0; i<128; i++) {
      if (i < 20) {
        mycol.green = mycol.red = 0;  // Du bleu sombre au bleu clair
        mycol.blue = 2835+i*3300;
      } else if (i < 36) {
        mycol.blue = 65535; // Plein bleu - On rajoute du vert -> bleu clair
        mycol.green = 3000+(i-20)*2000;
        mycol.red = 0;
      } else if (i < 56) {
        mycol.blue = 64600-(i-36)*3400;    // On passe au vert
        mycol.green = 32300+(i-36)*1700;
        mycol.red = 0;
      } else if (i < 81) {
        mycol.blue = 0; // Plein vert, on rajoute du rouge -> jaune
        mycol.green = 65535;
        mycol.red = 3135+(i-56)*2600;
      } else if (i < 96) {
        mycol.blue = 0;
        mycol.green = 63535-(i-80)*2000;
        mycol.red = 65535;
      } else if (i < 112) {
        mycol.blue = 0;
        mycol.green = 30000-(i-96)*2000;
        mycol.red = 65535-(i-96)*1000;
      } else {
        mycol.blue = 0;
        mycol.green = 0 ;
        mycol.red = 50535+(i-112)*1000;
      }
      for(unsigned int k=0; k<2; k++) m_cols[i*2+k] = mycol;
    }
  }
  virtual ~colbr128(){}
public:
  colbr128(const colbr128& a_from):cmap(a_from){}
  colbr128& operator=(const colbr128& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class red32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::red32");
    return s_v;
  }
public:
  red32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(i*4000);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(20000+(i-5)*2500);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(45000+(i-15)*1283.4);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~red32(){}
public:
  red32(const red32& a_from):cmap(a_from){}
  red32& operator=(const red32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class green32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::green32");
    return s_v;
  }
public:
  green32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = ushort(i*4000);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = ushort(20000+(i-5)*2500);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = ushort(45000+(i-15)*1283.4);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~green32(){}
public:
  green32(const green32& a_from):cmap(a_from){}
  green32& operator=(const green32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class blue32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::blue32");
    return s_v;
  }
public:
  blue32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.blue = ushort(i*4000);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.blue = ushort(20000+(i-5)*2500);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.blue = ushort(45000+(i-15)*1283.4);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~blue32(){}
public:
  blue32(const blue32& a_from):cmap(a_from){}
  blue32& operator=(const blue32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class yellow32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::yellow32");
    return s_v;
  }
public:
  yellow32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.red = ushort(i*4000);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.red = ushort(20000+(i-5)*2500);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.red = ushort(45000+(i-15)*1283.4);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~yellow32(){}
public:
  yellow32(const yellow32& a_from):cmap(a_from){}
  yellow32& operator=(const yellow32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class orange32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::orange32");
    return s_v;
  }
public:
  orange32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      int vcol = i*4000;
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(vcol);
      mycol.green = ushort(vcol*0.65);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      int vcol = 20000+(i-5)*2500;
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(vcol);
      mycol.green = ushort(vcol*0.65);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      int vcol = int(45000+(i-15)*1283.4);
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(vcol);
      mycol.green = ushort(vcol*0.65);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~orange32(){}
public:
  orange32(const orange32& a_from):cmap(a_from){}
  orange32& operator=(const orange32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class cyan32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::cyan32");
    return s_v;
  }
public:
  cyan32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.blue = ushort(i*4000);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.blue = ushort(20000+(i-5)*2500);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.green = mycol.blue = ushort(45000+(i-15)*1283.4);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~cyan32(){}
public:
  cyan32(const cyan32& a_from):cmap(a_from){}
  cyan32& operator=(const cyan32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class violet32 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::violet32");
    return s_v;
  }
public:
  violet32():cmap(256){
    color mycol;
    for(unsigned int i=0; i<6; i++) {
      int vcol = i*4000;
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(0.6*vcol);
      mycol.green = ushort(0.2*vcol);
      mycol.blue = ushort(vcol);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=6; i<16; i++) {
      int vcol = 20000+(i-5)*2500;
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(0.6*vcol);
      mycol.green = ushort(0.2*vcol);
      mycol.blue = ushort(vcol);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
    for(unsigned int i=16; i<32; i++) {
      int vcol = int(45000+(i-15)*1283.4);
      mycol.red = mycol.green = mycol.blue = 0;
      mycol.red = ushort(0.6*vcol);
      mycol.green = ushort(0.2*vcol);
      mycol.blue = ushort(vcol);
      for(unsigned int k=0; k<8; k++) m_cols[i*8+k] = mycol;
    }
  }
  virtual ~violet32(){}
public:
  violet32(const violet32& a_from):cmap(a_from){}
  violet32& operator=(const violet32& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class col64 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::col64");
    return s_v;
  }
public:
  col64():cmap(256){
    color mycol;
    double fci_1[5] = { 0.60, 0.70, 0.80, 0.90, 1.0};
    double fci_21[8] = { 1.0, 1.0, 1.0, 1.0, 0.8, 0.6, 0.4 };
    double fci_22[8] = { 0.4, 0.6, 0.8, 1.0, 1.0, 1.0, 1.0 };
    double fci_3[3] = { 0.4, 0.80, 1.0 };
    unsigned int i = 0;
    unsigned int i1,i2,i3,ici;
    // D'abord le noir (+1 comb)
    mycol.red = mycol.green = mycol.blue = 0;
    for(ici=0; ici<4; ici++) {
      m_cols[i] = mycol; i++;
    }
    // les rouges (+5 comb)
    mycol.green =  mycol.blue = 0;
    for(i1=0; i1<5; i1++) {
      mycol.red = ushort(fci_1[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite, rouge+vert (+7 comb)
    mycol.blue = 0;
    for(i1=0; i1<7; i1++) {
      mycol.red = ushort(fci_21[i1]*65530.);
      mycol.green = ushort(fci_22[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite les verts (+5 comb)
    mycol.red =  mycol.blue = 0;
    for(i1=0; i1<5; i1++) {
      mycol.green = ushort(fci_1[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite les verts+bleu (+7 comb)
    mycol.red = 0;
    for(i1=0; i1<7; i1++) {
      mycol.green = ushort(fci_21[i1]*65530.);
      mycol.blue = ushort(fci_22[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite les bleus (+5 comb)
    mycol.red =  mycol.green = 0;
    for(i1=0; i1<5; i1++) {
      mycol.blue = ushort(fci_1[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite les bleu+rouge (+7 comb)
    mycol.green = 0;
    for(i1=0; i1<7; i1++) {
      mycol.blue = ushort(fci_21[i1]*65530.);
      mycol.red = ushort(fci_22[i1]*65530.);
      for(ici=0; ici<4; ici++) {
        m_cols[i] = mycol; i++;
      }
    }
    // Ensuite les bleu+rouge+vert (+27 comb)
    for(i1=0; i1<3; i1++)
      for(i2=0; i2<3; i2++)
        for(i3=0; i3<3; i3++) {
          mycol.red = ushort(fci_3[i1]*65530.);
          mycol.green = ushort(fci_3[i2]*65530.);
          mycol.blue = ushort(fci_3[i3]*65530.);
          for(ici=0; ici<4; ici++) {
            m_cols[i] = mycol; i++;
          }
        }
  }
  virtual ~col64(){}
public:
  col64(const col64& a_from):cmap(a_from){}
  col64& operator=(const col64& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class rgb216 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::rgb216");
    return s_v;
  }
public:
  rgb216():cmap(256){
    color mycol;
    unsigned int i = 0;
    for(unsigned int kb=0; kb<6; kb++) {
      mycol.blue = (unsigned short)(kb*65535/5);
      for(unsigned int jg=0; jg<6; jg++) {
        mycol.green = (unsigned short)(jg*65535/5);
        for(unsigned int ir=0; ir<6; ir++) {
          mycol.red = (unsigned short)(ir*65535/5);
          m_cols[i] = mycol;i++;
        }
      }
    }
    mycol.blue = mycol.green =  mycol.red = 65535;
    for(i=216; i<256; i++) m_cols[i] = mycol;
  }
  virtual ~rgb216(){}
public:
  rgb216(const rgb216& a_from):cmap(a_from){}
  rgb216& operator=(const rgb216& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class rgb512 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::rgb512");
    return s_v;
  }
public:
  rgb512():cmap(512){
    color mycol;
    unsigned int nlev = 8;
    unsigned int drgb = 65535/(nlev-1);
    unsigned int i = 0;
    for(unsigned int kb=0; kb<nlev; kb++) {
      mycol.blue = (unsigned short)(kb*drgb);
      for(unsigned int jg=0; jg<nlev; jg++) {
        mycol.green = (unsigned short)(jg*drgb);
        for(unsigned int ir=0; ir<nlev; ir++) {
          mycol.red = (unsigned short)(ir*drgb);
          m_cols[i] = mycol;   i++;
        }
      }
    }
  }
  virtual ~rgb512(){}
public:
  rgb512(const rgb512& a_from):cmap(a_from){}
  rgb512& operator=(const rgb512& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class rgb4096 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::rgb4096");
    return s_v;
  }
public:
  rgb4096():cmap(4096){
    color mycol;
    unsigned int nlev = 16;
    unsigned int drgb = 65535/(nlev-1);
    unsigned int i = 0;
    for(unsigned int kb=0; kb<nlev; kb++) {
      mycol.blue = (unsigned short)(kb*drgb);
      for(unsigned int jg=0; jg<nlev; jg++) {
        mycol.green = (unsigned short)(jg*drgb);
        for(unsigned int ir=0; ir<nlev; ir++) {
          mycol.red = (unsigned short)(ir*drgb);
          m_cols[i] = mycol;   i++;
        }
      }
    }
  }
  virtual ~rgb4096(){}
public:
  rgb4096(const rgb4096& a_from):cmap(a_from){}
  rgb4096& operator=(const rgb4096& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class rgb32768 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::rgb32768");
    return s_v;
  }
public:
  rgb32768():cmap(32768){
    color mycol;
    unsigned int nlev = 32;
    unsigned int drgb = 65535/(nlev-1);
    unsigned int i = 0;
    for(unsigned int kb=0; kb<nlev; kb++) {
      mycol.blue = (unsigned short)(kb*drgb);
      for(unsigned int jg=0; jg<nlev; jg++) {
        mycol.green = (unsigned short)(jg*drgb);
        for(unsigned int ir=0; ir<nlev; ir++) {
          mycol.red = (unsigned short)(ir*drgb);
          m_cols[i] = mycol;   i++;
        }
      }
    }
  }
  virtual ~rgb32768(){}
public:
  rgb32768(const rgb32768& a_from):cmap(a_from){}
  rgb32768& operator=(const rgb32768& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_pastel : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_pastel");
    return s_v;
  }
public:
  midas_pastel():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.01961, 0.05490, 0.08627, 0.10980, 0.13725, 0.15686,
0.18039, 0.20000, 0.21569, 0.23529, 0.25098, 0.26275, 0.28235, 0.29412,
0.30588, 0.31765, 0.33333, 0.34118, 0.35294, 0.36078, 0.37255, 0.38431,
0.39216, 0.40000, 0.41176, 0.41961, 0.43137, 0.43529, 0.44314, 0.45098,
0.45882, 0.46667, 0.47059, 0.48235, 0.48627, 0.49412, 0.50196, 0.50588,
0.50980, 0.51765, 0.52157, 0.53333, 0.53725, 0.54118, 0.54902, 0.55294,
0.55686, 0.56078, 0.56471, 0.57255, 0.58039, 0.58431, 0.58824, 0.59216,
0.59608, 0.60000, 0.60392, 0.60784, 0.61176, 0.61569, 0.61961, 0.62745,
0.63137, 0.63529, 0.63922, 0.64314, 0.64706, 0.65098, 0.65490, 0.65490,
0.65882, 0.66275, 0.66667, 0.67059, 0.67843, 0.67843, 0.68235, 0.68627,
0.69020, 0.69020, 0.69412, 0.69804, 0.70196, 0.70196, 0.70588, 0.70980,
0.71373, 0.71373, 0.71765, 0.72157, 0.72157, 0.72941, 0.73333, 0.73333,
0.73725, 0.74118, 0.74118, 0.74510, 0.74510, 0.74902, 0.75294, 0.75294,
0.75686, 0.76078, 0.76078, 0.76471, 0.76471, 0.76863, 0.76863, 0.77255,
0.78039, 0.78039, 0.78431, 0.78431, 0.78824, 0.78824, 0.79216, 0.79216,
0.79608, 0.79608, 0.80000, 0.80000, 0.80392, 0.80392, 0.80784, 0.80784,
0.81176, 0.81176, 0.81569, 0.81569, 0.81961, 0.81961, 0.82745, 0.82745,
0.83137, 0.83137, 0.83529, 0.83529, 0.83922, 0.83922, 0.83922, 0.84314,
0.84314, 0.84706, 0.84706, 0.85098, 0.85098, 0.85490, 0.85490, 0.85490,
0.85882, 0.85882, 0.86275, 0.86275, 0.86275, 0.86667, 0.86667, 0.87059,
0.87059, 0.87059, 0.87843, 0.87843, 0.88235, 0.88235, 0.88235, 0.88627,
0.88627, 0.89020, 0.89020, 0.89020, 0.89412, 0.89412, 0.89412, 0.89804,
0.89804, 0.89804, 0.90196, 0.90196, 0.90588, 0.90588, 0.90588, 0.90980,
0.90980, 0.90980, 0.91373, 0.91373, 0.91373, 0.91765, 0.91765, 0.91765,
0.92157, 0.92157, 0.92157, 0.92941, 0.92941, 0.92941, 0.93333, 0.93333,
0.93333, 0.93725, 0.93725, 0.93725, 0.94118, 0.94118, 0.94118, 0.94118,
0.94510, 0.94510, 0.94510, 0.94902, 0.94902, 0.94902, 0.95294, 0.95294,
0.95294, 0.95686, 0.95686, 0.95686, 0.95686, 0.96078, 0.96078, 0.96078,
0.96471, 0.96471, 0.96471, 0.96471, 0.96863, 0.96863, 0.96863, 0.97255,
0.97255, 0.97255, 0.97255, 0.98039, 0.98039, 0.98039, 0.98039, 0.98431,
0.98431, 0.98431, 0.98824, 0.98824, 0.98824, 0.98824, 0.99216, 0.99216,
0.99216, 0.99216, 0.99608, 0.99608, 0.99608, 0.99608, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00784, 0.00784, 0.00784, 0.00784, 0.01176, 0.01176, 0.01176,
0.01176, 0.01176, 0.01569, 0.01569, 0.01569, 0.01569, 0.01961, 0.01961,
0.01961, 0.01961, 0.02353, 0.02353, 0.02353, 0.02745, 0.02745, 0.02745,
0.02745, 0.03137, 0.03137, 0.03137, 0.03529, 0.03529, 0.03529, 0.03529,
0.04314, 0.04314, 0.04314, 0.04706, 0.04706, 0.04706, 0.05098, 0.05098,
0.05098, 0.05490, 0.05490, 0.05490, 0.05882, 0.05882, 0.05882, 0.06275,
0.06275, 0.06275, 0.06667, 0.06667, 0.06667, 0.07059, 0.07059, 0.07451,
0.07451, 0.07451, 0.07843, 0.07843, 0.08235, 0.08235, 0.08235, 0.08627,
0.08627, 0.09020, 0.09020, 0.09020, 0.09412, 0.09412, 0.09804, 0.09804,
0.10196, 0.10196, 0.10588, 0.10588, 0.10980, 0.10980, 0.10980, 0.11765,
0.11765, 0.12157, 0.12157, 0.12549, 0.12549, 0.12941, 0.12941, 0.13333,
0.13725, 0.13725, 0.14118, 0.14118, 0.14510, 0.14510, 0.14902, 0.14902,
0.15294, 0.15686, 0.15686, 0.16078, 0.16078, 0.16471, 0.16863, 0.16863,
0.17255, 0.17255, 0.17647, 0.18039, 0.18039, 0.18431, 0.18824, 0.18824,
0.19608, 0.20000, 0.20000, 0.20392, 0.20784, 0.20784, 0.21176, 0.21569,
0.21961, 0.21961, 0.22353, 0.22745, 0.23137, 0.23137, 0.23529, 0.23922,
0.24314, 0.24314, 0.24706, 0.25098, 0.25490, 0.25882, 0.26275, 0.26275,
0.27059, 0.27451, 0.27843, 0.28235, 0.28627, 0.29020, 0.29412, 0.29804,
0.29804, 0.30196, 0.30588, 0.30980, 0.31373, 0.31765, 0.32157, 0.32549,
0.33333, 0.33725, 0.34118, 0.34510, 0.34902, 0.35294, 0.35686, 0.36078,
0.36471, 0.37255, 0.37647, 0.38039, 0.38431, 0.38824, 0.39216, 0.40000,
0.40392, 0.40784, 0.41176, 0.41961, 0.42353, 0.42745, 0.43529, 0.43922,
0.44314, 0.45098, 0.45490, 0.45882, 0.46667, 0.47059, 0.47843, 0.48235,
0.49020, 0.49412, 0.50196, 0.50588, 0.51373, 0.51765, 0.52549, 0.52941,
0.53725, 0.54118, 0.54902, 0.55686, 0.56078, 0.56863, 0.57647, 0.58039,
0.58824, 0.59608, 0.60000, 0.60784, 0.61569, 0.62353, 0.63137, 0.63529,
0.64314, 0.65098, 0.65882, 0.66667, 0.67451, 0.68235, 0.69020, 0.69804,
0.70588, 0.71373, 0.72157, 0.72941, 0.73725, 0.74510, 0.75294, 0.76078,
0.77255, 0.78039, 0.78824, 0.79608, 0.80392, 0.81569, 0.82353, 0.83137,
0.84314, 0.85098, 0.86275, 0.87059, 0.87843, 0.89020, 0.89804, 0.90980,
0.91765, 0.92941, 0.94118, 0.94902, 0.96078, 0.97255, 0.98039, 0.99216
};
    static const double rgb_b[256] = {
0.00000, 1.00000, 0.98039, 0.94510, 0.91373, 0.89020, 0.86275, 0.84314,
0.81961, 0.80000, 0.78431, 0.76471, 0.74902, 0.73725, 0.71765, 0.70588,
0.69412, 0.68235, 0.66667, 0.65882, 0.64706, 0.63922, 0.62745, 0.61569,
0.60784, 0.60000, 0.58824, 0.58039, 0.56863, 0.56471, 0.55686, 0.54902,
0.54118, 0.53333, 0.52941, 0.51765, 0.51373, 0.50588, 0.49804, 0.49412,
0.49020, 0.48235, 0.47843, 0.46667, 0.46275, 0.45882, 0.45098, 0.44706,
0.44314, 0.43922, 0.43529, 0.42745, 0.41961, 0.41569, 0.41176, 0.40784,
0.40392, 0.40000, 0.39608, 0.39216, 0.38824, 0.38431, 0.38039, 0.37255,
0.36863, 0.36471, 0.36078, 0.35686, 0.35294, 0.34902, 0.34510, 0.34510,
0.34118, 0.33725, 0.33333, 0.32941, 0.32157, 0.32157, 0.31765, 0.31373,
0.30980, 0.30980, 0.30588, 0.30196, 0.29804, 0.29804, 0.29412, 0.29020,
0.28627, 0.28627, 0.28235, 0.27843, 0.27843, 0.27059, 0.26667, 0.26667,
0.26275, 0.25882, 0.25882, 0.25490, 0.25490, 0.25098, 0.24706, 0.24706,
0.24314, 0.23922, 0.23922, 0.23529, 0.23529, 0.23137, 0.23137, 0.22745,
0.21961, 0.21961, 0.21569, 0.21569, 0.21176, 0.21176, 0.20784, 0.20784,
0.20392, 0.20392, 0.20000, 0.20000, 0.19608, 0.19608, 0.19216, 0.19216,
0.18824, 0.18824, 0.18431, 0.18431, 0.18039, 0.18039, 0.17255, 0.17255,
0.16863, 0.16863, 0.16471, 0.16471, 0.16078, 0.16078, 0.16078, 0.15686,
0.15686, 0.15294, 0.15294, 0.14902, 0.14902, 0.14510, 0.14510, 0.14510,
0.14118, 0.14118, 0.13725, 0.13725, 0.13725, 0.13333, 0.13333, 0.12941,
0.12941, 0.12941, 0.12157, 0.12157, 0.11765, 0.11765, 0.11765, 0.11373,
0.11373, 0.10980, 0.10980, 0.10980, 0.10588, 0.10588, 0.10588, 0.10196,
0.10196, 0.10196, 0.09804, 0.09804, 0.09412, 0.09412, 0.09412, 0.09020,
0.09020, 0.09020, 0.08627, 0.08627, 0.08627, 0.08235, 0.08235, 0.08235,
0.07843, 0.07843, 0.07843, 0.07059, 0.07059, 0.07059, 0.06667, 0.06667,
0.06667, 0.06275, 0.06275, 0.06275, 0.05882, 0.05882, 0.05882, 0.05882,
0.05490, 0.05490, 0.05490, 0.05098, 0.05098, 0.05098, 0.04706, 0.04706,
0.04706, 0.04314, 0.04314, 0.04314, 0.04314, 0.03922, 0.03922, 0.03922,
0.03529, 0.03529, 0.03529, 0.03529, 0.03137, 0.03137, 0.03137, 0.02745,
0.02745, 0.02745, 0.02745, 0.01961, 0.01961, 0.01961, 0.01961, 0.01569,
0.01569, 0.01569, 0.01176, 0.01176, 0.01176, 0.01176, 0.00784, 0.00784,
0.00784, 0.00784, 0.00392, 0.00392, 0.00392, 0.00392, 0.00000, 0.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_pastel(){}
public:
  midas_pastel(const midas_pastel& a_from):cmap(a_from){}
  midas_pastel& operator=(const midas_pastel& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_heat : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_heat");
    return s_v;
  }
public:
  midas_heat():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.01176, 0.02353, 0.03529, 0.04706, 0.05882, 0.07059, 0.08235,
0.09412, 0.10588, 0.11765, 0.12941, 0.14118, 0.15294, 0.16471, 0.17647,
0.18824, 0.20000, 0.21176, 0.22353, 0.23529, 0.24706, 0.25882, 0.27059,
0.28235, 0.29412, 0.30588, 0.31765, 0.32941, 0.34118, 0.35294, 0.36471,
0.37647, 0.38824, 0.40000, 0.41176, 0.42353, 0.43529, 0.44706, 0.45882,
0.47059, 0.48235, 0.49412, 0.50588, 0.51765, 0.52941, 0.54118, 0.55294,
0.56471, 0.57647, 0.58824, 0.60000, 0.61176, 0.62353, 0.63529, 0.64706,
0.65882, 0.67059, 0.68235, 0.69412, 0.70588, 0.71765, 0.72941, 0.74118,
0.75294, 0.76471, 0.77647, 0.78824, 0.80000, 0.81176, 0.82353, 0.83529,
0.84706, 0.85882, 0.87059, 0.88235, 0.89412, 0.90588, 0.91765, 0.92941,
0.94118, 0.95294, 0.96471, 0.97647, 0.98824, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745,
0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490, 0.05882,
0.06275, 0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627, 0.09020,
0.09412, 0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765, 0.12157,
0.12549, 0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902, 0.15294,
0.15686, 0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039, 0.18431,
0.18824, 0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176, 0.21569,
0.21961, 0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314, 0.24706,
0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843,
0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980,
0.31373, 0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.33725, 0.34118,
0.34510, 0.34902, 0.35294, 0.35686, 0.36078, 0.36471, 0.36863, 0.37255,
0.37647, 0.38039, 0.38431, 0.38824, 0.39216, 0.39608, 0.40000, 0.40392,
0.40784, 0.41176, 0.41569, 0.41961, 0.42353, 0.42745, 0.43137, 0.43529,
0.43922, 0.44314, 0.44706, 0.45098, 0.45490, 0.45882, 0.46275, 0.46667,
0.47059, 0.47451, 0.47843, 0.48235, 0.48627, 0.49020, 0.49412, 0.49804,
0.50196, 0.50588, 0.50980, 0.51373, 0.51765, 0.52157, 0.52549, 0.52941,
0.53333, 0.53725, 0.54118, 0.54510, 0.54902, 0.55294, 0.55686, 0.56078,
0.56471, 0.56863, 0.57255, 0.57647, 0.58039, 0.58431, 0.58824, 0.59216,
0.59608, 0.60000, 0.60392, 0.60784, 0.61176, 0.61569, 0.61961, 0.62353,
0.62745, 0.63137, 0.63529, 0.63922, 0.64314, 0.64706, 0.65098, 0.65490,
0.65882, 0.66275, 0.66667, 0.67059, 0.67451, 0.67843, 0.68235, 0.68627,
0.69020, 0.69412, 0.69804, 0.70196, 0.70588, 0.70980, 0.71373, 0.71765,
0.72157, 0.72549, 0.72941, 0.73333, 0.73725, 0.74118, 0.74510, 0.74902,
0.75294, 0.75686, 0.76078, 0.76471, 0.76863, 0.77255, 0.77647, 0.78039,
0.78431, 0.78824, 0.79216, 0.79608, 0.80000, 0.80392, 0.80784, 0.81176,
0.81569, 0.81961, 0.82353, 0.82745, 0.83137, 0.83529, 0.83922, 0.84314,
0.84706, 0.85098, 0.85490, 0.85882, 0.86275, 0.86667, 0.87059, 0.87451,
0.87843, 0.88235, 0.88627, 0.89020, 0.89412, 0.89804, 0.90196, 0.90588,
0.90980, 0.91373, 0.91765, 0.92157, 0.92549, 0.92941, 0.93333, 0.93725,
0.94118, 0.94510, 0.94902, 0.95294, 0.95686, 0.96078, 0.96471, 0.96863,
0.97255, 0.97647, 0.98039, 0.98431, 0.98824, 0.99216, 0.99608, 1.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.01176, 0.02353,
0.03529, 0.04706, 0.05882, 0.07059, 0.08235, 0.09412, 0.10588, 0.11765,
0.12941, 0.14118, 0.15294, 0.16471, 0.17647, 0.18824, 0.20000, 0.21176,
0.22353, 0.23529, 0.24706, 0.25882, 0.27059, 0.28235, 0.29412, 0.30588,
0.31765, 0.32941, 0.34118, 0.35294, 0.36471, 0.37647, 0.38824, 0.40000,
0.41176, 0.42353, 0.43529, 0.44706, 0.45882, 0.47059, 0.48235, 0.49412,
0.50588, 0.51765, 0.52941, 0.54118, 0.55294, 0.56471, 0.57647, 0.58824,
0.60000, 0.61176, 0.62353, 0.63529, 0.64706, 0.65882, 0.67059, 0.68235,
0.69412, 0.70588, 0.71765, 0.72941, 0.74118, 0.75294, 0.76471, 0.77647,
0.78824, 0.80000, 0.81176, 0.82353, 0.83529, 0.84706, 0.85882, 0.87059,
0.88235, 0.89412, 0.90588, 0.91765, 0.92941, 0.94118, 0.95294, 0.96471,
0.97647, 0.98824, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_heat(){}
public:
  midas_heat(const midas_heat& a_from):cmap(a_from){}
  midas_heat& operator=(const midas_heat& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_rainbow3 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_rainbow3");
    return s_v;
  }
public:
  midas_rainbow3():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.04706, 0.09412, 0.14118, 0.18824, 0.23529, 0.28235, 0.32941,
0.37647, 0.42353, 0.47059, 0.51765, 0.56471, 0.61176, 0.65882, 0.70588,
0.72549, 0.74510, 0.76471, 0.78431, 0.80392, 0.82353, 0.84314, 0.86275,
0.88235, 0.90196, 0.92157, 0.94118, 0.96078, 0.98039, 1.00000, 0.99608,
0.99608, 0.99608, 0.99608, 0.99608, 0.99216, 0.99216, 0.99216, 0.99216,
0.99216, 0.98824, 0.98824, 0.98824, 0.98824, 0.98824, 0.98824, 0.98824,
0.98824, 0.98824, 0.99216, 0.99216, 0.99216, 0.99216, 0.99216, 0.99608,
0.99608, 0.99608, 0.99608, 0.99608, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.03137, 0.06275,
0.09412, 0.12549, 0.15686, 0.18824, 0.21961, 0.25490, 0.28627, 0.31765,
0.34902, 0.38039, 0.41176, 0.44314, 0.47843, 0.49804, 0.51765, 0.53725,
0.55686, 0.58039, 0.60000, 0.61961, 0.63922, 0.65882, 0.68235, 0.70196,
0.72157, 0.74118, 0.76078, 0.78431, 0.79608, 0.81176, 0.82745, 0.83922,
0.85490, 0.87059, 0.88235, 0.89804, 0.91373, 0.92549, 0.94118, 0.95686,
0.96863, 0.98431, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.98039,
0.96078, 0.94510, 0.92549, 0.90588, 0.89020, 0.87059, 0.85098, 0.83529,
0.81569, 0.79608, 0.78039, 0.76078, 0.74118, 0.72549, 0.70588, 0.69020,
0.67451, 0.65490, 0.63922, 0.62353, 0.60392, 0.58824, 0.57255, 0.55294,
0.53725, 0.52157, 0.50196, 0.48627, 0.47059, 0.43922, 0.40784, 0.37647,
0.34510, 0.31373, 0.28235, 0.25098, 0.21569, 0.18431, 0.15294, 0.12157,
0.09020, 0.05882, 0.02745, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.03529,
0.07059, 0.10588, 0.14118, 0.18039, 0.21569, 0.25098, 0.28627, 0.32549,
0.36078, 0.39608, 0.43137, 0.47059, 0.48627, 0.50588, 0.52157, 0.54118,
0.56078, 0.57647, 0.59608, 0.61176, 0.63137, 0.65098, 0.66667, 0.68627,
0.70588, 0.74510, 0.78824, 0.83137, 0.87059, 0.91373, 0.95686, 1.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.03922, 0.07843, 0.11765,
0.15686, 0.20000, 0.23922, 0.27843, 0.31765, 0.35686, 0.40000, 0.43922,
0.47843, 0.51765, 0.55686, 0.60000, 0.63922, 0.67843, 0.71765, 0.75686,
0.80000, 0.83922, 0.87843, 0.91765, 0.95686, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 0.98039, 0.96078, 0.94118, 0.92157, 0.90196,
0.88235, 0.86275, 0.84314, 0.82353, 0.80392, 0.78431, 0.76471, 0.74510,
0.72549, 0.70588, 0.65882, 0.61176, 0.56471, 0.51765, 0.47059, 0.42353,
0.37647, 0.32549, 0.27843, 0.23137, 0.18431, 0.13725, 0.09020, 0.04314,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.04706, 0.09412, 0.14118, 0.18824, 0.23529,
0.28235, 0.32941, 0.37647, 0.42353, 0.47059, 0.51765, 0.56471, 0.61176,
0.65882, 0.70588, 0.72549, 0.74902, 0.77255, 0.79608, 0.81569, 0.83922,
0.86275, 0.88627, 0.90588, 0.92941, 0.95294, 0.97647, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_rainbow3(){}
public:
  midas_rainbow3(const midas_rainbow3& a_from):cmap(a_from){}
  midas_rainbow3& operator=(const midas_rainbow3& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_bluered : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_bluered");
    return s_v;
  }
public:
  midas_bluered():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.01569, 0.03137, 0.04706, 0.06275, 0.07843, 0.09412, 0.10980,
0.12549, 0.14118, 0.15686, 0.17255, 0.18824, 0.20392, 0.21961, 0.23529,
0.25098, 0.26667, 0.28235, 0.29804, 0.31373, 0.33333, 0.34902, 0.36471,
0.38039, 0.39608, 0.41176, 0.42745, 0.44314, 0.45882, 0.47451, 0.49020,
0.50588, 0.52157, 0.53725, 0.55294, 0.56863, 0.58431, 0.60000, 0.61569,
0.63137, 0.64706, 0.66667, 0.68235, 0.69804, 0.71373, 0.72941, 0.74510,
0.76078, 0.77647, 0.79216, 0.80784, 0.82353, 0.83922, 0.85490, 0.87059,
0.88627, 0.90196, 0.91765, 0.93333, 0.94902, 0.96471, 0.98039, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.03137, 0.04706, 0.06275,
0.08235, 0.09804, 0.11373, 0.12941, 0.14902, 0.16471, 0.18039, 0.19608,
0.21569, 0.23137, 0.24706, 0.26275, 0.28235, 0.29804, 0.31373, 0.32941,
0.34902, 0.36471, 0.38039, 0.39608, 0.41569, 0.43137, 0.44706, 0.46275,
0.48235, 0.49804, 0.51373, 0.52941, 0.54902, 0.56471, 0.58039, 0.59608,
0.61569, 0.63137, 0.64706, 0.66275, 0.68235, 0.69804, 0.71373, 0.72941,
0.74902, 0.76471, 0.78039, 0.79608, 0.81569, 0.83137, 0.84706, 0.86275,
0.88235, 0.89804, 0.91373, 0.92941, 0.94902, 0.96471, 0.98039, 1.00000,
1.00000, 0.98431, 0.96863, 0.95294, 0.93725, 0.92157, 0.90588, 0.89020,
0.87451, 0.85882, 0.84314, 0.82745, 0.81176, 0.79608, 0.78039, 0.76471,
0.74902, 0.73333, 0.71765, 0.70196, 0.68627, 0.66667, 0.65098, 0.63529,
0.61961, 0.60392, 0.58824, 0.57255, 0.55686, 0.54118, 0.52549, 0.50980,
0.49412, 0.47843, 0.46275, 0.44706, 0.43137, 0.41569, 0.40000, 0.38431,
0.36863, 0.35294, 0.33333, 0.31765, 0.30196, 0.28627, 0.27059, 0.25490,
0.23922, 0.22353, 0.20784, 0.19216, 0.17647, 0.16078, 0.14510, 0.12941,
0.11373, 0.09804, 0.08235, 0.06667, 0.05098, 0.03529, 0.01961, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.03137, 0.04706, 0.06275,
0.08235, 0.09804, 0.11373, 0.12941, 0.14902, 0.16471, 0.18039, 0.19608,
0.21569, 0.23137, 0.24706, 0.26275, 0.28235, 0.29804, 0.31373, 0.32941,
0.34902, 0.36471, 0.38039, 0.39608, 0.41569, 0.43137, 0.44706, 0.46275,
0.48235, 0.49804, 0.51373, 0.52941, 0.54902, 0.56471, 0.58039, 0.59608,
0.61569, 0.63137, 0.64706, 0.66275, 0.68235, 0.69804, 0.71373, 0.72941,
0.74902, 0.76471, 0.78039, 0.79608, 0.81569, 0.83137, 0.84706, 0.86275,
0.88235, 0.89804, 0.91373, 0.92941, 0.94902, 0.96471, 0.98039, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 0.98431, 0.96863, 0.95294, 0.93725, 0.92157, 0.90588, 0.89020,
0.87451, 0.85490, 0.83922, 0.82353, 0.80784, 0.79216, 0.77647, 0.76078,
0.74510, 0.72941, 0.70980, 0.69412, 0.67843, 0.66275, 0.64706, 0.63137,
0.61569, 0.60000, 0.58431, 0.56471, 0.54902, 0.53333, 0.51765, 0.50196,
0.48627, 0.47059, 0.45490, 0.43922, 0.41961, 0.40392, 0.38824, 0.37255,
0.35686, 0.34118, 0.32549, 0.30980, 0.29412, 0.27451, 0.25882, 0.24314,
0.22745, 0.21176, 0.19608, 0.18039, 0.16471, 0.14902, 0.12941, 0.11373,
0.09804, 0.08235, 0.06667, 0.05098, 0.03529, 0.01961, 0.00000, 0.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_bluered(){}
public:
  midas_bluered(const midas_bluered& a_from):cmap(a_from){}
  midas_bluered& operator=(const midas_bluered& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_bluewhite : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_bluewhite");
    return s_v;
  }
public:
  midas_bluewhite():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00001, 0.00001, 0.00001,
0.00002, 0.00002, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007,
0.00008, 0.00009, 0.00011, 0.00013, 0.00015, 0.00017, 0.00019, 0.00022,
0.00025, 0.00028, 0.00032, 0.00035, 0.00040, 0.00044, 0.00049, 0.00055,
0.00061, 0.00067, 0.00074, 0.00081, 0.00089, 0.00097, 0.00106, 0.00115,
0.00126, 0.00136, 0.00148, 0.00160, 0.00173, 0.00187, 0.00201, 0.00216,
0.00233, 0.00250, 0.00268, 0.00287, 0.00307, 0.00327, 0.00349, 0.00373,
0.00397, 0.00422, 0.00449, 0.00477, 0.00506, 0.00536, 0.00568, 0.00601,
0.00636, 0.00672, 0.00709, 0.00748, 0.00789, 0.00831, 0.00875, 0.00921,
0.00969, 0.01018, 0.01069, 0.01122, 0.01177, 0.01235, 0.01294, 0.01355,
0.01418, 0.01484, 0.01552, 0.01622, 0.01694, 0.01769, 0.01847, 0.01926,
0.02009, 0.02094, 0.02181, 0.02272, 0.02365, 0.02461, 0.02560, 0.02662,
0.02767, 0.02875, 0.02986, 0.03100, 0.03218, 0.03338, 0.03463, 0.03590,
0.03721, 0.03856, 0.03994, 0.04136, 0.04282, 0.04432, 0.04585, 0.04743,
0.04904, 0.05070, 0.05239, 0.05413, 0.05591, 0.05774, 0.05961, 0.06153,
0.06349, 0.06549, 0.06755, 0.06965, 0.07180, 0.07400, 0.07625, 0.07856,
0.08091, 0.08331, 0.08577, 0.08829, 0.09086, 0.09348, 0.09616, 0.09890,
0.10169, 0.10455, 0.10746, 0.11044, 0.11347, 0.11657, 0.11973, 0.12296,
0.12624, 0.12960, 0.13302, 0.13651, 0.14007, 0.14369, 0.14739, 0.15116,
0.15500, 0.15891, 0.16289, 0.16695, 0.17109, 0.17530, 0.17959, 0.18395,
0.18840, 0.19292, 0.19753, 0.20222, 0.20699, 0.21185, 0.21679, 0.22182,
0.22693, 0.23213, 0.23742, 0.24280, 0.24827, 0.25384, 0.25949, 0.26524,
0.27109, 0.27703, 0.28307, 0.28920, 0.29544, 0.30178, 0.30821, 0.31476,
0.32140, 0.32815, 0.33500, 0.34196, 0.34903, 0.35621, 0.36350, 0.37090,
0.37841, 0.38603, 0.39377, 0.40163, 0.40960, 0.41769, 0.42590, 0.43423,
0.44268, 0.45126, 0.45996, 0.46878, 0.47773, 0.48681, 0.49601, 0.50535,
0.51482, 0.52442, 0.53415, 0.54402, 0.55403, 0.56417, 0.57445, 0.58487,
0.59543, 0.60613, 0.61698, 0.62798, 0.63911, 0.65040, 0.66184, 0.67342,
0.68516, 0.69705, 0.70909, 0.72129, 0.73365, 0.74616, 0.75883, 0.77167,
0.78466, 0.79782, 0.81115, 0.82464, 0.83830, 0.85213, 0.86612, 0.88029,
0.89464, 0.90915, 0.92385, 0.93872, 0.95377, 0.96899, 0.98441, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00001, 0.00001, 0.00001,
0.00002, 0.00002, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007,
0.00008, 0.00009, 0.00011, 0.00013, 0.00015, 0.00017, 0.00019, 0.00022,
0.00025, 0.00028, 0.00032, 0.00035, 0.00040, 0.00044, 0.00049, 0.00055,
0.00061, 0.00067, 0.00074, 0.00081, 0.00089, 0.00097, 0.00106, 0.00115,
0.00126, 0.00136, 0.00148, 0.00160, 0.00173, 0.00187, 0.00201, 0.00216,
0.00233, 0.00250, 0.00268, 0.00287, 0.00307, 0.00327, 0.00349, 0.00373,
0.00397, 0.00422, 0.00449, 0.00477, 0.00506, 0.00536, 0.00568, 0.00601,
0.00636, 0.00672, 0.00709, 0.00748, 0.00789, 0.00831, 0.00875, 0.00921,
0.00969, 0.01018, 0.01069, 0.01122, 0.01177, 0.01235, 0.01294, 0.01355,
0.01418, 0.01484, 0.01552, 0.01622, 0.01694, 0.01769, 0.01847, 0.01926,
0.02009, 0.02094, 0.02181, 0.02272, 0.02365, 0.02461, 0.02560, 0.02662,
0.02767, 0.02875, 0.02986, 0.03100, 0.03218, 0.03338, 0.03463, 0.03590,
0.03721, 0.03856, 0.03994, 0.04136, 0.04282, 0.04432, 0.04585, 0.04743,
0.04904, 0.05070, 0.05239, 0.05413, 0.05591, 0.05774, 0.05961, 0.06153,
0.06349, 0.06549, 0.06755, 0.06965, 0.07180, 0.07400, 0.07625, 0.07856,
0.08091, 0.08331, 0.08577, 0.08829, 0.09086, 0.09348, 0.09616, 0.09890,
0.10169, 0.10455, 0.10746, 0.11044, 0.11347, 0.11657, 0.11973, 0.12296,
0.12624, 0.12960, 0.13302, 0.13651, 0.14007, 0.14369, 0.14739, 0.15116,
0.15500, 0.15891, 0.16289, 0.16695, 0.17109, 0.17530, 0.17959, 0.18395,
0.18840, 0.19292, 0.19753, 0.20222, 0.20699, 0.21185, 0.21679, 0.22182,
0.22693, 0.23213, 0.23742, 0.24280, 0.24827, 0.25384, 0.25949, 0.26524,
0.27109, 0.27703, 0.28307, 0.28920, 0.29544, 0.30178, 0.30821, 0.31476,
0.32140, 0.32815, 0.33500, 0.34196, 0.34903, 0.35621, 0.36350, 0.37090,
0.37841, 0.38603, 0.39377, 0.40163, 0.40960, 0.41769, 0.42590, 0.43423,
0.44268, 0.45126, 0.45996, 0.46878, 0.47773, 0.48681, 0.49601, 0.50535,
0.51482, 0.52442, 0.53415, 0.54402, 0.55403, 0.56417, 0.57445, 0.58487,
0.59543, 0.60613, 0.61698, 0.62798, 0.63911, 0.65040, 0.66184, 0.67342,
0.68516, 0.69705, 0.70909, 0.72129, 0.73365, 0.74616, 0.75883, 0.77167,
0.78466, 0.79782, 0.81115, 0.82464, 0.83830, 0.85213, 0.86612, 0.88029,
0.89464, 0.90915, 0.92385, 0.93872, 0.95377, 0.96899, 0.98441, 1.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745,
0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490, 0.05882,
0.06275, 0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627, 0.09020,
0.09412, 0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765, 0.12157,
0.12549, 0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902, 0.15294,
0.15686, 0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039, 0.18431,
0.18824, 0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176, 0.21569,
0.21961, 0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314, 0.24706,
0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843,
0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980,
0.31373, 0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.33725, 0.34118,
0.34510, 0.34902, 0.35294, 0.35686, 0.36078, 0.36471, 0.36863, 0.37255,
0.37647, 0.38039, 0.38431, 0.38824, 0.39216, 0.39608, 0.40000, 0.40392,
0.40784, 0.41176, 0.41569, 0.41961, 0.42353, 0.42745, 0.43137, 0.43529,
0.43922, 0.44314, 0.44706, 0.45098, 0.45490, 0.45882, 0.46275, 0.46667,
0.47059, 0.47451, 0.47843, 0.48235, 0.48627, 0.49020, 0.49412, 0.49804,
0.50196, 0.50588, 0.50980, 0.51373, 0.51765, 0.52157, 0.52549, 0.52941,
0.53333, 0.53725, 0.54118, 0.54510, 0.54902, 0.55294, 0.55686, 0.56078,
0.56471, 0.56863, 0.57255, 0.57647, 0.58039, 0.58431, 0.58824, 0.59216,
0.59608, 0.60000, 0.60392, 0.60784, 0.61176, 0.61569, 0.61961, 0.62353,
0.62745, 0.63137, 0.63529, 0.63922, 0.64314, 0.64706, 0.65098, 0.65490,
0.65882, 0.66275, 0.66667, 0.67059, 0.67451, 0.67843, 0.68235, 0.68627,
0.69020, 0.69412, 0.69804, 0.70196, 0.70588, 0.70980, 0.71373, 0.71765,
0.72157, 0.72549, 0.72941, 0.73333, 0.73725, 0.74118, 0.74510, 0.74902,
0.75294, 0.75686, 0.76078, 0.76471, 0.76863, 0.77255, 0.77647, 0.78039,
0.78431, 0.78824, 0.79216, 0.79608, 0.80000, 0.80392, 0.80784, 0.81176,
0.81569, 0.81961, 0.82353, 0.82745, 0.83137, 0.83529, 0.83922, 0.84314,
0.84706, 0.85098, 0.85490, 0.85882, 0.86275, 0.86667, 0.87059, 0.87451,
0.87843, 0.88235, 0.88627, 0.89020, 0.89412, 0.89804, 0.90196, 0.90588,
0.90980, 0.91373, 0.91765, 0.92157, 0.92549, 0.92941, 0.93333, 0.93725,
0.94118, 0.94510, 0.94902, 0.95294, 0.95686, 0.96078, 0.96471, 0.96863,
0.97255, 0.97647, 0.98039, 0.98431, 0.98824, 0.99216, 0.99608, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_bluewhite(){}
public:
  midas_bluewhite(const midas_bluewhite& a_from):cmap(a_from){}
  midas_bluewhite& operator=(const midas_bluewhite& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_stairs8 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_stairs8");
    return s_v;
  }
public:
  midas_stairs8():cmap(256){
    static const double rgb_r[256] = {
0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471,
0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471,
0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471,
0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471, 0.76471,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_b[256] = {
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_stairs8(){}
public:
  midas_stairs8(const midas_stairs8& a_from):cmap(a_from){}
  midas_stairs8& operator=(const midas_stairs8& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_stairs9 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_stairs9");
    return s_v;
  }
public:
  midas_stairs9():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784,
0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784,
0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784, 0.60784,
0.60784, 0.60784, 0.60784, 0.60784, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549,
0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549,
0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549,
0.92549, 0.92549, 0.92549, 0.92549, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000
};
    static const double rgb_g[256] = {
0.00000, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490,
0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490,
0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490, 0.65490,
0.65490, 0.65490, 0.65490, 0.65490, 0.56863, 0.56863, 0.56863, 0.56863,
0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863,
0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863,
0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863, 0.56863,
0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471,
0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471,
0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471, 0.96471,
0.96471, 0.96471, 0.96471, 0.96471, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412,
0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412,
0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412, 0.69412,
0.69412, 0.69412, 0.69412, 0.69412, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000
};
    static const double rgb_b[256] = {
0.00000, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608, 0.19608,
0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451,
0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451,
0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451, 0.47451,
0.47451, 0.47451, 0.47451, 0.47451, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_stairs9(){}
public:
  midas_stairs9(const midas_stairs9& a_from):cmap(a_from){}
  midas_stairs9& operator=(const midas_stairs9& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_staircase : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_staircase");
    return s_v;
  }
public:
  midas_staircase():cmap(256){
    static const double rgb_r[256] = {
0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745, 0.03137,
0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490, 0.05882, 0.06275,
0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627, 0.09020, 0.09412,
0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765, 0.12157, 0.12549,
0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902, 0.15294, 0.15686,
0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039, 0.18431, 0.18824,
0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176, 0.21569, 0.21961,
0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314, 0.24706, 0.25098,
0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843, 0.28235,
0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980, 0.31373,
0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.00392, 0.00784, 0.01176,
0.01569, 0.01961, 0.02353, 0.02745, 0.03137, 0.03529, 0.03922, 0.04314,
0.04706, 0.05098, 0.05490, 0.05882, 0.06275, 0.06667, 0.07059, 0.07451,
0.07843, 0.08235, 0.08627, 0.09020, 0.09412, 0.09804, 0.10196, 0.10588,
0.10980, 0.11373, 0.11765, 0.12157, 0.12549, 0.12941, 0.13333, 0.13725,
0.14118, 0.14510, 0.14902, 0.15294, 0.15686, 0.16078, 0.16471, 0.16863,
0.17255, 0.17647, 0.18039, 0.18431, 0.18824, 0.19216, 0.19608, 0.20000,
0.20392, 0.20784, 0.21176, 0.21569, 0.21961, 0.22353, 0.22745, 0.23137,
0.23529, 0.23922, 0.24314, 0.24706, 0.25098, 0.25490, 0.25882, 0.26275,
0.26667, 0.27059, 0.27451, 0.27843, 0.28235, 0.28627, 0.29020, 0.29412,
0.29804, 0.30196, 0.30588, 0.30980, 0.31373, 0.31765, 0.32157, 0.32549,
0.32941, 0.33333, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373,
0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373,
0.31373, 0.31373, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059,
0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059,
0.47059, 0.47059, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745,
0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745,
0.62745, 0.62745, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118,
0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118,
0.94118, 0.94118, 0.94902, 0.96078, 0.97255, 0.98431, 0.99216, 1.00000
};
    static const double rgb_g[256] = {
0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745, 0.03137,
0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490, 0.05882, 0.06275,
0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627, 0.09020, 0.09412,
0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765, 0.12157, 0.12549,
0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902, 0.15294, 0.15686,
0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039, 0.18431, 0.18824,
0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176, 0.21569, 0.21961,
0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314, 0.24706, 0.25098,
0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843, 0.28235,
0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980, 0.31373,
0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.31373, 0.31373, 0.31373,
0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373,
0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.47059, 0.47059, 0.47059,
0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059,
0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.62745, 0.62745, 0.62745,
0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745,
0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.94118, 0.94118, 0.94118,
0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118,
0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.95294, 0.96471, 0.97647,
0.98824, 1.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353,
0.02745, 0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490,
0.05882, 0.06275, 0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627,
0.09020, 0.09412, 0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765,
0.12157, 0.12549, 0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902,
0.15294, 0.15686, 0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039,
0.18431, 0.18824, 0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176,
0.21569, 0.21961, 0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314,
0.24706, 0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451,
0.27843, 0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588,
0.30980, 0.31373, 0.39216, 0.52941, 0.66667, 0.80392, 0.80000, 1.00000
};
    static const double rgb_b[256] = {
0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373,
0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373, 0.31373,
0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059,
0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059, 0.47059,
0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745,
0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745, 0.62745,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118,
0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118, 0.94118,
0.95294, 0.96471, 0.97647, 0.98824, 1.00000, 0.00392, 0.00784, 0.01176,
0.01569, 0.01961, 0.02353, 0.02745, 0.03137, 0.03529, 0.03922, 0.04314,
0.04706, 0.05098, 0.05490, 0.05882, 0.06275, 0.06667, 0.07059, 0.07451,
0.07843, 0.08235, 0.08627, 0.09020, 0.09412, 0.09804, 0.10196, 0.10588,
0.10980, 0.11373, 0.11765, 0.12157, 0.12549, 0.12941, 0.13333, 0.13725,
0.14118, 0.14510, 0.14902, 0.15294, 0.15686, 0.16078, 0.16471, 0.16863,
0.17255, 0.17647, 0.18039, 0.18431, 0.18824, 0.19216, 0.19608, 0.20000,
0.20392, 0.20784, 0.21176, 0.21569, 0.21961, 0.22353, 0.22745, 0.23137,
0.23529, 0.23922, 0.24314, 0.24706, 0.25098, 0.25490, 0.25882, 0.26275,
0.26667, 0.27059, 0.27451, 0.27843, 0.28235, 0.28627, 0.29020, 0.29412,
0.29804, 0.30196, 0.30588, 0.30980, 0.31373, 0.31765, 0.32157, 0.32549,
0.32941, 0.33333, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353,
0.02745, 0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490,
0.05882, 0.06275, 0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627,
0.09020, 0.09412, 0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765,
0.12157, 0.12549, 0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902,
0.15294, 0.15686, 0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039,
0.18431, 0.18824, 0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176,
0.21569, 0.21961, 0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314,
0.24706, 0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451,
0.27843, 0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588,
0.30980, 0.31373, 0.39216, 0.52941, 0.66667, 0.80392, 0.80000, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_staircase(){}
public:
  midas_staircase(const midas_staircase& a_from):cmap(a_from){}
  midas_staircase& operator=(const midas_staircase& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_color : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_color");
    return s_v;
  }
public:
  midas_color():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353,
0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902
};
    static const double rgb_g[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353,
0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353, 0.62353,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431, 0.18431,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255, 0.37255,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078, 0.56078,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725, 0.93725,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902, 0.74902,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804, 0.49804,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980,
0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980, 0.30980
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_color(){}
public:
  midas_color(const midas_color& a_from):cmap(a_from){}
  midas_color& operator=(const midas_color& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_manycol : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_manycol");
    return s_v;
  }
public:
  midas_manycol():cmap(256){
    static const double rgb_r[256] = {
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706,
0.44706, 0.44706, 0.44706, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549,
0.72549, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.44706, 0.44706, 0.44706,
0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549,
0.72549, 0.72549, 0.72549, 0.72549, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706, 0.44706,
0.44706, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.72549, 0.72549
};
    static const double rgb_g[256] = {
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.69020, 0.69020, 0.69020, 0.69020,
0.69020, 0.69020, 0.69020, 0.69020, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.69020, 0.69020, 0.69020,
0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.88235,
0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.78431, 0.78431, 0.78431,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.69020,
0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020,
0.69020, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235,
0.88235, 0.88235, 0.88235, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431, 0.78431,
0.78431, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 0.69020,
0.69020, 0.69020, 0.69020, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.69020, 0.69020, 0.69020, 0.69020,
0.69020, 0.69020, 0.69020, 0.69020, 0.69020, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.88235, 0.88235, 0.88235,
0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.88235, 0.00000, 0.00000
};
    static const double rgb_b[256] = {
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549,
0.92549, 0.92549, 0.92549, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549,
0.72549, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.92549, 0.92549, 0.92549,
0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.72549, 0.72549, 0.72549, 0.72549, 0.72549,
0.72549, 0.72549, 0.72549, 0.72549, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 0.34902, 0.34902,
0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902, 0.34902,
0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549, 0.92549,
0.92549, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.72549, 0.72549
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_manycol(){}
public:
  midas_manycol(const midas_manycol& a_from):cmap(a_from){}
  midas_manycol& operator=(const midas_manycol& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_idl14 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_idl14");
    return s_v;
  }
public:
  midas_idl14():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.02745, 0.05882, 0.09020, 0.12157, 0.15294, 0.18431, 0.21569,
0.24706, 0.27451, 0.30588, 0.33725, 0.36863, 0.40000, 0.43137, 0.46275,
0.49412, 0.52549, 0.55686, 0.59216, 0.62353, 0.65882, 0.69020, 0.72157,
0.75686, 0.78824, 0.82353, 0.85490, 0.88627, 0.92157, 0.95294, 0.98824,
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745,
0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05490, 0.06275, 0.07059,
0.07843, 0.09020, 0.09804, 0.10588, 0.11373, 0.12549, 0.13333, 0.14118,
0.14902, 0.16078, 0.17255, 0.18431, 0.19608, 0.20784, 0.21961, 0.23137,
0.24706, 0.25882, 0.27059, 0.28235, 0.29412, 0.30588, 0.32157, 0.33333,
0.34902, 0.36471, 0.38039, 0.39608, 0.41176, 0.42353, 0.43922, 0.45490,
0.47059, 0.48627, 0.50196, 0.51373, 0.52941, 0.54510, 0.56078, 0.57647,
0.59216, 0.60784, 0.62353, 0.63922, 0.65490, 0.67059, 0.68627, 0.69804,
0.70980, 0.72549, 0.73725, 0.75294, 0.76471, 0.77647, 0.79216, 0.80392,
0.81961, 0.83137, 0.84706, 0.85490, 0.86275, 0.87451, 0.88235, 0.89020,
0.90196, 0.90980, 0.91765, 0.92941, 0.93725, 0.94510, 0.95686, 0.95686,
0.96078, 0.96471, 0.96863, 0.96863, 0.97255, 0.97647, 0.98039, 0.98039,
0.98431, 0.98824, 0.99216, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608,
0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608,
0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608, 0.99608,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000,
1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.16471, 0.33333, 0.49804, 0.66667, 0.83137, 1.00000, 0.96471,
0.92549, 0.88627, 0.84706, 0.80784, 0.77255, 0.73333, 0.69412, 0.65490,
0.61569, 0.58039, 0.54118, 0.50196, 0.46275, 0.42353, 0.38824, 0.34902,
0.30980, 0.27059, 0.23137, 0.19608, 0.15686, 0.11765, 0.07843, 0.03922,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00392, 0.00392, 0.01176, 0.01961, 0.03137,
0.03922, 0.04706, 0.05882, 0.06667, 0.07451, 0.08627, 0.09412, 0.10196,
0.11373, 0.12157, 0.12941, 0.14118, 0.14118, 0.14902, 0.15686, 0.16471,
0.17647, 0.18824, 0.20000, 0.21176, 0.22745, 0.23922, 0.25098, 0.26275,
0.27451, 0.28627, 0.30196, 0.32157, 0.34118, 0.36078, 0.37647, 0.39216,
0.40784, 0.42353, 0.44314, 0.46667, 0.49020, 0.51373, 0.54118, 0.56471,
0.59216, 0.61569, 0.64314, 0.67059, 0.69804, 0.72549, 0.75686, 0.78431,
0.81569, 0.84314, 0.87451, 0.89804, 0.92157, 0.94902, 0.97255, 1.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.03137, 0.06275, 0.09412, 0.12549, 0.16078, 0.19216, 0.22353,
0.25490, 0.29020, 0.32157, 0.35294, 0.38431, 0.41569, 0.45098, 0.48235,
0.51373, 0.54510, 0.58039, 0.61176, 0.64314, 0.67451, 0.70588, 0.74118,
0.77255, 0.80392, 0.83529, 0.87059, 0.90196, 0.93333, 0.96471, 1.00000,
0.00000, 0.01961, 0.03922, 0.05882, 0.08235, 0.10196, 0.12157, 0.14510,
0.16471, 0.18431, 0.20784, 0.22745, 0.24706, 0.27059, 0.29020, 0.30980,
0.33333, 0.34902, 0.36863, 0.38431, 0.40392, 0.42353, 0.43922, 0.45882,
0.47451, 0.49412, 0.51373, 0.52941, 0.54902, 0.56471, 0.58431, 0.60392,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392, 0.00392,
0.00392, 0.00392, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.00784,
0.00784, 0.00784, 0.00784, 0.00784, 0.00784, 0.01176, 0.01569, 0.01961,
0.02745, 0.03529, 0.04706, 0.05490, 0.06667, 0.07843, 0.09020, 0.10588,
0.11765, 0.13333, 0.15294, 0.17255, 0.19216, 0.21569, 0.23529, 0.25490,
0.27843, 0.29804, 0.32157, 0.34902, 0.38039, 0.40784, 0.43922, 0.47059,
0.50196, 0.53333, 0.56863, 0.60000, 0.63529, 0.67059, 0.70588, 0.74118,
0.77647, 0.81176, 0.85098, 0.87843, 0.90980, 0.93725, 0.96863, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_idl14(){}
public:
  midas_idl14(const midas_idl14& a_from):cmap(a_from){}
  midas_idl14& operator=(const midas_idl14& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

class midas_idl15 : public cmap {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::SOPI::midas_idl15");
    return s_v;
  }
public:
  midas_idl15():cmap(256){
    static const double rgb_r[256] = {
0.00000, 0.07059, 0.14118, 0.21176, 0.28235, 0.35294, 0.42353, 0.49804,
0.56863, 0.63922, 0.70980, 0.78039, 0.85098, 0.92157, 0.99608, 0.97647,
0.95686, 0.93725, 0.91765, 0.89804, 0.87451, 0.85490, 0.83529, 0.81569,
0.79608, 0.77255, 0.75294, 0.73333, 0.71373, 0.69412, 0.67451, 0.65098,
0.63137, 0.61176, 0.59216, 0.57255, 0.54902, 0.52941, 0.50980, 0.49020,
0.47059, 0.45098, 0.42745, 0.40784, 0.38824, 0.36863, 0.34902, 0.32549,
0.30588, 0.28627, 0.26667, 0.24706, 0.22745, 0.20392, 0.18431, 0.16471,
0.14510, 0.12549, 0.10196, 0.08235, 0.06275, 0.04314, 0.02353, 0.00000,
0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843,
0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980,
0.31373, 0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.33725, 0.34118,
0.34510, 0.34902, 0.35294, 0.35686, 0.36078, 0.36471, 0.36863, 0.37255,
0.37647, 0.38039, 0.38431, 0.38824, 0.39216, 0.39608, 0.40000, 0.40392,
0.40784, 0.41176, 0.41569, 0.41961, 0.42353, 0.42745, 0.43137, 0.43529,
0.43922, 0.44314, 0.44706, 0.45098, 0.45490, 0.45882, 0.46275, 0.46667,
0.47059, 0.47451, 0.47843, 0.48235, 0.48627, 0.49020, 0.49412, 0.49804,
0.50196, 0.50588, 0.50980, 0.51373, 0.51765, 0.52157, 0.52549, 0.52941,
0.53333, 0.53725, 0.54118, 0.54510, 0.54902, 0.55294, 0.55686, 0.56078,
0.56471, 0.56863, 0.57255, 0.57647, 0.58039, 0.58431, 0.58824, 0.59216,
0.59608, 0.60000, 0.60392, 0.60784, 0.61176, 0.61569, 0.61961, 0.62353,
0.62745, 0.63137, 0.63529, 0.63922, 0.64314, 0.64706, 0.65098, 0.65490,
0.65882, 0.66275, 0.66667, 0.67059, 0.67451, 0.67843, 0.68235, 0.68627,
0.69020, 0.69412, 0.69804, 0.70196, 0.70588, 0.70980, 0.71373, 0.71765,
0.72157, 0.72549, 0.72941, 0.73333, 0.73725, 0.74118, 0.74510, 0.74902,
0.75294, 0.75686, 0.76078, 0.76471, 0.76863, 0.77255, 0.77647, 0.78039,
0.78431, 0.78824, 0.79216, 0.79608, 0.80000, 0.80392, 0.80784, 0.81176,
0.81569, 0.81961, 0.82353, 0.82745, 0.83137, 0.83529, 0.83922, 0.84314,
0.84706, 0.85098, 0.85490, 0.85882, 0.86275, 0.86667, 0.87059, 0.87451,
0.87843, 0.88235, 0.88627, 0.89020, 0.89412, 0.89804, 0.90196, 0.90588,
0.90980, 0.91373, 0.91765, 0.92157, 0.92549, 0.92941, 0.93333, 0.93725,
0.94118, 0.94510, 0.94902, 0.95294, 0.95686, 0.96078, 0.96471, 0.96863,
0.97255, 0.97647, 0.98039, 0.98431, 0.98824, 0.99216, 0.99608, 1.00000
};
    static const double rgb_g[256] = {
0.00000, 0.00392, 0.00784, 0.01176, 0.01569, 0.01961, 0.02353, 0.02745,
0.03137, 0.03529, 0.03922, 0.04314, 0.04706, 0.05098, 0.05490, 0.05882,
0.06275, 0.06667, 0.07059, 0.07451, 0.07843, 0.08235, 0.08627, 0.09020,
0.09412, 0.09804, 0.10196, 0.10588, 0.10980, 0.11373, 0.11765, 0.12157,
0.12549, 0.12941, 0.13333, 0.13725, 0.14118, 0.14510, 0.14902, 0.15294,
0.15686, 0.16078, 0.16471, 0.16863, 0.17255, 0.17647, 0.18039, 0.18431,
0.18824, 0.19216, 0.19608, 0.20000, 0.20392, 0.20784, 0.21176, 0.21569,
0.21961, 0.22353, 0.22745, 0.23137, 0.23529, 0.23922, 0.24314, 0.24706,
0.25098, 0.25490, 0.25882, 0.26275, 0.26667, 0.27059, 0.27451, 0.27843,
0.28235, 0.28627, 0.29020, 0.29412, 0.29804, 0.30196, 0.30588, 0.30980,
0.31373, 0.31765, 0.32157, 0.32549, 0.32941, 0.33333, 0.33725, 0.34118,
0.34510, 0.34902, 0.35294, 0.35686, 0.36078, 0.36471, 0.36863, 0.37255,
0.37647, 0.38039, 0.38431, 0.38824, 0.39216, 0.39608, 0.40000, 0.40392,
0.40784, 0.41176, 0.41569, 0.41961, 0.42353, 0.42745, 0.43137, 0.43529,
0.43922, 0.44314, 0.44706, 0.45098, 0.45490, 0.45882, 0.46275, 0.46667,
0.47059, 0.47451, 0.47843, 0.48235, 0.48627, 0.49020, 0.49412, 0.49804,
0.50196, 0.50588, 0.50980, 0.51373, 0.51765, 0.52157, 0.52549, 0.52941,
0.53333, 0.53725, 0.54118, 0.54510, 0.54902, 0.55294, 0.55686, 0.56078,
0.56471, 0.56863, 0.57255, 0.57647, 0.58039, 0.58431, 0.58824, 0.59216,
0.59608, 0.60000, 0.60392, 0.60784, 0.61176, 0.61569, 0.61961, 0.62353,
0.62745, 0.63137, 0.63529, 0.63922, 0.64314, 0.64706, 0.65098, 0.65490,
0.65882, 0.66275, 0.66667, 0.67059, 0.67451, 0.67843, 0.68235, 0.68627,
0.69020, 0.69412, 0.69804, 0.70196, 0.70588, 0.70980, 0.71373, 0.71765,
0.72157, 0.72549, 0.72941, 0.73333, 0.73725, 0.74118, 0.74510, 0.74902,
0.75294, 0.75686, 0.76078, 0.76471, 0.76863, 0.77255, 0.77647, 0.78039,
0.78431, 0.78824, 0.79216, 0.79608, 0.80000, 0.80392, 0.80784, 0.81176,
0.81569, 0.81961, 0.82353, 0.82745, 0.83137, 0.83529, 0.83922, 0.84314,
0.84706, 0.85098, 0.85490, 0.85882, 0.86275, 0.86667, 0.87059, 0.87451,
0.87843, 0.88235, 0.88627, 0.89020, 0.89412, 0.89804, 0.90196, 0.90588,
0.90980, 0.91373, 0.91765, 0.92157, 0.92549, 0.92941, 0.93333, 0.93725,
0.94118, 0.94510, 0.94902, 0.95294, 0.95686, 0.96078, 0.96471, 0.96863,
0.97255, 0.97647, 0.98039, 0.98431, 0.98824, 0.99216, 0.99608, 1.00000
};
    static const double rgb_b[256] = {
0.00000, 0.00392, 0.01176, 0.01961, 0.02745, 0.03529, 0.04314, 0.05098,
0.05882, 0.06667, 0.07451, 0.08235, 0.09020, 0.09804, 0.10588, 0.11373,
0.12157, 0.12941, 0.13725, 0.14510, 0.15294, 0.16078, 0.16863, 0.17647,
0.18431, 0.19216, 0.20000, 0.20784, 0.21569, 0.22353, 0.23137, 0.23922,
0.24706, 0.25490, 0.26275, 0.27059, 0.27843, 0.28627, 0.29412, 0.30196,
0.30980, 0.31765, 0.32549, 0.33333, 0.34118, 0.34902, 0.35686, 0.36471,
0.37255, 0.38039, 0.38824, 0.39608, 0.40392, 0.41176, 0.41961, 0.42745,
0.43529, 0.44314, 0.45098, 0.45882, 0.46667, 0.47451, 0.48235, 0.49020,
0.49804, 0.50588, 0.51373, 0.52157, 0.52941, 0.53725, 0.54510, 0.55294,
0.56078, 0.56863, 0.57647, 0.58431, 0.59216, 0.60000, 0.60784, 0.61569,
0.62353, 0.63137, 0.63922, 0.64706, 0.65490, 0.66275, 0.67059, 0.67843,
0.68627, 0.69412, 0.70196, 0.70980, 0.71765, 0.72549, 0.73333, 0.74118,
0.74902, 0.75686, 0.76471, 0.77255, 0.78039, 0.78824, 0.79608, 0.80392,
0.81176, 0.81961, 0.82745, 0.83529, 0.84314, 0.85098, 0.85882, 0.86667,
0.87451, 0.88235, 0.89020, 0.89804, 0.90588, 0.91373, 0.92157, 0.92941,
0.93725, 0.94510, 0.95294, 0.96078, 0.96863, 0.97647, 0.98431, 0.99216,
1.00000, 0.98431, 0.96863, 0.95294, 0.93333, 0.91765, 0.90196, 0.88627,
0.86667, 0.85098, 0.83529, 0.81961, 0.80000, 0.78431, 0.76863, 0.75294,
0.73333, 0.71765, 0.70196, 0.68627, 0.66667, 0.65098, 0.63529, 0.61961,
0.60000, 0.58431, 0.56863, 0.55294, 0.53333, 0.51765, 0.50196, 0.48627,
0.46667, 0.45098, 0.43529, 0.41961, 0.40000, 0.38431, 0.36863, 0.35294,
0.33333, 0.31765, 0.30196, 0.28627, 0.26667, 0.25098, 0.23529, 0.21961,
0.20000, 0.18431, 0.16863, 0.15294, 0.13333, 0.11765, 0.10196, 0.08627,
0.06667, 0.05098, 0.03529, 0.01961, 0.00000, 0.01176, 0.02745, 0.04314,
0.05882, 0.07451, 0.08627, 0.10196, 0.11765, 0.13333, 0.14902, 0.16078,
0.17647, 0.19216, 0.20784, 0.22353, 0.23529, 0.25098, 0.26667, 0.28235,
0.29804, 0.30980, 0.32549, 0.34118, 0.35686, 0.37255, 0.38431, 0.40000,
0.41569, 0.43137, 0.44706, 0.45882, 0.47451, 0.49020, 0.50588, 0.52157,
0.53725, 0.54902, 0.56471, 0.58039, 0.59608, 0.61176, 0.62353, 0.63922,
0.65490, 0.67059, 0.68627, 0.69804, 0.71373, 0.72941, 0.74510, 0.76078,
0.77255, 0.78824, 0.80392, 0.81961, 0.83529, 0.84706, 0.86275, 0.87843,
0.89412, 0.90980, 0.92157, 0.93725, 0.95294, 0.96863, 0.98431, 1.00000
};
    color mycol;
    for(unsigned int i=0; i<256; i++) {
      mycol.red = ushort(rgb_r[i]*65535.);
      mycol.green = ushort(rgb_g[i]*65535.);
      mycol.blue = ushort(rgb_b[i]*65535.);
      m_cols[i] = mycol;
    }
  }
  virtual ~midas_idl15(){}
public:
  midas_idl15(const midas_idl15& a_from):cmap(a_from){}
  midas_idl15& operator=(const midas_idl15& a_from){
    cmap::operator=(a_from);
    return *this;
  }
};

//aaaa

}}

#include "cbn"

namespace inlib {
namespace SOPI { //pi clashes with inlib::pi()

inline void all_names(std::vector<std::string>& a_opts) {
  a_opts.clear();
  a_opts.push_back(cbn(col16::s_class()));
  a_opts.push_back(cbn(colrj32::s_class()));
  a_opts.push_back(cbn(colbr32::s_class()));
  a_opts.push_back(cbn(colrv32::s_class()));
  a_opts.push_back(cbn(colbr128::s_class()));
  a_opts.push_back(cbn(colrj128::s_class()));
  a_opts.push_back(cbn(grey32::s_class()));
  a_opts.push_back(cbn(greyinv32::s_class()));
  a_opts.push_back(cbn(grey128::s_class()));
  a_opts.push_back(cbn(greyinv128::s_class()));
  a_opts.push_back(cbn(grey256::s_class()));
  a_opts.push_back(cbn(red32::s_class()));
  a_opts.push_back(cbn(green32::s_class()));
  a_opts.push_back(cbn(blue32::s_class()));
  a_opts.push_back(cbn(yellow32::s_class()));
  a_opts.push_back(cbn(orange32::s_class()));
  a_opts.push_back(cbn(cyan32::s_class()));
  a_opts.push_back(cbn(col64::s_class()));
  a_opts.push_back(cbn(rgb216::s_class()));
  a_opts.push_back(cbn(rgb512::s_class()));
  a_opts.push_back(cbn(rgb4096::s_class()));
  a_opts.push_back(cbn(rgb32768::s_class()));

  a_opts.push_back(cbn(midas_pastel::s_class()));
  a_opts.push_back(cbn(midas_heat::s_class()));
  a_opts.push_back(cbn(midas_rainbow3::s_class()));
  a_opts.push_back(cbn(midas_bluered::s_class()));
  a_opts.push_back(cbn(midas_bluewhite::s_class()));
  a_opts.push_back(cbn(midas_stairs8::s_class()));
  a_opts.push_back(cbn(midas_stairs9::s_class()));
  a_opts.push_back(cbn(midas_staircase::s_class()));
  a_opts.push_back(cbn(midas_color::s_class()));
  a_opts.push_back(cbn(midas_manycol::s_class()));
  a_opts.push_back(cbn(midas_idl14::s_class()));
  a_opts.push_back(cbn(midas_idl15::s_class()));
}

inline bool stocmap(const std::string& a_name,cmap& a_cmap) {
  if(a_name==cbn(col16::s_class())){
    a_cmap = col16();
  } else if(a_name==cbn(colrj32::s_class())){
    a_cmap = colrj32();
  } else if(a_name==cbn(colbr32::s_class())){
    a_cmap = colbr32();
  } else if(a_name==cbn(colrv32::s_class())){
    a_cmap = colrv32();

  } else if(a_name==cbn(colbr128::s_class())){
    a_cmap = colbr128();
  } else if(a_name==cbn(colrj128::s_class())){
    a_cmap = colrj128();

  } else if(a_name==cbn(grey32::s_class())){
    a_cmap = grey32();
  } else if(a_name==cbn(greyinv32::s_class())){
    a_cmap = greyinv32();
  } else if(a_name==cbn(grey128::s_class())){
    a_cmap = grey128();
  } else if(a_name==cbn(greyinv128::s_class())){
    a_cmap = greyinv128();
  } else if(a_name==cbn(grey256::s_class())){
    a_cmap = grey256();

  } else if(a_name==cbn(red32::s_class())){
    a_cmap = red32();
  } else if(a_name==cbn(green32::s_class())){
    a_cmap = green32();
  } else if(a_name==cbn(blue32::s_class())){
    a_cmap = blue32();
  } else if(a_name==cbn(yellow32::s_class())){
    a_cmap = yellow32();
  } else if(a_name==cbn(orange32::s_class())){
    a_cmap = orange32();
  } else if(a_name==cbn(cyan32::s_class())){
    a_cmap = cyan32();

  } else if(a_name==cbn(col64::s_class())){
    a_cmap = col64();

  } else if(a_name==cbn(rgb216::s_class())){
    a_cmap = rgb216();
  } else if(a_name==cbn(rgb512::s_class())){
    a_cmap = rgb512();
  } else if(a_name==cbn(rgb4096::s_class())){
    a_cmap = rgb4096();
  } else if(a_name==cbn(rgb32768::s_class())){
    a_cmap = rgb32768();

  } else if(a_name==cbn(midas_pastel::s_class())){
    a_cmap = midas_pastel();
  } else if(a_name==cbn(midas_heat::s_class())){
    a_cmap = midas_heat();
  } else if(a_name==cbn(midas_rainbow3::s_class())){
    a_cmap = midas_rainbow3();
  } else if(a_name==cbn(midas_bluered::s_class())){
    a_cmap = midas_bluered();
  } else if(a_name==cbn(midas_bluewhite::s_class())){
    a_cmap = midas_bluewhite();
  } else if(a_name==cbn(midas_stairs8::s_class())){
    a_cmap = midas_stairs8();
  } else if(a_name==cbn(midas_stairs9::s_class())){
    a_cmap = midas_stairs9();
  } else if(a_name==cbn(midas_staircase::s_class())){
    a_cmap = midas_staircase();
  } else if(a_name==cbn(midas_color::s_class())){
    a_cmap = midas_color();
  } else if(a_name==cbn(midas_manycol::s_class())){
    a_cmap = midas_manycol();
  } else if(a_name==cbn(midas_idl14::s_class())){
    a_cmap = midas_idl14();
  } else if(a_name==cbn(midas_idl15::s_class())){
    a_cmap = midas_idl15();

  } else {
    a_cmap = grey256();
    return false;
  }
  return true;
}


}}

#endif
