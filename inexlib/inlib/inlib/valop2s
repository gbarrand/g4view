// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_valop2s
#define inlib_valop2s

#include "valop"

namespace inlib {

class valop2s : public virtual valop_visitor {
public:
  virtual bool binary(unsigned int a_type,const valop& a_1,const valop& a_2) {
    std::string s;
    if(!stype(a_type,s)) return false;

   {valop2s v;
    if(!v.visit(a_1)) {m_s.clear();return false;}
    if(a_1.is_leaf()) {
      m_s += v.m_s;
    } else {
      m_s += "("+v.m_s+")";
    }}

    m_s += s;

   {valop2s v;
    if(!v.visit(a_2)) {m_s.clear();return false;}
    if(a_2.is_leaf()) {
      m_s += v.m_s;
    } else {
      m_s += "("+v.m_s+")";
    }}

    return true;
  }

  virtual bool unary(unsigned int a_type,const valop& a_1) {
    if(a_type==valop::MINUS) {
      valop2s v;
      if(!v.visit(a_1)) {m_s.clear();return false;}
      if(a_1.is_leaf()) {
        m_s += "-"+v.m_s;
      } else {
        m_s += "-("+v.m_s+")";
      }
      return true;
    } else {
      return false;
    }
  }

  virtual bool variable(unsigned int,const value& a_var) {
    m_s += value::to_string(a_var);
    return true;
  }

  virtual bool option(const valop& a_v) {m_s += a_v.m_name;return true;}

  virtual bool func_1(const valop& a_f,const valop& a_1) {
    m_s += a_f.m_function->name();

    valop2s v;
    if(!v.visit(a_1)) {m_s.clear();return false;}
    m_s += "("+v.m_s+")";

    return true;
  }
  virtual bool func_2(const valop& a_f,const valop& a_1,const valop& a_2) {
    m_s += a_f.m_function->name();

   {valop2s v;
    if(!v.visit(a_1)) {m_s.clear();return false;}
    m_s += "("+v.m_s+",";}

   {valop2s v;
    if(!v.visit(a_2)) {m_s.clear();return false;}
    m_s += v.m_s+")";}

    return true;
  }
  virtual bool func_3(const valop&,const valop&,const valop&,const valop&) {
    return false;
  }
  virtual bool func_4(const valop&,const valop&,const valop&,const valop&,const valop&) {
    return false;
  }
  virtual bool func_5(const valop&,const valop&,const valop&,const valop&,const valop&,const valop&) {
    return false;
  }
  virtual bool func_6(const valop&,const valop&,const valop&,const valop&,const valop&,const valop&,const valop&) {
    return false;
  }
public:
  valop2s(){}
  virtual ~valop2s() {}
public:
  valop2s(const valop2s& a_from)
  :valop_visitor(a_from)
  {}
  valop2s& operator=(const valop2s&){return *this;}
protected:
  bool stype(unsigned int a_type,std::string& a_s){
         if(a_type==valop::ADD)   {a_s = "+";return true;}
    else if(a_type==valop::SUB)   {a_s = "-";return true;}
    else if(a_type==valop::MUL)   {a_s = "*";return true;}
    else if(a_type==valop::DIV)   {a_s = "/";return true;}
    else if(a_type==valop::NVMUL) {a_s = "*";return true;}
    else if(a_type==valop::ASIDE) {a_s = " ";return true;}
    else if(a_type==valop::EQUAL) {a_s = "=";return true;}
    else if(a_type==valop::SUPS)  {a_s = "^";return true;}
    else if(a_type==valop::SUBS)  {a_s = "#";return true;}
    a_s.clear();
    return false;
  }
public:
  std::string m_s;
};

}

#endif
