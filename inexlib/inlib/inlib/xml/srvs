// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_xml_srvs
#define inlib_xml_srvs

#include "tree"

#include "../num2s"
#include "../file_write"

namespace inlib {
namespace xml {

class srv {
public:
  srv(){}
  srv(const std::string& a_name,const std::string& a_host,unsigned int a_port)
  :m_name(a_name)
  ,m_host(a_host)
  ,m_port(a_port)
  {}
  virtual ~srv(){}
public:
  srv(const srv& a_from)
  :m_name(a_from.m_name)
  ,m_host(a_from.m_host)
  ,m_port(a_from.m_port)
  {}
  srv& operator=(const srv& a_from){
    m_name = a_from.m_name;
    m_host = a_from.m_host;
    m_port = a_from.m_port;
    return *this;
  }
public:
  const std::string& name() const {return m_name;}
  const std::string& host() const {return m_host;}
  unsigned int port() const {return m_port;}
protected:
  std::string m_name;
  std::string m_host;
  unsigned int m_port;
};

class srvs {
public:
  srvs(){}
  virtual ~srvs(){}
public:
  srvs(const srvs& a_from)
  :m_srvs(a_from.m_srvs)
  {}
  srvs& operator=(const srvs& a_from){
    m_srvs = a_from.m_srvs;
    return *this;
  }
public:
  //std::vector<srv> srvs() {return m_srvs;}
  const std::vector<srv>& _srvs() const {return m_srvs;}
  void add_srv(const std::string& a_name,const std::string& a_host,unsigned int a_port) {
    //look if already in the list :
    inlib_vforcit(srv,m_srvs,it) {
      if( ((*it).name()==a_name)  && ((*it).host()==a_host)  && ((*it).port()==a_port) ) return;
    }
    m_srvs.push_back(srv(a_name,a_host,a_port));
  }
  bool save_srvs(const std::string& a_path) {
    std::vector<std::string> lines;
    lines.push_back("<srvs>");
    std::string stmp;
    inlib_vforcit(srv,m_srvs,it) {
      lines.push_back("  <srv>");
      lines.push_back("    <name>"+(*it).name()+"</name>");
      lines.push_back("    <host>"+(*it).host()+"</host>");
      if(!num2s((*it).port(),stmp)) {}
      lines.push_back("    <port>"+stmp+"</port>");
      lines.push_back("  </srv>");
    }
    lines.push_back("</srvs>");
    return file::write(a_path,lines);
  }

public:
  bool scan_tree(const tree& a_tree) {

    const std::string& tag = a_tree.tag_name();
    if(tag=="srvs") {
    } else if(tag=="srv") {
      load(a_tree);
    }

    // scan children :
   {looper _for(a_tree);
    while(tree* _tree = _for.next_tree()) {
      if(!scan_tree(*_tree)) return false;
    }}

    return true;
  }

protected:
  void load(const tree& a_tree) {
    std::string name;
    std::string host;
    unsigned int port = 0;

   {looper _for(a_tree);
    while(element* _elem = _for.next_element()) {

      if(_elem->name()=="name") {
        name = _elem->value();
      } else if(_elem->name()=="host") {
        host = _elem->value();
      } else if(_elem->name()=="port") {
        to<unsigned int>(_elem->value(),port,0);
      }

    }}

    //NOTE : port can be 0 (for exa for the "local" srv).
    if(name.size() && host.size()) add_srv(name,host,port);
  }

protected:
  std::vector<srv> m_srvs;
};

}}

#endif
