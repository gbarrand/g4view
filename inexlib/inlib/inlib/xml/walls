// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_xml_walls
#define inlib_xml_walls

#include "tree"

namespace inlib {
namespace xml {

class wall_host { //and not wall since there is a name space wall.
public:
  wall_host(){}
  wall_host(const std::string& a_host)
  :m_host(a_host)
  {}
  virtual ~wall_host(){}
public:
  wall_host(const wall_host& a_from)
  :m_host(a_from.m_host)
  {}
  wall_host& operator=(const wall_host& a_from){
    m_host = a_from.m_host;
    return *this;
  }
public:
  const std::string& host() const {return m_host;}
protected:
  std::string m_host;
};

class walls {
public:
  walls(){}
  virtual ~walls(){}
public:
  walls(const walls& a_from):m_walls(a_from.m_walls) {}
  walls& operator=(const walls& a_from){m_walls = a_from.m_walls;return *this;}
public:
  const std::vector<wall_host>& _walls() const {return m_walls;}  
  //std::vector<wall_host> walls() {return m_walls;}

  void add_wall(const std::string& a_host) {
    //look if already in the list :
    inlib_vforcit(wall_host,m_walls,it){
      if( ((*it).host()==a_host) ) return;
    }
    m_walls.push_back(wall_host(a_host));
  }

  //bool save_walls(const std::string& a_path) {
  //  std::vector<std::string> lines;
  //  lines.push_back("<walls>");
  //  inlib_vforcit(wall_host,m_walls,it){
  //    lines.push_back("  <wall>");
  //    lines.push_back("    <host>"+(*it).host()+"</host>");
  //    lines.push_back("  </wall>");
  //  }    
  //  lines.push_back("</walls>");
  //  return file::write(a_path,lines);
  //}

public:
  bool scan_tree(tree& a_tree) {
    const std::string& tag = a_tree.tag_name();
    if(tag=="walls") {
    } else if(tag=="wall") {   
      load(a_tree);
    }
    // scan children :
   {looper _for(a_tree);
    while(tree* _tree = _for.next_tree()) {
      if(!scan_tree(*_tree)) return false;
    }}  
    return true;
  }

protected:
  void load(tree& a_tree) {
    std::string host;
    //a_tree.element_value("host",host);
   {looper _for(a_tree);
    while(element* _elem = _for.next_element()) {
      if(_elem->name()=="host") host = _elem->value();
    }}  
    if(host.size()) add_wall(host);
  }

protected:
  std::vector<wall_host> m_walls;
};

}}

#endif
