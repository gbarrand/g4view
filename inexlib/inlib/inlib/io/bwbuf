// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_io_bwbuf
#define inlib_io_bwbuf

// used to produce exsg binary files.

#include "iwbuf"

#include "../realloc"
#include "../wroot/wbuf"
#include "../vdata"

#ifdef INLIB_MEM
#include "../mem"
#endif

#include <ostream>

#include "../mnmx"

namespace inlib {
namespace io {

class bwbuf : public virtual iwbuf {
#ifdef INLIB_MEM
  static const std::string& s_class() {
    static const std::string s_v("inlib::io::bwbuf");
    return s_v;
  }
#endif
public: //iwbuf
  virtual bool write(uchar a_x) {return _write<uchar>(a_x);}
  virtual bool write(char a_x) {return _write<char>(a_x);}
  virtual bool write(uint16 a_x) {return _write<uint16>(a_x);}
  virtual bool write(int16 a_x) {return _write<int16>(a_x);}
  virtual bool write(uint32 a_x) {return _write<uint32>(a_x);}
  virtual bool write(int32 a_x) {return _write<int32>(a_x);}
  virtual bool write(uint64 a_x) {return _write<uint64>(a_x);}
  virtual bool write(int64 a_x) {return _write<int64>(a_x);}
  virtual bool write(float a_x) {return _write<float>(a_x);}
  virtual bool write(double a_x) {return _write<double>(a_x);}

  virtual bool write(bool a_v) {
    return _write<uchar>(a_v?1:0);
  }

  virtual bool write_cstr(const char* a_cstr) {
    uint32 sz = uint32(::strlen(a_cstr));
    if(!_write<uint32>(sz)) return false;
    if(!_write_cstr(sz,a_cstr)) return false;
    return true;
  }

  virtual bool write_img(uint32 a_w,uint32 a_h,uint32 a_n,
                         const uchar* a_b) {
    if(!_write<uint32>(a_w)) return false;
    if(!_write<uint32>(a_h)) return false;
    if(!_write<uint32>(a_n)) return false;

    uint32 sz = a_w*a_h*a_n;
    for(uint32 i=0;i<sz;i++) {
      if(!_write<uchar>(a_b[i])) return false;
    }

    return true;
  }

  virtual bool write_vec(uint32 a_n,const uchar* a_x){
    return _write_array<uchar>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const char* a_x){
    return _write_array<char>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const uint16* a_x){
    return _write_array<uint16>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const int16* a_x){
    return _write_array<int16>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const uint32* a_x){
    return _write_array<uint32>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const int32* a_x){
    return _write_array<int32>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const uint64* a_x){
    return _write_array<uint64>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const int64* a_x){
    return _write_array<int64>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const float* a_x){
    return _write_array<float>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const double* a_x){
    return _write_array<double>(a_n,a_x);
  }
  virtual bool write_vec(uint32 a_n,const bool* a_x){
    return _write_array<bool>(a_n,a_x);
  }

  virtual bool write_vec(const std::vector<std::string>& a_v){
    if(!_write<uint32>(uint32(a_v.size()))) return false;
    std::vector<std::string>::const_iterator it;
    for(it=a_v.begin();it!=a_v.end();++it) {
      if(!_write<uint32>(uint32((*it).size()))) return false;
      if(!_write_cstr((*it).size(),(*it).c_str())) return false;
    }
    return true;
  }

  virtual bool write_std_vec_vec(const std_vec_vec_uint_t& a_vv) {
    return _write_std_vec_vec<unsigned int>(a_vv);
  }
  virtual bool write_std_vec_vec(const std_vec_vec_float_t& a_vv) {
    return _write_std_vec_vec<float>(a_vv);
  }
  virtual bool write_std_vec_vec(const std_vec_vec_double_t& a_vv) {
    return _write_std_vec_vec<double>(a_vv);
  }

  virtual bool write_std_vec_vec(const std_vec_vec_string_t& a_vv) {
    if(!_write<uint32>(uint32(a_vv.size()))) return false;

    typedef std::vector<std::string> vec_t;

    std::vector<vec_t>::const_iterator it;
    for(it=a_vv.begin();it!=a_vv.end();++it) {
      if(!write_vec(*it)) return false;
    }

    return true;
  }
public:
  virtual const char* buf() const {return m_buffer;}
  virtual size_t length() const {return m_pos-m_buffer;}
public:
  bwbuf(std::ostream& a_out,bool a_byte_swap,size_t a_size = 1024)
  :m_out(a_out)
  ,m_size(0)
  ,m_buffer(0)
  ,m_max(0)
  ,m_pos(0)
  ,m_wbuf(a_out,a_byte_swap,0,m_pos)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    m_size = a_size;
    m_buffer = new char[m_size];
    m_max = m_buffer+m_size;
    m_pos = m_buffer;
    m_wbuf.set_eob(m_max);
  }
  virtual ~bwbuf(){
    delete [] m_buffer;
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  bwbuf(const bwbuf& a_from)
  :iwbuf(a_from)
  ,m_out(a_from.m_out)
  ,m_size(0)
  ,m_buffer(0)
  ,m_max(0)
  ,m_pos(0)
  ,m_wbuf(a_from.m_wbuf)
  {
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
    m_size = a_from.m_size;
    m_buffer = m_size?new char[m_size]:0;
    m_max = m_buffer+m_size;
    m_pos = m_buffer;
    m_wbuf.set_eob(m_max);
    if(m_size) ::memcpy(m_buffer,a_from.m_buffer,m_size);
  }
  bwbuf& operator=(const bwbuf& a_from){
    if(&a_from==this) return *this;
    delete [] m_buffer;
    m_size = a_from.m_size;
    m_buffer = m_size?new char[m_size]:0;
    m_max = m_buffer+m_size;
    m_pos = m_buffer;
    m_wbuf = a_from.m_wbuf;
    m_wbuf.set_eob(m_max);
    if(m_size) ::memcpy(m_buffer,a_from.m_buffer,m_size);
    return *this;
  }
public:
  void reset_pos() {m_pos = m_buffer;}
  bool byte_swap() const {return m_wbuf.byte_swap();}

  bool append(size_t a_sz,const char* a_buffer) {
    if((m_pos+a_sz)>m_max) {
      if(!expand(mx<size_t>(2*m_size,m_size+a_sz))) return false;
    }
    if(!m_buffer) return false;
    ::memcpy(m_pos,a_buffer,a_sz);
    m_pos += a_sz;
    return true;
  }

/*
  void transfer(bwbuf& a_from) {
    delete [] m_buffer;

    m_size = a_from.m_size;
    m_buffer = a_from.m_buffer;
    m_max = a_from.m_max;
    m_pos = a_from.m_pos;
    m_wbuf.set_eob(m_max);

    // empty a_from :
    a_from.m_size = 8;
    a_from.m_buffer = new char[a_from.m_size];
    a_from.m_max = a_from.m_buffer+a_from.m_size;
    a_from.m_pos = a_from.m_buffer;
    a_from.m_wbuf.set_eob(a_from.m_max);
  }
*/

  bool set_at_offset(size_t a_offset) {
    if(m_buffer+a_offset>m_max) return false;
    m_pos = m_buffer+a_offset;
    return true;
  }
protected:
  ////////////////////////////////////////////////
  ////////////////////////////////////////////////
  ////////////////////////////////////////////////

  bool _write_cstr(size_t a_sz,const char* a_cstr) {
    if((m_pos+a_sz)>m_max) {
      if(!expand(mx<size_t>(2*m_size,m_size+a_sz))) return false;
    }
    if(!m_buffer) return false;
    ::memcpy(m_pos,a_cstr,a_sz);
    m_pos += a_sz;
    return true;
  }

  template <class ta_type>
  bool _write(const ta_type& a_v) {
    unsigned int sz = sizeof(ta_type);
    if((m_pos+sz)>m_max) {
      if(!expand(mx<size_t>(2*m_size,m_size+sz)))
        return false;
    }
    if(!m_buffer) return false;
    return m_wbuf.write(a_v);
  }

  template <class ta_type>
  bool _write_array(uint32 a_n,const ta_type* a_a) {
    if(!_write<uint32>(a_n)) return false;
    for(uint32 i=0;i<a_n;i++) {
      if(!_write<ta_type>(a_a[i])) return false;
    }
    return true;
  }

  template <class T>
  bool _write_std_vec_vec(const std::vector< std::vector<T> >& a_vv) {
    if(!_write<uint32>(uint32(a_vv.size()))) return false;

    typedef typename std::vector<T> vec_t;

    typedef typename std::vector<vec_t>::const_iterator cit_t;
    for(cit_t it=a_vv.begin();it!=a_vv.end();++it) {
      if(!_write_array<T>(uint32((*it).size()),vec_data<T>(*it))) return false;
    }

    return true;
  }
protected:

  bool expand(size_t a_new_size) {
    size_t len = m_pos-m_buffer;
    if(!realloc<char>(m_buffer,a_new_size,m_size)) {
      m_out << "inlib::io::bwbuf::expand :"
            << " can't realloc " << a_new_size << " bytes."
            << std::endl;
      m_size = 0;
      m_max = 0;
      m_pos = 0;
      m_wbuf.set_eob(m_max);
      return false;
    }
    m_size = a_new_size;
    m_max = m_buffer + m_size;
    m_pos = m_buffer + len;
    m_wbuf.set_eob(m_max);
    return true;
  }
protected:
  std::ostream& m_out;
  size_t m_size;
  char* m_buffer;
  char* m_max;
  char* m_pos;
  wroot::wbuf m_wbuf;
};

}}

#endif
