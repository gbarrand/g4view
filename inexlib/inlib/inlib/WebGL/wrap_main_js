#ifndef wrap_main_js
#define wrap_main_js

//
//  This file had been produced automatically
// by the inlib/wrap program from the file :
//    main.js
//

inline const char** main_js(unsigned int& a_linen){
  static const char _0[] = "<html>";
  static const char _1[] = "<head>";
  static const char _2[] = "<title>@@app_name@@</title>";
  static const char _3[] = "<meta http-equiv=@@double_quote@@content-type@@double_quote@@ content=@@double_quote@@text/html; charset=ISO-8859-1@@double_quote@@>";
  static const char _4[] = "";
  static const char _5[] = "<script type=@@double_quote@@text/javascript@@double_quote@@ src=@@double_quote@@glMatrix-0.9.5.min.js@@double_quote@@></script>";
  static const char _6[] = "<script type=@@double_quote@@text/javascript@@double_quote@@ src=@@double_quote@@inflate.min.js@@double_quote@@></script>";
  static const char _7[] = "";
  static const char _8[] = "<script id=@@double_quote@@fragment_shader@@double_quote@@ type=@@double_quote@@x-shader/x-fragment@@double_quote@@>";
  static const char _9[] = "#ifdef GL_ES";
  static const char _10[] = "  precision highp float;";
  static const char _11[] = "#endif";
  static const char _12[] = "  uniform sampler2D sampler;";
  static const char _13[] = "  // variables to get data from vertex_shader :";
  static const char _14[] = "  varying vec4 frag_color;";
  static const char _15[] = "  varying float frag_tex_on; //can't be bool";
  static const char _16[] = "  varying vec2 frag_tex_coords;";
  static const char _17[] = "  void main(void) {";
  static const char _18[] = "    if(frag_tex_on==1.0) {";
  static const char _19[] = "      gl_FragColor = frag_color*texture2D(sampler,vec2(frag_tex_coords.s,frag_tex_coords.t));";
  static const char _20[] = "    } else {";
  static const char _21[] = "      gl_FragColor = frag_color;";
  static const char _22[] = "    }";
  static const char _23[] = "  }";
  static const char _24[] = "</script>";
  static const char _25[] = "";
  static const char _26[] = "<script id=@@double_quote@@vertex_shader@@double_quote@@ type=@@double_quote@@x-shader/x-vertex@@double_quote@@>";
  static const char _27[] = "  attribute vec3 one_pos;";
  static const char _28[] = "  attribute vec3 one_nm;";
  static const char _29[] = "  attribute vec4 one_color;";
  static const char _30[] = "  attribute vec2 one_tex;";
  static const char _31[] = "  uniform mat4 model;";
  static const char _32[] = "  uniform mat4 proj;";
  static const char _33[] = "  uniform vec4 color;";
  static const char _34[] = "  uniform vec4 pos_color;";
  static const char _35[] = "  uniform bool tex_on;";
  static const char _36[] = "  uniform bool light_on;";
  static const char _37[] = "  uniform vec3 light_direction;";
  static const char _38[] = "  uniform vec4 light_color;";
  static const char _39[] = "  // variables used to send data to fragment_shader :";
  static const char _40[] = "  varying float frag_tex_on; //can't be bool";
  static const char _41[] = "  varying vec4 frag_color;";
  static const char _42[] = "  varying vec2 frag_tex_coords;";
  static const char _43[] = "";
  static const char _44[] = "  void main(void) {";
  static const char _45[] = "    frag_tex_on = 0.0;";
  static const char _46[] = "    if(tex_on) frag_tex_on = 1.0;";
  static const char _47[] = "    frag_tex_coords = one_tex;";
  static const char _48[] = "    if(tex_on) {";
  static const char _49[] = "      frag_color = color;";
  static const char _50[] = "    } else {";
  static const char _51[] = "      frag_color = color+pos_color*one_color;";
  static const char _52[] = "    }";
  static const char _53[] = "";
  static const char _54[] = "    if(light_on) {";
  static const char _55[] = "      vec3 normal = vec3(model*vec4(normalize(one_nm),0));";
  static const char _56[] = "      float diffuse = dot(normal,normalize(light_direction));";
  static const char _57[] = "      if(diffuse>=0.0) {";
  static const char _58[] = "        frag_color *= 0.0;";
  static const char _59[] = "      } else {";
  static const char _60[] = "        diffuse *= -1.0;";
  static const char _61[] = "        frag_color = vec4(frag_color.rgb*diffuse,frag_color.a);";
  static const char _62[] = "      }";
  static const char _63[] = "    }";
  static const char _64[] = "";
  static const char _65[] = "    gl_Position = proj * model * vec4(one_pos,1);";
  static const char _66[] = "  }";
  static const char _67[] = "</script>";
  static const char _68[] = "";
  static const char _69[] = "<script type=@@double_quote@@text/javascript@@double_quote@@>";
  static const char _70[] = "  /////////////////////////////////////////////////";
  static const char _71[] = "  /// tools : /////////////////////////////////////";
  static const char _72[] = "  /////////////////////////////////////////////////";
  static const char _73[] = "  function get_element_content(a_element) {";
  static const char _74[] = "    var str = @@double_quote@@@@double_quote@@;";
  static const char _75[] = "    var k = a_element.firstChild;";
  static const char _76[] = "    while (k) {";
  static const char _77[] = "      if (k.nodeType == 3) str += k.textContent;";
  static const char _78[] = "      k = k.nextSibling;";
  static const char _79[] = "    }";
  static const char _80[] = "    return str;";
  static const char _81[] = "  }";
  static const char _82[] = "";
  static const char _83[] = "  function b64ToUint6 (nChr) {";
  static const char _84[] = "    return nChr > 64 && nChr < 91 ?";
  static const char _85[] = "        nChr - 65";
  static const char _86[] = "      : nChr > 96 && nChr < 123 ?";
  static const char _87[] = "        nChr - 71";
  static const char _88[] = "      : nChr > 47 && nChr < 58 ?";
  static const char _89[] = "        nChr + 4";
  static const char _90[] = "      : nChr === 43 ?";
  static const char _91[] = "        62";
  static const char _92[] = "      : nChr === 47 ?";
  static const char _93[] = "        63";
  static const char _94[] = "      :";
  static const char _95[] = "        0;";
  static const char _96[] = "  }";
  static const char _97[] = "";
  static const char _98[] = "  function base64DecToArr (sBase64, nBlocksSize) {";
  static const char _99[] = "    var";
  static const char _100[] = "      sB64Enc = sBase64.replace(/[^A-Za-z0-9@@back_slash@@+@@back_slash@@/]/g, @@double_quote@@@@double_quote@@),";
  static const char _101[] = "      nInLen = sB64Enc.length,";
  static const char _102[] = "      nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,";
  static const char _103[] = "      taBytes = new Uint8Array(nOutLen);";
  static const char _104[] = "";
  static const char _105[] = "    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {";
  static const char _106[] = "      nMod4 = nInIdx & 3;";
  static const char _107[] = "      nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;";
  static const char _108[] = "      if (nMod4 === 3 || nInLen - nInIdx === 1) {";
  static const char _109[] = "        for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {";
  static const char _110[] = "          taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;";
  static const char _111[] = "        }";
  static const char _112[] = "        nUint24 = 0;";
  static const char _113[] = "";
  static const char _114[] = "      }";
  static const char _115[] = "    }";
  static const char _116[] = "    return taBytes;";
  static const char _117[] = "  }";
  static const char _118[] = "";
  static const char _119[] = "  /////////////////////////////////////////////////";
  static const char _120[] = "  /// code using global variables : ///////////////";
  static const char _121[] = "  /////////////////////////////////////////////////";
  static const char _122[] = "  var g_gl;";
  static const char _123[] = "";
  static const char _124[] = "  var g_shader_program;";
  static const char _125[] = "";
  static const char _126[] = "  var g_sampler;";
  static const char _127[] = "  var g_tex_on;";
  static const char _128[] = "";
  static const char _129[] = "  var g_one_pos;";
  static const char _130[] = "  var g_one_nm;";
  static const char _131[] = "  var g_one_color;";
  static const char _132[] = "  var g_one_tex;";
  static const char _133[] = "  var g_model;";
  static const char _134[] = "  var g_proj;";
  static const char _135[] = "  var g_color;";
  static const char _136[] = "  var g_pos_color;";
  static const char _137[] = "  var g_light_on;";
  static const char _138[] = "  var g_light_direction;";
  static const char _139[] = "  var g_light_color;";
  static const char _140[] = "";
  static const char _141[] = "  function create_shader_program() {";
  static const char _142[] = "    var str = get_element_content(document.getElementById(@@double_quote@@fragment_shader@@double_quote@@));";
  static const char _143[] = "    var fragment_shader = g_gl.createShader(g_gl.FRAGMENT_SHADER);";
  static const char _144[] = "    g_gl.shaderSource(fragment_shader,str);";
  static const char _145[] = "    g_gl.compileShader(fragment_shader);";
  static const char _146[] = "    if (!g_gl.getShaderParameter(fragment_shader,g_gl.COMPILE_STATUS)) {";
  static const char _147[] = "      alert(g_gl.getShaderInfoLog(fragment_shader));";
  static const char _148[] = "    }";
  static const char _149[] = "";
  static const char _150[] = "    var str = get_element_content(document.getElementById(@@double_quote@@vertex_shader@@double_quote@@));";
  static const char _151[] = "    var vertex_shader = g_gl.createShader(g_gl.VERTEX_SHADER);";
  static const char _152[] = "    g_gl.shaderSource(vertex_shader,str);";
  static const char _153[] = "    g_gl.compileShader(vertex_shader);";
  static const char _154[] = "    if (!g_gl.getShaderParameter(vertex_shader,g_gl.COMPILE_STATUS)) {";
  static const char _155[] = "      alert(g_gl.getShaderInfoLog(vertex_shader));";
  static const char _156[] = "    }";
  static const char _157[] = "";
  static const char _158[] = "    g_shader_program = g_gl.createProgram();";
  static const char _159[] = "    g_gl.attachShader(g_shader_program,fragment_shader);";
  static const char _160[] = "    g_gl.attachShader(g_shader_program,vertex_shader);";
  static const char _161[] = "    g_gl.linkProgram(g_shader_program);";
  static const char _162[] = "    if (!g_gl.getProgramParameter(g_shader_program,g_gl.LINK_STATUS)) alert(@@double_quote@@Could not initialise shaders@@double_quote@@);";
  static const char _163[] = "  }";
  static const char _164[] = "";
  static const char _165[] = "  function use_shader_program() {";
  static const char _166[] = "    g_gl.useProgram(g_shader_program);";
  static const char _167[] = "";
  static const char _168[] = "    // used by renderer :";
  static const char _169[] = "    g_sampler = g_gl.getUniformLocation(g_shader_program,@@double_quote@@sampler@@double_quote@@);";
  static const char _170[] = "    g_tex_on = g_gl.getUniformLocation(g_shader_program,@@double_quote@@tex_on@@double_quote@@);";
  static const char _171[] = "";
  static const char _172[] = "    g_one_pos = g_gl.getAttribLocation(g_shader_program,@@double_quote@@one_pos@@double_quote@@);";
  static const char _173[] = "    g_one_nm = g_gl.getAttribLocation(g_shader_program,@@double_quote@@one_nm@@double_quote@@);";
  static const char _174[] = "    g_one_color = g_gl.getAttribLocation(g_shader_program,@@double_quote@@one_color@@double_quote@@);";
  static const char _175[] = "    g_one_tex = g_gl.getAttribLocation(g_shader_program,@@double_quote@@one_tex@@double_quote@@);";
  static const char _176[] = "";
  static const char _177[] = "    //console.log(@@double_quote@@g_one_pos @@double_quote@@+g_one_pos);";
  static const char _178[] = "    //console.log(@@double_quote@@g_one_nm @@double_quote@@+g_one_nm);";
  static const char _179[] = "    //console.log(@@double_quote@@g_one_color @@double_quote@@+g_one_color);";
  static const char _180[] = "    //console.log(@@double_quote@@g_one_tex @@double_quote@@+g_one_tex);";
  static const char _181[] = "";
  static const char _182[] = "    g_model  = g_gl.getUniformLocation(g_shader_program,@@double_quote@@model@@double_quote@@);";
  static const char _183[] = "    g_proj  = g_gl.getUniformLocation(g_shader_program,@@double_quote@@proj@@double_quote@@);";
  static const char _184[] = "    g_color = g_gl.getUniformLocation(g_shader_program,@@double_quote@@color@@double_quote@@);";
  static const char _185[] = "    g_pos_color = g_gl.getUniformLocation(g_shader_program,@@double_quote@@pos_color@@double_quote@@);";
  static const char _186[] = "";
  static const char _187[] = "    g_light_on = g_gl.getUniformLocation(g_shader_program,@@double_quote@@light_on@@double_quote@@);";
  static const char _188[] = "    g_light_direction = g_gl.getUniformLocation(g_shader_program,@@double_quote@@light_direction@@double_quote@@);";
  static const char _189[] = "    g_light_color = g_gl.getUniformLocation(g_shader_program,@@double_quote@@light_color@@double_quote@@);";
  static const char _190[] = "";
  static const char _191[] = "    g_gl.uniform1i(g_tex_on,0);";
  static const char _192[] = "";
  static const char _193[] = "    g_gl.uniform4f(g_color,0.5,0.5,0.5,1);";
  static const char _194[] = "    g_gl.uniform4f(g_pos_color,0,0,0,0);";
  static const char _195[] = "";
  static const char _196[] = "    g_gl.uniform1i(g_light_on,0);";
  static const char _197[] = "    g_gl.uniform4f(g_light_color,0,0,0,0);";
  static const char _198[] = "  }";
  static const char _199[] = "";
  static const char _200[] = "  var g_compression = 0;";
  static const char _201[] = "";
  static const char _202[] = "  /////////////////////////////////////////////////";
  static const char _203[] = "  /// request to the server /?cmd= ////////////////";
  static const char _204[] = "  /////////////////////////////////////////////////";
  static const char _205[] = "  var g_mouse_down = false; //optimization.";
  static const char _206[] = "  function mouse_down(a_event) {";
  static const char _207[] = "    g_mouse_down = true;";
  static const char _208[] = "    var request = new XMLHttpRequest();";
  static const char _209[] = "    var what = @@double_quote@@/?cmd=mouse_down @@mid@@ @@double_quote@@+a_event.pageX+@@double_quote@@ @@double_quote@@+a_event.pageY;";
  static const char _210[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _211[] = "    request.onreadystatechange = function() {";
  static const char _212[] = "      if (request.readyState == 4) {";
  static const char _213[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _214[] = "          if(g_compression==3) {";
  static const char _215[] = "            //eval(RawDeflate.inflate(atob(request.responseText)));";
  static const char _216[] = "";
  static const char _217[] = "            var _cp = base64DecToArr(request.responseText,0);";
  static const char _218[] = "            var _ua = (new Zlib.Inflate(_cp)).decompress();";
  static const char _219[] = "            var _resp = @@double_quote@@@@double_quote@@;";
  static const char _220[] = "            for (var i=0;i<_ua.byteLength;i++) {_resp += String.fromCharCode(_ua[i]);} //ouch !";
  static const char _221[] = "            eval(_resp);";
  static const char _222[] = "          } else {";
  static const char _223[] = "            eval(request.responseText);";
  static const char _224[] = "          }";
  static const char _225[] = "        }";
  static const char _226[] = "      }";
  static const char _227[] = "    }";
  static const char _228[] = "    request.send(null);";
  static const char _229[] = "  }";
  static const char _230[] = "";
  static const char _231[] = "  function mouse_up(a_event) {";
  static const char _232[] = "    g_mouse_down = false;";
  static const char _233[] = "    var request = new XMLHttpRequest();";
  static const char _234[] = "    var what = @@double_quote@@/?cmd=mouse_up @@mid@@ @@double_quote@@+a_event.pageX+@@double_quote@@ @@double_quote@@+a_event.pageY;";
  static const char _235[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _236[] = "    request.onreadystatechange = function() {";
  static const char _237[] = "      if (request.readyState== 4) {";
  static const char _238[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _239[] = "          var type = request.getResponseHeader(@@double_quote@@Content-Type@@double_quote@@);";
  static const char _240[] = "          if(type==@@double_quote@@text/html@@double_quote@@) { // for example loading a form.";
  static const char _241[] = "            document.body.onload = null;";
  static const char _242[] = "            document.body.onunload = null;";
  static const char _243[] = "            document.body.innerHTML=request.responseText;";
  static const char _244[] = "          } else { //assume text/javascript :";
  static const char _245[] = "            if(g_compression==3) {";
  static const char _246[] = "              var _cp = base64DecToArr(request.responseText,0);";
  static const char _247[] = "              var _ua = (new Zlib.Inflate(_cp)).decompress();";
  static const char _248[] = "              var _resp = @@double_quote@@@@double_quote@@;";
  static const char _249[] = "              for (var i=0;i<_ua.byteLength;i++) {_resp += String.fromCharCode(_ua[i]);}";
  static const char _250[] = "              eval(_resp);";
  static const char _251[] = "            } else {";
  static const char _252[] = "              eval(request.responseText);";
  static const char _253[] = "            }";
  static const char _254[] = "          }";
  static const char _255[] = "        }";
  static const char _256[] = "      }";
  static const char _257[] = "    }";
  static const char _258[] = "    request.send(null);";
  static const char _259[] = "  }";
  static const char _260[] = "";
  static const char _261[] = "  function idle_proc() {";
  static const char _262[] = "    var request = new XMLHttpRequest();";
  static const char _263[] = "    var what = @@double_quote@@/?cmd=idle_proc @@mid@@@@double_quote@@;";
  static const char _264[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _265[] = "    request.onreadystatechange = function() {";
  static const char _266[] = "      if (request.readyState== 4) {";
  static const char _267[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _268[] = "          if(g_compression==3) {";
  static const char _269[] = "            var _cp = base64DecToArr(request.responseText,0);";
  static const char _270[] = "            var _ua = (new Zlib.Inflate(_cp)).decompress();";
  static const char _271[] = "            var _resp = @@double_quote@@@@double_quote@@;";
  static const char _272[] = "            for (var i=0;i<_ua.byteLength;i++) {_resp += String.fromCharCode(_ua[i]);}";
  static const char _273[] = "            eval(_resp);";
  static const char _274[] = "          } else {";
  static const char _275[] = "            eval(request.responseText);";
  static const char _276[] = "          }";
  static const char _277[] = "        }";
  static const char _278[] = "      }";
  static const char _279[] = "    }";
  static const char _280[] = "    request.send(null);";
  static const char _281[] = "  }";
  static const char _282[] = "";
  static const char _283[] = "  function mouse_move(a_event) {";
  static const char _284[] = "    if(!g_mouse_down) return;";
  static const char _285[] = "    var request = new XMLHttpRequest();";
  static const char _286[] = "    var what = @@double_quote@@/?cmd=mouse_move @@mid@@ @@double_quote@@+a_event.pageX+@@double_quote@@ @@double_quote@@+a_event.pageY;";
  static const char _287[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _288[] = "    request.onreadystatechange = function() {";
  static const char _289[] = "      if (request.readyState== 4) {";
  static const char _290[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _291[] = "          if(g_compression==3) {";
  static const char _292[] = "            var _cp = base64DecToArr(request.responseText,0);";
  static const char _293[] = "            var _ua = (new Zlib.Inflate(_cp)).decompress();";
  static const char _294[] = "            var _resp = @@double_quote@@@@double_quote@@;";
  static const char _295[] = "            for (var i=0;i<_ua.byteLength;i++) {_resp += String.fromCharCode(_ua[i]);}";
  static const char _296[] = "            eval(_resp);";
  static const char _297[] = "          } else {";
  static const char _298[] = "            eval(request.responseText);";
  static const char _299[] = "          }";
  static const char _300[] = "        }";
  static const char _301[] = "      }";
  static const char _302[] = "    }";
  static const char _303[] = "    request.send(null);";
  static const char _304[] = "  }";
  static const char _305[] = "";
  static const char _306[] = "  function body_onunload() {";
  static const char _307[] = "    var request = new XMLHttpRequest();";
  static const char _308[] = "    console.log(@@double_quote@@debug : body_onunload() : @@mid@@@@double_quote@@);";
  static const char _309[] = "    var what = @@double_quote@@/?cmd=end @@mid@@@@double_quote@@;";
  static const char _310[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _311[] = "    request.onreadystatechange = function() {";
  static const char _312[] = "      if (request.readyState == 4) {";
  static const char _313[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _314[] = "        }";
  static const char _315[] = "      }";
  static const char _316[] = "    }";
  static const char _317[] = "    request.send(null);";
  static const char _318[] = "  }";
  static const char _319[] = "";
  static const char _320[] = "  /////////////////////////////////////////////////";
  static const char _321[] = "  /////////////////////////////////////////////////";
  static const char _322[] = "  /////////////////////////////////////////////////";
  static const char _323[] = "  function body_onload() {";
  static const char _324[] = "    console.log(@@double_quote@@debug : body_onload : run : 064 : main_id @@double_quote@@+@@mid@@);";
  static const char _325[] = "";
  static const char _326[] = "    var canvas = document.getElementById(@@double_quote@@WebGL_canvas@@double_quote@@);";
  static const char _327[] = "";
  static const char _328[] = "    canvas.onmousedown = mouse_down;";
  static const char _329[] = "    canvas.onmouseup = mouse_up;";
  static const char _330[] = "    canvas.onmousemove = mouse_move;";
  static const char _331[] = "    //canvas.onmouseout = mouse_out;";
  static const char _332[] = "";
  static const char _333[] = "    try {";
  static const char _334[] = "      g_gl = canvas.getContext(@@double_quote@@experimental-webgl@@double_quote@@);";
  static const char _335[] = "    } catch (e) {";
  static const char _336[] = "    }";
  static const char _337[] = "";
  static const char _338[] = "    if (!g_gl) {";
  static const char _339[] = "      alert(@@double_quote@@Could not initialise WebGL, sorry :-(@@double_quote@@);";
  static const char _340[] = "    } else {";
  static const char _341[] = "      create_shader_program();";
  static const char _342[] = "      use_shader_program();";
  static const char _343[] = "";
  static const char _344[] = "      create_texs();";
  static const char _345[] = "      create_vbos();";
  static const char _346[] = "      //draw_scene();";
  static const char _347[] = "      body_onresize();";
  static const char _348[] = "    }";
  static const char _349[] = "  }";
  static const char _350[] = "";
  static const char _351[] = "  function body_onresize() {";
  static const char _352[] = "    //console.log(@@double_quote@@body_onresize@@double_quote@@);";
  static const char _353[] = "";
  static const char _354[] = "    var canvas = document.getElementById(@@double_quote@@WebGL_canvas@@double_quote@@);";
  static const char _355[] = "";
  static const char _356[] = "    //var fixed_size = true;";
  static const char _357[] = "    var fixed_size = false;";
  static const char _358[] = "    if(fixed_size) {";
  static const char _359[] = "      canvas.width  = @@width@@;";
  static const char _360[] = "      canvas.height = @@height@@;";
  static const char _361[] = "    } else {";
  static const char _362[] = "      canvas.width  = window.innerWidth;";
  static const char _363[] = "      canvas.height = window.innerHeight;";
  static const char _364[] = "    }";
  static const char _365[] = "";
  static const char _366[] = "    var ww = canvas.width;";
  static const char _367[] = "    var wh = canvas.height;";
  static const char _368[] = "";
  static const char _369[] = "    var request = new XMLHttpRequest();";
  static const char _370[] = "    var what = @@double_quote@@/?cmd=resize @@mid@@ @@double_quote@@+ww+@@double_quote@@ @@double_quote@@+wh;";
  static const char _371[] = "    request.open(@@double_quote@@GET@@double_quote@@,what,true);";
  static const char _372[] = "    request.onreadystatechange = function() {";
  static const char _373[] = "      if (request.readyState == 4) {";
  static const char _374[] = "        if (request.status == 200 || request.status == 0) {";
  static const char _375[] = "            if(g_compression==3) {";
  static const char _376[] = "              var _cp = base64DecToArr(request.responseText,0);";
  static const char _377[] = "              var _ua = (new Zlib.Inflate(_cp)).decompress();";
  static const char _378[] = "              var _resp = @@double_quote@@@@double_quote@@;";
  static const char _379[] = "              for (var i=0;i<_ua.byteLength;i++) {_resp += String.fromCharCode(_ua[i]);}";
  static const char _380[] = "              eval(_resp);";
  static const char _381[] = "            } else {";
  static const char _382[] = "              eval(request.responseText);";
  static const char _383[] = "            }";
  static const char _384[] = "        }";
  static const char _385[] = "      }";
  static const char _386[] = "    }";
  static const char _387[] = "    request.send(null);";
  static const char _388[] = "  }";
  static const char _389[] = "";
  static const char _390[] = "  function set_canvas_cursor(a_style) {";
  static const char _391[] = "    document.getElementById(@@double_quote@@WebGL_canvas@@double_quote@@).style.cursor = a_style;";
  static const char _392[] = "  }";
  static const char _393[] = "";
  static const char _394[] = "  function clear_page() {";
  static const char _395[] = "    if(typeof g_idle_timer != 'undefined' ) clearInterval(g_idle_timer);";
  static const char _396[] = "    var canvas = document.getElementById(@@double_quote@@WebGL_canvas@@double_quote@@);";
  static const char _397[] = "    canvas.parentNode.removeChild(canvas);";
  static const char _398[] = "    //document.body.innerHTML = 'end';";
  static const char _399[] = "  }";
  static const char _400[] = "";
  static const char _401[] = "  /////////////////////////////////////////////////";
  static const char _402[] = "  /// to shorten server side produced code : //////";
  static const char _403[] = "  /////////////////////////////////////////////////";
  static const char _404[] = "  function begdraw(a_w,a_h,a_r,a_g,a_b,a_a) {";
  static const char _405[] = "";
  static const char _406[] = "    g_gl.viewport(0,0,a_w,a_h);";
  static const char _407[] = "";
  static const char _408[] = "    //g_gl.enable(g_gl.GL_NORMALIZE);";
  static const char _409[] = "    //g_gl.shadeModel(g_gl.GL_FLAT);";
  static const char _410[] = "    ////g_gl.shadeModel(g_gl.GL_SMOOTH); //Gouraud";
  static const char _411[] = "    //// GL-ES : ::glMaterialfv does not work. We then use :";
  static const char _412[] = "    ////         ::glEnable(GL_COLOR_MATERIAL) and ::glColor.";
  static const char _413[] = "    //g_gl.enable(g_gl.GL_COLOR_MATERIAL);";
  static const char _414[] = "";
  static const char _415[] = "    // to handle transparency :";
  static const char _416[] = "    g_gl.enable(g_gl.BLEND);";
  static const char _417[] = "    g_gl.blendFunc(g_gl.SRC_ALPHA,g_gl.ONE_MINUS_SRC_ALPHA);";
  static const char _418[] = "";
  static const char _419[] = "    //WARNING : the below enable/disable corresponds";
  static const char _420[] = "    //          to defaults in sg::state.";
  static const char _421[] = "    g_gl.clearDepth(1);";
  static const char _422[] = "    g_gl.enable(g_gl.DEPTH_TEST);";
  static const char _423[] = "    g_gl.depthFunc(g_gl.LEQUAL);";
  static const char _424[] = "  //g_gl.disable(LIGHTING);";
  static const char _425[] = "    g_gl.frontFace(g_gl.CCW);";
  static const char _426[] = "    g_gl.enable(g_gl.CULL_FACE);";
  static const char _427[] = "    g_gl.disable(g_gl.POLYGON_OFFSET_FILL);";
  static const char _428[] = "  //g_gl.disable(g_gl.GL_TEXTURE_2D);";
  static const char _429[] = "";
  static const char _430[] = "    g_gl.clearColor(a_r,a_g,a_b,a_a);";
  static const char _431[] = "    g_gl.clear(g_gl.COLOR_BUFFER_BIT);";
  static const char _432[] = "    g_gl.clear(g_gl.DEPTH_BUFFER_BIT);";
  static const char _433[] = "";
  static const char _434[] = "    var ID4 = mat4.create();";
  static const char _435[] = "    mat4.identity(ID4);";
  static const char _436[] = "    g_gl.uniformMatrix4fv(g_model,false,ID4);";
  static const char _437[] = "    g_gl.uniformMatrix4fv(g_proj,false,ID4);";
  static const char _438[] = "  }";
  static const char _439[] = "";
  static const char _440[] = "  var g_no_atb_zero_warn = true; //to rm warning @@double_quote@@Attribute 0...@@double_quote@@. Seen on Chrome, Firefox.";
  static const char _441[] = "";
  static const char _442[] = "  function dva(a_mode,a_num,a_data) { //a_data : expect a Float32Array";
  static const char _443[] = "    var vbo = g_gl.createBuffer();";
  static const char _444[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _445[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _446[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _447[] = "    if(g_no_atb_zero_warn) {";
  static const char _448[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _449[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _450[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _451[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _452[] = "    }";
  static const char _453[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _454[] = "    g_gl.drawArrays(a_mode,0,a_num); //a_num = nb of points.";
  static const char _455[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _456[] = "    if(g_no_atb_zero_warn) {";
  static const char _457[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _458[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _459[] = "    }";
  static const char _460[] = "    g_gl.deleteBuffer(vbo);";
  static const char _461[] = "  }";
  static const char _462[] = "";
  static const char _463[] = "  function dvaxy(a_mode,a_num,a_data) { //a_data : expect a Float32Array";
  static const char _464[] = "    var vbo = g_gl.createBuffer();";
  static const char _465[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _466[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _467[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _468[] = "    if(g_no_atb_zero_warn) {";
  static const char _469[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _470[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _471[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _472[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _473[] = "    }";
  static const char _474[] = "    g_gl.vertexAttribPointer(g_one_pos,2,g_gl.FLOAT,false,0,0);";
  static const char _475[] = "    g_gl.drawArrays(a_mode,0,a_num); //a_num = nb of points.";
  static const char _476[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _477[] = "    if(g_no_atb_zero_warn) {";
  static const char _478[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _479[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _480[] = "    }";
  static const char _481[] = "    g_gl.deleteBuffer(vbo);";
  static const char _482[] = "  }";
  static const char _483[] = "";
  static const char _484[] = "  function dvca(a_mode,a_num,a_data,a_pos_rgbas) {";
  static const char _485[] = "    g_gl.uniform4f(g_color,0,0,0,0);";
  static const char _486[] = "    g_gl.uniform4f(g_pos_color,1,1,1,1);";
  static const char _487[] = "    var vbo = g_gl.createBuffer();";
  static const char _488[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _489[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _490[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _491[] = "    g_gl.enableVertexAttribArray(g_one_color);";
  static const char _492[] = "    if(g_no_atb_zero_warn) {";
  static const char _493[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _494[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _495[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _496[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _497[] = "    }";
  static const char _498[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _499[] = "    g_gl.vertexAttribPointer(g_one_color,4,g_gl.FLOAT,false,0,a_pos_rgbas);";
  static const char _500[] = "    g_gl.drawArrays(a_mode,0,a_num); //a_num = nb of points.";
  static const char _501[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _502[] = "    g_gl.disableVertexAttribArray(g_one_color);";
  static const char _503[] = "    if(g_no_atb_zero_warn) {";
  static const char _504[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _505[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _506[] = "    }";
  static const char _507[] = "    g_gl.deleteBuffer(vbo);";
  static const char _508[] = "    g_gl.uniform4f(g_pos_color,0,0,0,0);";
  static const char _509[] = "  }";
  static const char _510[] = "";
  static const char _511[] = "  function dvna(a_mode,a_num,a_data,a_pos_nms) {";
  static const char _512[] = "    var vbo = g_gl.createBuffer();";
  static const char _513[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _514[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _515[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _516[] = "    g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _517[] = "    if(g_no_atb_zero_warn) {";
  static const char _518[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _519[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _520[] = "    }";
  static const char _521[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _522[] = "    g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,a_pos_nms);";
  static const char _523[] = "    g_gl.drawArrays(a_mode,0,a_num); //a_num = nb of points.";
  static const char _524[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _525[] = "    g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _526[] = "    if(g_no_atb_zero_warn) {";
  static const char _527[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _528[] = "    }";
  static const char _529[] = "    g_gl.deleteBuffer(vbo);";
  static const char _530[] = "  }";
  static const char _531[] = "";
  static const char _532[] = "  function dvnca(a_mode,a_num,a_data,a_pos_nms,a_pos_rgbas) {";
  static const char _533[] = "    g_gl.uniform4f(g_color,0,0,0,0);";
  static const char _534[] = "    g_gl.uniform4f(g_pos_color,1,1,1,1);";
  static const char _535[] = "    var vbo = g_gl.createBuffer();";
  static const char _536[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _537[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _538[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _539[] = "    g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _540[] = "    g_gl.enableVertexAttribArray(g_one_color);";
  static const char _541[] = "    if(g_no_atb_zero_warn) {";
  static const char _542[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _543[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _544[] = "    }";
  static const char _545[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _546[] = "    g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,a_pos_nms);";
  static const char _547[] = "    g_gl.vertexAttribPointer(g_one_color,4,g_gl.FLOAT,false,0,a_pos_rgbas);";
  static const char _548[] = "    g_gl.drawArrays(a_mode,0,a_num); //a_num = nb of points.";
  static const char _549[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _550[] = "    g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _551[] = "    g_gl.disableVertexAttribArray(g_one_color);";
  static const char _552[] = "    if(g_no_atb_zero_warn) {";
  static const char _553[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _554[] = "    }";
  static const char _555[] = "    g_gl.deleteBuffer(vbo);";
  static const char _556[] = "    g_gl.uniform4f(g_pos_color,0,0,0,0);";
  static const char _557[] = "  }";
  static const char _558[] = "";
  static const char _559[] = "  function dvta(a_mode,a_id,a_num,a_data,a_pos_texs) {";
  static const char _560[] = "    g_gl.uniform1i(g_tex_on,1);";
  static const char _561[] = "    g_gl.uniform1i(g_sampler,0);";
  static const char _562[] = "  //g_gl.activeTexture(g_gl.TEXTURE0);";
  static const char _563[] = "  //g_gl.enable(g_gl.TEXTURE_2D);";
  static const char _564[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,a_id);";
  static const char _565[] = "";
  static const char _566[] = "    var vbo = g_gl.createBuffer();";
  static const char _567[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _568[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _569[] = "";
  static const char _570[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _571[] = "    g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _572[] = "    if(g_no_atb_zero_warn) {";
  static const char _573[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _574[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _575[] = "    }";
  static const char _576[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _577[] = "    g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,a_pos_texs);";
  static const char _578[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _579[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _580[] = "    g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _581[] = "    if(g_no_atb_zero_warn) {";
  static const char _582[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _583[] = "    }";
  static const char _584[] = "    g_gl.deleteBuffer(vbo);";
  static const char _585[] = "";
  static const char _586[] = "    g_gl.uniform1i(g_tex_on,0);";
  static const char _587[] = "  }";
  static const char _588[] = "";
  static const char _589[] = "  function dvnta(a_mode,a_id,a_num,a_data,a_pos_nms,a_pos_texs) {";
  static const char _590[] = "    g_gl.uniform1i(g_tex_on,1);";
  static const char _591[] = "    g_gl.uniform1i(g_sampler,0);";
  static const char _592[] = "  //g_gl.activeTexture(g_gl.TEXTURE0);";
  static const char _593[] = "  //g_gl.enable(g_gl.TEXTURE_2D);";
  static const char _594[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,a_id);";
  static const char _595[] = "";
  static const char _596[] = "    var vbo = g_gl.createBuffer();";
  static const char _597[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,vbo);";
  static const char _598[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _599[] = "";
  static const char _600[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _601[] = "    g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _602[] = "    g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _603[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,0);";
  static const char _604[] = "    g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,a_pos_nms);";
  static const char _605[] = "    g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,a_pos_texs);";
  static const char _606[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _607[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _608[] = "    g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _609[] = "    g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _610[] = "    g_gl.deleteBuffer(vbo);";
  static const char _611[] = "";
  static const char _612[] = "    g_gl.uniform1i(g_tex_on,0);";
  static const char _613[] = "  }";
  static const char _614[] = "";
  static const char _615[] = "  function ctex() {return g_gl.createTexture();}";
  static const char _616[] = "  function cbuf() {return g_gl.createBuffer();}";
  static const char _617[] = "";
  static const char _618[] = "  function dtex(a_id) {g_gl.deleteTexture(a_id);}";
  static const char _619[] = "  function dbuf(a_id) {g_gl.deleteBuffer(a_id);}";
  static const char _620[] = "";
  static const char _621[] = "  function bbd(a_id,a_data) {";
  static const char _622[] = "    g_gl.bindBuffer(g_gl.ARRAY_BUFFER,a_id);";
  static const char _623[] = "    g_gl.bufferData(g_gl.ARRAY_BUFFER,a_data,g_gl.STATIC_DRAW);";
  static const char _624[] = "    //g_gl.bindBuffer(g_gl.ARRAY_BUFFER,0);";
  static const char _625[] = "  }";
  static const char _626[] = "";
  static const char _627[] = "  function bb(a_id) {g_gl.bindBuffer(g_gl.ARRAY_BUFFER,a_id);}";
  static const char _628[] = "";
  static const char _629[] = "  function dvb(a_mode,a_num,a_pos_xyzs) {";
  static const char _630[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _631[] = "    if(g_no_atb_zero_warn) {";
  static const char _632[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _633[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _634[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _635[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _636[] = "    }";
  static const char _637[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,a_pos_xyzs);";
  static const char _638[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _639[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _640[] = "    if(g_no_atb_zero_warn) {";
  static const char _641[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _642[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _643[] = "    }";
  static const char _644[] = "  }";
  static const char _645[] = "";
  static const char _646[] = "  function dvcb(a_mode,a_num,a_pos_xyzs,a_pos_rgbas) {";
  static const char _647[] = "    g_gl.uniform4f(g_color,0,0,0,0);";
  static const char _648[] = "    g_gl.uniform4f(g_pos_color,1,1,1,1);";
  static const char _649[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _650[] = "    g_gl.enableVertexAttribArray(g_one_color);";
  static const char _651[] = "    if(g_no_atb_zero_warn) {";
  static const char _652[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _653[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _654[] = "      g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _655[] = "      g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,0);";
  static const char _656[] = "    }";
  static const char _657[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,a_pos_xyzs);";
  static const char _658[] = "    g_gl.vertexAttribPointer(g_one_color,4,g_gl.FLOAT,false,0,a_pos_rgbas);";
  static const char _659[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _660[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _661[] = "    g_gl.disableVertexAttribArray(g_one_color);";
  static const char _662[] = "    if(g_no_atb_zero_warn) {";
  static const char _663[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _664[] = "      g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _665[] = "    }";
  static const char _666[] = "    g_gl.uniform4f(g_pos_color,0,0,0,0);";
  static const char _667[] = "  }";
  static const char _668[] = "";
  static const char _669[] = "  function dvnb(a_mode,a_num,a_pos_xyzs,a_pos_nms) {";
  static const char _670[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _671[] = "    g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _672[] = "    if(g_no_atb_zero_warn) {";
  static const char _673[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _674[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _675[] = "    }";
  static const char _676[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,a_pos_xyzs);";
  static const char _677[] = "    g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,a_pos_nms);";
  static const char _678[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _679[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _680[] = "    g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _681[] = "    if(g_no_atb_zero_warn) {";
  static const char _682[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _683[] = "    }";
  static const char _684[] = "  }";
  static const char _685[] = "";
  static const char _686[] = "  function dvncb(a_mode,a_num,a_pos_xyzs,a_pos_nms,a_pos_rgbas) {";
  static const char _687[] = "    g_gl.uniform4f(g_color,0,0,0,0);";
  static const char _688[] = "    g_gl.uniform4f(g_pos_color,1,1,1,1);";
  static const char _689[] = "    g_gl.enableVertexAttribArray(g_one_pos);";
  static const char _690[] = "    g_gl.enableVertexAttribArray(g_one_nm);";
  static const char _691[] = "    g_gl.enableVertexAttribArray(g_one_color);";
  static const char _692[] = "    if(g_no_atb_zero_warn) {";
  static const char _693[] = "      g_gl.enableVertexAttribArray(g_one_tex);";
  static const char _694[] = "      g_gl.vertexAttribPointer(g_one_tex,2,g_gl.FLOAT,false,0,0);";
  static const char _695[] = "    }";
  static const char _696[] = "    g_gl.vertexAttribPointer(g_one_pos,3,g_gl.FLOAT,false,0,a_pos_xyzs);";
  static const char _697[] = "    g_gl.vertexAttribPointer(g_one_nm,3,g_gl.FLOAT,false,0,a_pos_nms);";
  static const char _698[] = "    g_gl.vertexAttribPointer(g_one_color,4,g_gl.FLOAT,false,0,a_pos_rgbas);";
  static const char _699[] = "    g_gl.drawArrays(a_mode,0,a_num);";
  static const char _700[] = "    g_gl.disableVertexAttribArray(g_one_pos);";
  static const char _701[] = "    g_gl.disableVertexAttribArray(g_one_nm);";
  static const char _702[] = "    g_gl.disableVertexAttribArray(g_one_color);";
  static const char _703[] = "    if(g_no_atb_zero_warn) {";
  static const char _704[] = "      g_gl.disableVertexAttribArray(g_one_tex);";
  static const char _705[] = "    }";
  static const char _706[] = "    g_gl.uniform4f(g_pos_color,0,0,0,0);";
  static const char _707[] = "  }";
  static const char _708[] = "";
  static const char _709[] = "";
  static const char _710[] = "  function ldcol(a_r,a_g,a_b,a_a) {g_gl.uniform4f(g_color,a_r,a_g,a_b,a_a);}";
  static const char _711[] = "";
  static const char _712[] = "  //function gon(a_v) {g_gl.enable(a_v);}";
  static const char _713[] = "  //function goff(a_v) {g_gl.disable(a_v);}";
  static const char _714[] = "  function glw(a_v) {g_gl.lineWidth(a_v);}";
  static const char _715[] = "  function gffcw() {g_gl.frontFace(g_gl.CW);}";
  static const char _716[] = "  function gffccw() {g_gl.frontFace(g_gl.CCW);}";
  static const char _717[] = "";
  static const char _718[] = "  // code must match inlib/glprims :";
  static const char _719[] = "  function md0() {return g_gl.POINTS;}";
  static const char _720[] = "  function md1() {return g_gl.LINES;}";
  static const char _721[] = "  function md2() {return g_gl.LINE_LOOP;}";
  static const char _722[] = "  function md3() {return g_gl.LINE_STRIP;}";
  static const char _723[] = "  function md4() {return g_gl.TRIANGLES;}";
  static const char _724[] = "  function md5() {return g_gl.TRIANGLE_STRIP;}";
  static const char _725[] = "  function md6() {return g_gl.TRIANGLE_FAN;}";
  static const char _726[] = "";
  static const char _727[] = "  function lgon(a_x,a_y,a_z,a_r,a_g,a_b,a_a) {";
  static const char _728[] = "    g_gl.uniform1i(g_light_on,1);";
  static const char _729[] = "    g_gl.uniform3f(g_light_direction,a_x,a_y,a_z);";
  static const char _730[] = "    g_gl.uniform4f(g_light_color,a_r,a_g,a_b,a_a);";
  static const char _731[] = "  }";
  static const char _732[] = "";
  static const char _733[] = "  function lgoff() {g_gl.uniform1i(g_light_on,0);}";
  static const char _734[] = "";
  static const char _735[] = "  function gpo(a_v) {";
  static const char _736[] = "    if(a_v) g_gl.enable(g_gl.POLYGON_OFFSET_FILL);";
  static const char _737[] = "    else    g_gl.disable(g_gl.POLYGON_OFFSET_FILL);";
  static const char _738[] = "    if(a_v) g_gl.polygonOffset(1.,1.);";
  static const char _739[] = "  }";
  static const char _740[] = "  function gdt(a_v) {";
  static const char _741[] = "    if(a_v) g_gl.enable(g_gl.DEPTH_TEST);";
  static const char _742[] = "    else    g_gl.disable(g_gl.DEPTH_TEST);";
  static const char _743[] = "  }";
  static const char _744[] = "  function gcf(a_v) {";
  static const char _745[] = "    if(a_v) g_gl.enable(g_gl.CULL_FACE);";
  static const char _746[] = "    else    g_gl.disable(g_gl.CULL_FACE);";
  static const char _747[] = "  }";
  static const char _748[] = "";
  static const char _749[] = "/*";
  static const char _750[] = "  function ldtexi(a_texture,a_image) {";
  static const char _751[] = "    g_gl.pixelStorei(g_gl.UNPACK_FLIP_Y_WEBGL,true);";
  static const char _752[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,a_texture);";
  static const char _753[] = "    g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGBA,g_gl.RGBA,g_gl.UNSIGNED_BYTE,a_image);";
  static const char _754[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MAG_FILTER,g_gl.NEAREST);";
  static const char _755[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MIN_FILTER,g_gl.NEAREST);";
  static const char _756[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,null);";
  static const char _757[] = "  }";
  static const char _758[] = "*/";
  static const char _759[] = "";
  static const char _760[] = "  function ldtexb(a_texture,a_w,a_h,a_data,a_compression) {";
  static const char _761[] = "  //g_gl.pixelStorei(g_gl.UNPACK_FLIP_Y_WEBGL,true);";
  static const char _762[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,a_texture);";
  static const char _763[] = "    //console.log(@@double_quote@@debug : compression : @@double_quote@@+a_compression);";
  static const char _764[] = "    if(a_compression==0) {";
  static const char _765[] = "      // a_data is expected to be a Uint8Array containing the image.";
  static const char _766[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGB,a_w,a_h,0,g_gl.RGB,g_gl.UNSIGNED_BYTE,a_data);";
  static const char _767[] = "    } else if(a_compression==1) {";
  static const char _768[] = "      // a_data is expected to be a base64 string containing the image.";
  static const char _769[] = "      var _data = base64DecToArr(a_data,0);";
  static const char _770[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGB,a_w,a_h,0,g_gl.RGB,g_gl.UNSIGNED_BYTE,_data);";
  static const char _771[] = "      delete _data;";
  static const char _772[] = "    } else if(a_compression==2) {";
  static const char _773[] = "      // a_data is expected to be a Uint8Array containing the gzipped image.";
  static const char _774[] = "      var inflator = new Zlib.Inflate(a_data);";
  static const char _775[] = "      var _data = inflator.decompress();";
  static const char _776[] = "      delete inflator;";
  static const char _777[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGB,a_w,a_h,0,g_gl.RGB,g_gl.UNSIGNED_BYTE,_data);";
  static const char _778[] = "      delete _data;";
  static const char _779[] = "    } else if(a_compression==3) {";
  static const char _780[] = "      // a_data is expected to be a base64 string containing the gzipped image.";
  static const char _781[] = "      var _cp = base64DecToArr(a_data,0);";
  static const char _782[] = "      var inflator = new Zlib.Inflate(_cp);";
  static const char _783[] = "      var _data = inflator.decompress();";
  static const char _784[] = "      delete inflator;";
  static const char _785[] = "      delete _cp;";
  static const char _786[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGB,a_w,a_h,0,g_gl.RGB,g_gl.UNSIGNED_BYTE,_data);";
  static const char _787[] = "      delete _data;";
  static const char _788[] = "    } else {";
  static const char _789[] = "      console.log(@@double_quote@@load_texture : unkown compression mode @@double_quote@@+a_compression)";
  static const char _790[] = "    }";
  static const char _791[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MAG_FILTER,g_gl.NEAREST);";
  static const char _792[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MIN_FILTER,g_gl.NEAREST);";
  static const char _793[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,null);";
  static const char _794[] = "  }";
  static const char _795[] = "";
  static const char _796[] = "  function ldtexba(a_texture,a_w,a_h,a_data,a_compression) {";
  static const char _797[] = "  //g_gl.pixelStorei(g_gl.UNPACK_FLIP_Y_WEBGL,true);";
  static const char _798[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,a_texture);";
  static const char _799[] = "    //console.log(@@double_quote@@debug : compression : @@double_quote@@+a_compression);";
  static const char _800[] = "    if(a_compression==0) {";
  static const char _801[] = "      // a_data is expected to be a Uint8Array containing the image.";
  static const char _802[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGBA,a_w,a_h,0,g_gl.RGBA,g_gl.UNSIGNED_BYTE,a_data);";
  static const char _803[] = "    } else if(a_compression==1) {";
  static const char _804[] = "      // a_data is expected to be a base64 string containing the image.";
  static const char _805[] = "      var _data = base64DecToArr(a_data,0);";
  static const char _806[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGBA,a_w,a_h,0,g_gl.RGBA,g_gl.UNSIGNED_BYTE,_data);";
  static const char _807[] = "      delete _data;";
  static const char _808[] = "    } else if(a_compression==2) {";
  static const char _809[] = "      // a_data is expected to be a Uint8Array containing the gzipped image.";
  static const char _810[] = "      var inflator = new Zlib.Inflate(a_data);";
  static const char _811[] = "      var _data = inflator.decompress();";
  static const char _812[] = "      delete inflator;";
  static const char _813[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGBA,a_w,a_h,0,g_gl.RGBA,g_gl.UNSIGNED_BYTE,_data);";
  static const char _814[] = "      delete _data;";
  static const char _815[] = "    } else if(a_compression==3) {";
  static const char _816[] = "      // a_data is expected to be a base64 string containing the gzipped image.";
  static const char _817[] = "      var _cp = base64DecToArr(a_data,0);";
  static const char _818[] = "      var inflator = new Zlib.Inflate(_cp);";
  static const char _819[] = "      var _data = inflator.decompress();";
  static const char _820[] = "      delete inflator;";
  static const char _821[] = "      delete _cp;";
  static const char _822[] = "      g_gl.texImage2D(g_gl.TEXTURE_2D,0,g_gl.RGBA,a_w,a_h,0,g_gl.RGBA,g_gl.UNSIGNED_BYTE,_data);";
  static const char _823[] = "      delete _data;";
  static const char _824[] = "    } else {";
  static const char _825[] = "      console.log(@@double_quote@@load_texture : unkown compression mode @@double_quote@@+a_compression)";
  static const char _826[] = "    }";
  static const char _827[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MAG_FILTER,g_gl.NEAREST);";
  static const char _828[] = "    g_gl.texParameteri(g_gl.TEXTURE_2D,g_gl.TEXTURE_MIN_FILTER,g_gl.NEAREST);";
  static const char _829[] = "    g_gl.bindTexture(g_gl.TEXTURE_2D,null);";
  static const char _830[] = "  }";
  static const char _831[] = "";
  static const char _832[] = "  function ldmatp(a_vals) {";
  static const char _833[] = "    g_gl.uniformMatrix4fv(g_proj,false,mat4.create(a_vals));";
  static const char _834[] = "  }";
  static const char _835[] = "  function ldmatm(a_vals) {";
  static const char _836[] = "    g_gl.uniformMatrix4fv(g_model,false,mat4.create(a_vals));";
  static const char _837[] = "  }";
  static const char _838[] = "  /////////////////////////////////////////////////";
  static const char _839[] = "  /////////////////////////////////////////////////";
  static const char _840[] = "  /////////////////////////////////////////////////";
  static const char _841[] = "";
  static const char _842[] = "</script>";
  static const char _843[] = "";
  static const char _844[] = "</head>";
  static const char _845[] = "<body onload=@@double_quote@@body_onload();@@double_quote@@ onunload=@@double_quote@@body_onunload()@@double_quote@@ onresize=@@double_quote@@body_onresize()@@double_quote@@";
  static const char _846[] = "      bgcolor=@@double_quote@@@@bgcolor@@@@double_quote@@ style=@@double_quote@@margin:0px@@double_quote@@>";
  static const char _847[] = "  <canvas id=@@double_quote@@WebGL_canvas@@double_quote@@ style=@@double_quote@@border:none;@@double_quote@@/>";
  static const char _848[] = "</body>";
  static const char _849[] = "</html>";
  static const char* _lines[] = {
_0
,_1
,_2
,_3
,_4
,_5
,_6
,_7
,_8
,_9
,_10
,_11
,_12
,_13
,_14
,_15
,_16
,_17
,_18
,_19
,_20
,_21
,_22
,_23
,_24
,_25
,_26
,_27
,_28
,_29
,_30
,_31
,_32
,_33
,_34
,_35
,_36
,_37
,_38
,_39
,_40
,_41
,_42
,_43
,_44
,_45
,_46
,_47
,_48
,_49
,_50
,_51
,_52
,_53
,_54
,_55
,_56
,_57
,_58
,_59
,_60
,_61
,_62
,_63
,_64
,_65
,_66
,_67
,_68
,_69
,_70
,_71
,_72
,_73
,_74
,_75
,_76
,_77
,_78
,_79
,_80
,_81
,_82
,_83
,_84
,_85
,_86
,_87
,_88
,_89
,_90
,_91
,_92
,_93
,_94
,_95
,_96
,_97
,_98
,_99
,_100
,_101
,_102
,_103
,_104
,_105
,_106
,_107
,_108
,_109
,_110
,_111
,_112
,_113
,_114
,_115
,_116
,_117
,_118
,_119
,_120
,_121
,_122
,_123
,_124
,_125
,_126
,_127
,_128
,_129
,_130
,_131
,_132
,_133
,_134
,_135
,_136
,_137
,_138
,_139
,_140
,_141
,_142
,_143
,_144
,_145
,_146
,_147
,_148
,_149
,_150
,_151
,_152
,_153
,_154
,_155
,_156
,_157
,_158
,_159
,_160
,_161
,_162
,_163
,_164
,_165
,_166
,_167
,_168
,_169
,_170
,_171
,_172
,_173
,_174
,_175
,_176
,_177
,_178
,_179
,_180
,_181
,_182
,_183
,_184
,_185
,_186
,_187
,_188
,_189
,_190
,_191
,_192
,_193
,_194
,_195
,_196
,_197
,_198
,_199
,_200
,_201
,_202
,_203
,_204
,_205
,_206
,_207
,_208
,_209
,_210
,_211
,_212
,_213
,_214
,_215
,_216
,_217
,_218
,_219
,_220
,_221
,_222
,_223
,_224
,_225
,_226
,_227
,_228
,_229
,_230
,_231
,_232
,_233
,_234
,_235
,_236
,_237
,_238
,_239
,_240
,_241
,_242
,_243
,_244
,_245
,_246
,_247
,_248
,_249
,_250
,_251
,_252
,_253
,_254
,_255
,_256
,_257
,_258
,_259
,_260
,_261
,_262
,_263
,_264
,_265
,_266
,_267
,_268
,_269
,_270
,_271
,_272
,_273
,_274
,_275
,_276
,_277
,_278
,_279
,_280
,_281
,_282
,_283
,_284
,_285
,_286
,_287
,_288
,_289
,_290
,_291
,_292
,_293
,_294
,_295
,_296
,_297
,_298
,_299
,_300
,_301
,_302
,_303
,_304
,_305
,_306
,_307
,_308
,_309
,_310
,_311
,_312
,_313
,_314
,_315
,_316
,_317
,_318
,_319
,_320
,_321
,_322
,_323
,_324
,_325
,_326
,_327
,_328
,_329
,_330
,_331
,_332
,_333
,_334
,_335
,_336
,_337
,_338
,_339
,_340
,_341
,_342
,_343
,_344
,_345
,_346
,_347
,_348
,_349
,_350
,_351
,_352
,_353
,_354
,_355
,_356
,_357
,_358
,_359
,_360
,_361
,_362
,_363
,_364
,_365
,_366
,_367
,_368
,_369
,_370
,_371
,_372
,_373
,_374
,_375
,_376
,_377
,_378
,_379
,_380
,_381
,_382
,_383
,_384
,_385
,_386
,_387
,_388
,_389
,_390
,_391
,_392
,_393
,_394
,_395
,_396
,_397
,_398
,_399
,_400
,_401
,_402
,_403
,_404
,_405
,_406
,_407
,_408
,_409
,_410
,_411
,_412
,_413
,_414
,_415
,_416
,_417
,_418
,_419
,_420
,_421
,_422
,_423
,_424
,_425
,_426
,_427
,_428
,_429
,_430
,_431
,_432
,_433
,_434
,_435
,_436
,_437
,_438
,_439
,_440
,_441
,_442
,_443
,_444
,_445
,_446
,_447
,_448
,_449
,_450
,_451
,_452
,_453
,_454
,_455
,_456
,_457
,_458
,_459
,_460
,_461
,_462
,_463
,_464
,_465
,_466
,_467
,_468
,_469
,_470
,_471
,_472
,_473
,_474
,_475
,_476
,_477
,_478
,_479
,_480
,_481
,_482
,_483
,_484
,_485
,_486
,_487
,_488
,_489
,_490
,_491
,_492
,_493
,_494
,_495
,_496
,_497
,_498
,_499
,_500
,_501
,_502
,_503
,_504
,_505
,_506
,_507
,_508
,_509
,_510
,_511
,_512
,_513
,_514
,_515
,_516
,_517
,_518
,_519
,_520
,_521
,_522
,_523
,_524
,_525
,_526
,_527
,_528
,_529
,_530
,_531
,_532
,_533
,_534
,_535
,_536
,_537
,_538
,_539
,_540
,_541
,_542
,_543
,_544
,_545
,_546
,_547
,_548
,_549
,_550
,_551
,_552
,_553
,_554
,_555
,_556
,_557
,_558
,_559
,_560
,_561
,_562
,_563
,_564
,_565
,_566
,_567
,_568
,_569
,_570
,_571
,_572
,_573
,_574
,_575
,_576
,_577
,_578
,_579
,_580
,_581
,_582
,_583
,_584
,_585
,_586
,_587
,_588
,_589
,_590
,_591
,_592
,_593
,_594
,_595
,_596
,_597
,_598
,_599
,_600
,_601
,_602
,_603
,_604
,_605
,_606
,_607
,_608
,_609
,_610
,_611
,_612
,_613
,_614
,_615
,_616
,_617
,_618
,_619
,_620
,_621
,_622
,_623
,_624
,_625
,_626
,_627
,_628
,_629
,_630
,_631
,_632
,_633
,_634
,_635
,_636
,_637
,_638
,_639
,_640
,_641
,_642
,_643
,_644
,_645
,_646
,_647
,_648
,_649
,_650
,_651
,_652
,_653
,_654
,_655
,_656
,_657
,_658
,_659
,_660
,_661
,_662
,_663
,_664
,_665
,_666
,_667
,_668
,_669
,_670
,_671
,_672
,_673
,_674
,_675
,_676
,_677
,_678
,_679
,_680
,_681
,_682
,_683
,_684
,_685
,_686
,_687
,_688
,_689
,_690
,_691
,_692
,_693
,_694
,_695
,_696
,_697
,_698
,_699
,_700
,_701
,_702
,_703
,_704
,_705
,_706
,_707
,_708
,_709
,_710
,_711
,_712
,_713
,_714
,_715
,_716
,_717
,_718
,_719
,_720
,_721
,_722
,_723
,_724
,_725
,_726
,_727
,_728
,_729
,_730
,_731
,_732
,_733
,_734
,_735
,_736
,_737
,_738
,_739
,_740
,_741
,_742
,_743
,_744
,_745
,_746
,_747
,_748
,_749
,_750
,_751
,_752
,_753
,_754
,_755
,_756
,_757
,_758
,_759
,_760
,_761
,_762
,_763
,_764
,_765
,_766
,_767
,_768
,_769
,_770
,_771
,_772
,_773
,_774
,_775
,_776
,_777
,_778
,_779
,_780
,_781
,_782
,_783
,_784
,_785
,_786
,_787
,_788
,_789
,_790
,_791
,_792
,_793
,_794
,_795
,_796
,_797
,_798
,_799
,_800
,_801
,_802
,_803
,_804
,_805
,_806
,_807
,_808
,_809
,_810
,_811
,_812
,_813
,_814
,_815
,_816
,_817
,_818
,_819
,_820
,_821
,_822
,_823
,_824
,_825
,_826
,_827
,_828
,_829
,_830
,_831
,_832
,_833
,_834
,_835
,_836
,_837
,_838
,_839
,_840
,_841
,_842
,_843
,_844
,_845
,_846
,_847
,_848
,_849
};
 a_linen = 850;
 return _lines;
}

#endif
