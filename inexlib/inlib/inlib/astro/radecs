// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_radecs
#define inlib_radecs

#include "../forit"
#include "../mathd"
#include "../lina/geom3"
#include "../lina/vec3d"
#include "../lina/rotd"
#include "../lina/geom2"
#include "../lina/vec2d"
#include "radec2xyz"

namespace inlib {

inline double default_sky_radius() {return 1000;}
inline double default_stars_radius() {return 999.95;}

template <class STAR>
inline void search_stars(const std::vector<STAR>& a_cata,const double a_radecs[8],double a_sky_radius,
                         std::vector<STAR>& a_stars) {
  //SDSS : a_sky_radius 1000 is ok. -> size of rectangle on the sphere around 2.
  a_stars.clear();
  double d2r = deg2rad();
  double _ra,_dec,x,y,z;
  std::vector<vec3d> cs3(4);
 {for(unsigned int corner=0;corner<4;corner++) {
    _ra  = a_radecs[2*corner+0]*d2r;
    _dec = a_radecs[2*corner+1]*d2r;
    radec2xyz(_ra,_dec,a_sky_radius,x,y,z);
    cs3[corner].set_value(x,y,z);
  }}

  plane<vec3d> _plane(cs3[0],cs3[1],cs3[2]);
  const vec3d& _normal = _plane.normal();

  std::vector<vec2d> cs2(5);

  rotd r;r.set_value(_normal,vec3d(0,0,1));
  vec3d out;
 {for(unsigned int corner=0;corner<4;corner++) {
    r.mul_vec(cs3[corner]-cs3[0],out);
    cs2[corner].set_value(out.x(),out.y());
  }}
  cs2[4] = cs2[0];

  double ra,dec;
  vec3d p;
  inlib_typename_vforcit(STAR,a_cata,it) {
    (*it).radec(ra,dec);
    _ra  = ra*d2r;
    _dec = dec*d2r;
    radec2xyz(_ra,_dec,a_sky_radius,x,y,z);

    line<vec3d> _line(vec3d(0,0,0),vec3d(x,y,z));
    if(!_plane.intersect(_line,p)) {}

    r.mul_vec(p-cs3[0],out);

    if(is_inside(vec2d(out.x(),out.y()),cs2)) a_stars.push_back(*it);
  }
}

template <class fpC_radecs>
inline bool search_radec(double a_sky_radius,const std::vector<fpC_radecs>& a_fpCs,
                         double a_ra,double a_dec,std::string& a_file,
                         double a_vals[8]) {
  double d2r = deg2rad();
  double _ra,_dec,x,y,z;

  double corners[8];
  std::vector<vec3d> cs3(4);
  vec3d out;
  std::vector<vec2d> cs2(5);

  inlib_typename_vforcit(fpC_radecs,a_fpCs,it){
    (*it).get_corners(corners);
   {for(unsigned int corner=0;corner<4;corner++) {
      _ra  = corners[2*corner+0]*d2r;
      _dec = corners[2*corner+1]*d2r;
      radec2xyz(_ra,_dec,a_sky_radius,x,y,z);
      cs3[corner].set_value(x,y,z);
    }}

    plane<vec3d> _plane(cs3[0],cs3[1],cs3[2]);
    const vec3d& _normal = _plane.normal();
    rotd r;r.set_value(_normal,vec3d(0,0,1));
   {for(unsigned int corner=0;corner<4;corner++) {
      r.mul_vec(cs3[corner]-cs3[0],out);
      cs2[corner].set_value(out.x(),out.y());
    }}
    cs2[4] = cs2[0];

    _ra  = a_ra*d2r;
    _dec = a_dec*d2r;
    radec2xyz(_ra,_dec,a_sky_radius,x,y,z);

    line<vec3d> _line(vec3d(0,0,0),vec3d(x,y,z));
    vec3d p;
    if(!_plane.intersect(_line,p)) {}
    r.mul_vec(p-cs3[0],out);

    if(is_inside(vec2d(out.x(),out.y()),cs2)) {
      a_file = (*it).sid();
      (*it).get_corners(a_vals);
      return true;
    }
  }
 {for(unsigned int index=0;index<8;index++) a_vals[index] = 0;}
  a_file.clear();
  return false;
}

template <class VEC>
inline void radecs_center(const double a_radecs[8],double a_sky_radius,std::vector<VEC>& a_vcs,VEC& a_center) {
  a_vcs.resize(4);
  a_center.set_value(0,0,0);
  double d2r = deg2rad();
  double _ra,_dec,x,y,z;
  typedef typename VEC::elem_t T;
 {for(unsigned int corner=0;corner<4;corner++) {
    _ra  = a_radecs[2*corner+0]*d2r;
    _dec = a_radecs[2*corner+1]*d2r;
    radec2xyz(_ra,_dec,a_sky_radius,x,y,z);
    a_vcs[corner].set_value(T(x),T(y),T(z));
    a_center.set_value(a_center.x()+T(x),a_center.y()+T(y),a_center.z()+T(z));
  }}
  a_center.multiply(1.0f/4.0f);
 {for(unsigned int corner=0;corner<4;corner++) a_vcs[corner] -= a_center;}
}

/*
inline double amodulo(double a_angle) {
  int64 div = a_angle/two_pi();
  double rest = a_angle - div*two_pi();
  if(rest<0) rest += two_pi();
  return rest;
}

inline void radecs_center(const double a_radecs[8],double a_ra,double a_dec) {
  double d2r = deg2rad();
  a_ra = amodulo(a_radecs[0]*d2r);
  a_dec = amodulo(a_radecs[1]*d2r);
 {for(unsigned int corner=1;corner<4;corner++) {
    a_ra  += amodulo(a_radecs[2*corner+0]*d2r);
    a_dec += amodulo(a_radecs[2*corner+1]*d2r);
  }}
  a_ra /= 4;
  a_dec /= 4;
}
*/

inline bool solid_angle(const double a_radecs[8],double a_sky_radius,double& a_solid) {
  // a_radecs in dec deg. a_solid in radian**2
  std::vector<vec3d> vcs;
  vec3d center;
  radecs_center(a_radecs,a_sky_radius,vcs,center);
  vec3d c01 = vcs[1]-vcs[0];
  vec3d c03 = vcs[3]-vcs[0];
  vec3d n;c01.cross(c03,n);
  double area = n.normalize();
  if(area==0) {a_solid = 0;return false;}
  double r = center.normalize();
  if(r==0) {a_solid = 0;return false;}
  // from Wikipedia :
  a_solid = area*n.dot(center)/(r*r); //NOTE : it could be negative.
  return true;
}

}

#endif
