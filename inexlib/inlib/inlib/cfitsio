// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cfitsio
#define inlib_cfitsio

//#include "../carray"

namespace inlib {
//name space cfitsio //it would clash with sg::cfitsio

//WARNING : must be the same than in fitsio.h
enum cfitsio_bitpix_code {
  byte_img     =  8,  //BYTE_IMG
  short_img    =  16, //SHORT_IMG
  long_img     =  32, //LONG_IMG
  longlong_img =  64, //LONGLONG_IMG
  float_img    = -32, //FLOAT_IMG
  double_img   = -64  //DOUBLE_IMG
};

}

#include "carray"
#include "typedefs"
#include <cstddef>

namespace inlib {

template <class TO>
inline bool cfitsio_min_max_mean_rms(size_t a_cells,const void* a_buffer,cfitsio_bitpix_code a_bitpix,
                                     TO& a_mn,TO& a_mx,TO& a_mean,TO& a_rms,TO(*a_sqrt)(TO),TO(*a_fabs)(TO)) {
  //NOTE : a_cells is not the a_buffer size.
  if(!a_cells) {
    a_mn=TO(0);a_mx=TO(0);
    a_mean=TO(0);a_rms=TO(0);
    return false;
  }
  if(a_bitpix==byte_img) {
    return min_max_mean_rms<size_t,unsigned char,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else if(a_bitpix==short_img) {
    return min_max_mean_rms<size_t,short,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else if(a_bitpix==long_img) {
    return min_max_mean_rms<size_t,int,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else if(a_bitpix==longlong_img) {
    return min_max_mean_rms<size_t,int64,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else if(a_bitpix==float_img) {
    return min_max_mean_rms<size_t,float,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else if(a_bitpix==double_img) {
    return min_max_mean_rms<size_t,double,TO>(a_cells,a_buffer,a_mn,a_mx,a_mean,a_rms,a_sqrt,a_fabs);
  } else {
    a_mn=TO(0);a_mx=TO(0);
    a_mean=TO(0);a_rms=TO(0);
    return false;
  }
  return true;
}

template <class TO>
inline bool cfitsio_min_max_S_S2(size_t a_cells,const void* a_buffer,cfitsio_bitpix_code a_bitpix,
                                 TO& a_mn,TO& a_mx,TO& a_S,TO& a_S2) {
  //NOTE : a_cells is not the a_buffer size.
  if(!a_cells) {
    a_mn=TO(0);a_mx=TO(0);
    a_S=TO(0);a_S2=TO(0);
    return false;
  }
  if(a_bitpix==byte_img) {
    return min_max_S_S2<size_t,unsigned char,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else if(a_bitpix==short_img) {
    return min_max_S_S2<size_t,short,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else if(a_bitpix==long_img) {
    return min_max_S_S2<size_t,int,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else if(a_bitpix==longlong_img) {
    return min_max_S_S2<size_t,int64,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else if(a_bitpix==float_img) {
    return min_max_S_S2<size_t,float,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else if(a_bitpix==double_img) {
    return min_max_S_S2<size_t,double,TO>(a_cells,a_buffer,a_mn,a_mx,a_S,a_S2);
  } else {
    a_mn=TO(0);a_mx=TO(0);
    a_S=TO(0);a_S2=TO(0);
    return false;
  }
  return true;
}

template <class HISTO>
inline bool cfitsio_h1_fill(size_t a_cells,const void* a_buffer,cfitsio_bitpix_code a_bitpix,HISTO& a_histo) {
  if(a_bitpix==byte_img) {
    if(!h1_fill<size_t,unsigned char,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else if(a_bitpix==short_img) {
    if(!h1_fill<size_t,short,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else if(a_bitpix==long_img) {
    if(!h1_fill<size_t,int,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else if(a_bitpix==longlong_img) {
    if(!h1_fill<size_t,int64,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else if(a_bitpix==float_img) {
    if(!h1_fill<size_t,float,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else if(a_bitpix==double_img) {
    if(!h1_fill<size_t,double,HISTO>(a_cells,a_buffer,a_histo)) return false;
  } else {
    a_histo.reset();
    return false;
  }
  return true;
}

template <class T,class ZT>
inline bool cfitsio_zoom_data(unsigned int a_cols,unsigned int a_rows,const char* a_buffer,
                              unsigned int a_zcols,unsigned int a_zrows,ZT*& a_zbuffer) {
    if(!a_cols || !a_rows) {a_zbuffer = 0;return false;}

    unsigned int zsz = a_zcols*a_zrows;

    a_zbuffer = new ZT[zsz]; //zoom buffer.
    if(!a_zbuffer) return false;

    typedef unsigned int uint;
    uint* nbuffer = new uint[zsz];
    if(!nbuffer) {
      delete [] a_zbuffer;
      a_zbuffer = 0;
      return false;
    }

   {ZT* zpos = a_zbuffer;
    uint* npos = nbuffer;
    for(unsigned int iy=0;iy<a_zrows;iy++) {
      for(unsigned int ix=0;ix<a_zcols;ix++) {
        *zpos = ZT(0);zpos++;
        *npos = 0;npos++;
      }
    }}

    // zoom data :
    // zoom buffer is centered on the center of the data image.
   {T* dpos = (T*)a_buffer;
    float _sx = float(a_zcols-1)/float(a_cols-1);
    float _sy = float(a_zrows-1)/float(a_rows-1);
    unsigned int zx,zy;
    ZT* zpos;
    uint* npos;
   {for(unsigned int iy=0;iy<a_rows;iy++) {
      for(unsigned int ix=0;ix<a_cols;ix++) {
        // position in zoom buffer :
        zx = float(ix)*_sx;
        zy = float(iy)*_sy;
        zpos = a_zbuffer+a_zcols*zy+zx;
        *zpos += ZT(*dpos);
        npos = nbuffer+a_zcols*zy+zx;
        *npos += 1;
        dpos++;
      }
    }}}

   {ZT* zpos = a_zbuffer;
    uint* npos = nbuffer;
    for(unsigned int iy=0;iy<a_zrows;iy++) {
      for(unsigned int ix=0;ix<a_zcols;ix++) {
        if(*npos) {*zpos = (*zpos)/ZT(*npos);}
        zpos++;npos++;
      }
    }}

    delete [] nbuffer;

    return true;
}

}

#include "lut"
#include "colorf"
#include "img"

namespace inlib {

template <class T>
inline bool cfitsio_array2img(std::ostream& a_out,
                              unsigned int a_cols,unsigned int a_rows,const char* a_buffer,
                              unsigned int a_zoom,bool a_yswap,
                              const lut<float>& a_lut,const std::vector<colorf>& a_colors,
                              img_byte& a_img) {
    if(!a_cols || !a_rows) return false;

    // zoom = 2 => twice less pixels visualized than in data.

    size_t vlut;
    unsigned int bpp = 3;

    if(a_zoom==1) {

      // vis buffer :
      unsigned int sz = bpp*a_cols*a_rows;
      unsigned char* vbuffer = new unsigned char[sz];
      if(!vbuffer) {
        a_out << "array2img :"
              << " can't alloc vis buffer of size " << sz << "."
              << std::endl;
        return false;
      }

      if(a_yswap) {
        T* dpos = (T*)a_buffer;
        for(unsigned int iy=0;iy<a_rows;iy++) {
          unsigned char* vpos = vbuffer+bpp*a_cols*(a_rows-1-iy);
          for(unsigned int ix=0;ix<a_cols;ix++) {
            vlut = a_lut.apply(float(*dpos));
            if(vlut>=a_colors.size()) {
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
            } else {
              const colorf& col = a_colors[vlut];
              *vpos = col.ruchar();vpos++;
              *vpos = col.guchar();vpos++;
              *vpos = col.buchar();vpos++;
            }
            dpos++;
          }
        }
      } else {
        T* dpos = (T*)a_buffer;
        for(unsigned int iy=0;iy<a_rows;iy++) {
          unsigned char* vpos = vbuffer+bpp*a_cols*iy;
          for(unsigned int ix=0;ix<a_cols;ix++) {
            vlut = a_lut.apply(float(*dpos));
            if(vlut>=a_colors.size()) {
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
            } else {
              const colorf& col = a_colors[vlut];
              *vpos = col.ruchar();vpos++;
              *vpos = col.guchar();vpos++;
              *vpos = col.buchar();vpos++;
            }
            dpos++;
          }
        }
      }

      a_img.set(a_cols,a_rows,bpp,vbuffer,true);

    } else {

      unsigned int vis_cols = a_cols/a_zoom;
      unsigned int vis_rows = a_rows/a_zoom;
      if(!vis_cols || !vis_rows) {
        a_out << "array2img :"
              << " null vis_cols or vis_rows."
              << std::endl;
        return false;
      }

      typedef float VT;
      VT* zbuffer = 0;
      if(!cfitsio_zoom_data<T,VT>(a_cols,a_rows,a_buffer,vis_cols,vis_rows,zbuffer)) {
        a_out << "array2img :"
              << " zoom_data() failed."
              << std::endl;
        return false;
      }

      // vis buffer :
      unsigned int sz = bpp*vis_cols*vis_rows;
      unsigned char* vbuffer = new unsigned char[sz];
      if(!vbuffer) {
        delete [] zbuffer;
        a_out << "array2img :"
              << " can't alloc vis buffer of size " << sz << "."
              << std::endl;
        return false;
      }

      unsigned char* vpos;
      if(a_yswap) {
        VT* zpos = zbuffer;
        for(unsigned int iy=0;iy<vis_rows;iy++) {
          vpos = vbuffer+bpp*vis_cols*(vis_rows-1-iy);
          for(unsigned int ix=0;ix<vis_cols;ix++) {
            vlut = a_lut.apply(float(*zpos));
            if(vlut>=a_colors.size()) {
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
            } else {
              const colorf& col = a_colors[vlut];
              *vpos = col.ruchar();vpos++;
              *vpos = col.guchar();vpos++;
              *vpos = col.buchar();vpos++;
            }
            zpos++;
          }
        }
      } else {
        VT* zpos = zbuffer;
        for(unsigned int iy=0;iy<vis_rows;iy++) {
          vpos = vbuffer+bpp*vis_cols*iy;
          for(unsigned int ix=0;ix<vis_cols;ix++) {
            vlut = a_lut.apply(float(*zpos));
            if(vlut>=a_colors.size()) {
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
              *vpos = 0;vpos++;
            } else {
              const colorf& col = a_colors[vlut];
              *vpos = col.ruchar();vpos++;
              *vpos = col.guchar();vpos++;
              *vpos = col.buchar();vpos++;
            }
            zpos++;
          }
        }
      }

      delete [] zbuffer;

      a_img.set(vis_cols,vis_rows,bpp,vbuffer,true);

    } //end a_zoom==1

    return true;
}

inline bool cfitsio_buffer2img(std::ostream& a_out,
                               cfitsio_bitpix_code a_bitpix,
                               unsigned int a_cols,unsigned int a_rows,const char* a_buffer,
                               unsigned int a_zoom,bool a_yswap,
                               const lut<float>& a_lut,const std::vector<colorf>& a_colors,
                               img_byte& a_img) {
    if(a_bitpix==byte_img) {
      if(!cfitsio_array2img<unsigned char>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else if(a_bitpix==short_img) {
      if(!cfitsio_array2img<short>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else if(a_bitpix==long_img) {
      if(!cfitsio_array2img<int>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else if(a_bitpix==longlong_img) {
      if(!cfitsio_array2img<int64>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else if(a_bitpix==float_img) {
      if(!cfitsio_array2img<float>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else if(a_bitpix==double_img) {
      if(!cfitsio_array2img<double>(a_out,a_cols,a_rows,a_buffer,a_zoom,a_yswap,a_lut,a_colors,a_img)) return false;
    } else {
      return false;
    }
    return true;
  }

}

#endif
