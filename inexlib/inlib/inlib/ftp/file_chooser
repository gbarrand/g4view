// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_ftp_file_chooser
#define inlib_ftp_file_chooser

#include "../sg/base_fch"
#include "../net/ftp"
#include "../buf2lines"

#include "client"

namespace inlib {
namespace ftp {

class file_chooser: public sg::base_fch {
  typedef sg::base_fch parent;
public:
  INLIB_SCLASS(inlib::ftp::file_chooser)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<file_chooser>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new file_chooser(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  virtual bool get_dirs(std::ostream&,const std::string& a_path,std::vector<std::string>& a_dirs){
    bool verbose = false;
    net::ftp _ftp(m_out,verbose);
    if(!_ftp.start(m_ftp.host(),m_ftp.user(),m_ftp.pass())) {
      a_dirs.clear();
      return false;
    }
 
    char* buffer;
    uint64 length;
    if(!_ftp.fetch_dir(a_path,buffer,length,m_ftp.active())) {
      a_dirs.clear();
      return false;
    }

    std::vector<std::string> lines;
    buf2lines(buffer,lines);
    delete [] buffer;      
#ifdef INLIB_MEM
    mem::decrement(s_new().c_str());
#endif

    if(verbose) {
      m_out << "dump dir " << a_path << " :" << std::endl;
      inlib_vforcit(std::string,lines,it) {
        m_out << *it << std::endl;
      }
    }

    a_dirs.clear();
    inlib_vforcit(std::string,lines,it) {
      std::vector<std::string> _words;
      words(*it," ",false,_words);
      if(_words.size()!=9) continue;
      const std::string& mode = _words[0];
      const std::string& name = _words[_words.size()-1];

      if(mode.size() && (mode[0]=='d')) {
        a_dirs.push_back(name);
      }
    }

    // Have "/" in the below, it must be the ftp svr sep.

    inlib_vforit(std::string,a_dirs,it) *it = a_path+"/"+(*it);

    return true;
  }
  virtual bool get_files(std::ostream&,const std::string& a_path,const std::string& a_ext,std::vector<std::string>& a_paths){
    bool verbose = false;
    net::ftp _ftp(m_out,verbose);
    if(!_ftp.start(m_ftp.host(),m_ftp.user(),m_ftp.pass())) {
      a_paths.clear();
      return false;
    }
 
    char* buffer;
    uint64 length;
    if(!_ftp.fetch_dir(a_path,buffer,length,m_ftp.active())) {
      a_paths.clear();
      return false;
    }

    std::vector<std::string> lines;
    buf2lines(buffer,lines);
    delete [] buffer;      
#ifdef INLIB_MEM
    mem::decrement(s_new().c_str());
#endif

    if(verbose) {
      m_out << "dump dir " << a_path << " :" << std::endl;
      inlib_vforcit(std::string,lines,it) {
        m_out << *it << std::endl;
      }
    }

    a_paths.clear();
    inlib_vforcit(std::string,lines,it) {
      std::vector<std::string> _words;
      words(*it," ",false,_words);
      if(_words.size()!=9) continue;
      const std::string& mode = _words[0];
      const std::string& name = _words[_words.size()-1];
      if(mode.size() && (mode[0]=='d')) {
      } else {
        if(a_ext.empty()||(a_ext=="*")||(name.rfind(a_ext)!=std::string::npos)) {
          //_words[4] = size
          a_paths.push_back(name+" ("+_words[4]+")");
        }
      }
    }

    // Have "/" in the below, it must be the ftp svr sep.

    inlib_vforit(std::string,a_paths,it) *it = a_path+"/"+(*it);

    return true;
  }
public:
  file_chooser(std::ostream& a_out,const sg::base_freetype& a_ttf,const ftp::client& a_ftp)
  :parent(a_ttf)
  ,m_out(a_out)
  ,m_ftp(a_ftp)
  {}
  virtual ~file_chooser(){}
public:
  file_chooser(const file_chooser& a_from)
  :sg::ilist(a_from)
  ,parent(a_from)
  ,m_out(a_from.m_out)
  ,m_ftp(a_from.m_ftp)
  {}
  file_chooser& operator=(const file_chooser& a_from){
    parent::operator=(a_from);
    m_ftp = a_from.m_ftp;
    return *this;
  }
protected:
  std::ostream& m_out;
  ftp::client m_ftp;
};
  
}}

//inlib_build_use kernel

#endif
