// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_dirmanip
#define inlib_dirmanip

#include "get_env"
#include "sep"
#include "sout"
#include "vmanip"
#include "path_words"

#include "sys/files" //windows.h on Windows.

namespace inlib {

inline bool get_files_with_exts(std::ostream& a_out,
                                const std::vector<std::string>& a_dirs,
                                const std::vector<std::string>& a_exts,
                                std::vector<std::string>& a_paths) {

  a_paths.clear();

  bool status = true;

  inlib_vforcit(std::string,a_dirs,pit) {
    const std::string& dir = *pit;
    bool is_dir;
    if(!dir::is_a(dir,is_dir)) continue;
    if(!is_dir) continue;

    std::vector<std::string> ls;
    if(!dir::entries(dir,ls,false)){
      a_out << "inlib::get_files :"
            << " can't get entries"
            << " of directory " << sout(dir) << "."
            << std::endl;
      status = false;
      continue; //continue anyway.
  //} else {
      //a_out << "inlib::get_files :"
      //a_out << "number of files : " << ls.size() << std::endl;
      //std::vector<std::string>::const_iterator it;
      //for(it=ls.begin();it!=ls.end();++it) {
      //  a_out << *it << std::endl;
      //}
    }

    std::vector<std::string> files;
   {inlib_vforcit(std::string,ls,it) {
      if((*it)==".") continue;
      if((*it)=="..") continue;

      inlib_vforcit(std::string,a_exts,eit) {
        const std::string& ext = *eit;
        if((ext=="*")||((*it).rfind(ext)!=std::string::npos)) {
          files.push_back(*it);
        }
      }
    }}

    inlib_vforcit(std::string,files,it) {
      std::string path = dir+sep()+(*it);
      a_paths.push_back(path);
    }
  }

  unique(a_paths);

  return status;
}

inline bool get_files_with_names(std::ostream& a_out,
                                 const std::vector<std::string>& a_dirs,
                                 const std::vector<std::string>& a_names,
                                 std::vector<std::string>& a_paths) {

  a_paths.clear();

  bool status = true;

  inlib_vforcit(std::string,a_dirs,pit) {
    const std::string& dir = *pit;
    bool is_dir;
    if(!dir::is_a(dir,is_dir)) continue;
    if(!is_dir) continue;

    std::vector<std::string> ls;
    if(!dir::entries(dir,ls,false)){
      a_out << "inlib::get_files :"
            << " can't get entries"
            << " of directory " << sout(dir) << "."
            << std::endl;
      status = false;
      continue; //continue anyway.
  //} else {
      //a_out << "inlib::get_files :"
      //a_out << "number of files : " << ls.size() << std::endl;
      //std::vector<std::string>::const_iterator it;
      //for(it=ls.begin();it!=ls.end();++it) {
      //  a_out << *it << std::endl;
      //}
    }

    std::vector<std::string> files;
   {inlib_vforcit(std::string,ls,it) {
      if((*it)==".") continue;
      if((*it)=="..") continue;
      inlib_vforcit(std::string,a_names,nit) {
        if((*it)==(*nit)) {
          files.push_back(*it);
        }
      }
    }}

    inlib_vforcit(std::string,files,it) {
      std::string path = dir+sep()+(*it);
      a_paths.push_back(path);
    }
  }

  unique(a_paths);

  return status;
}

inline bool check_env_dir(const std::string& a_env) {
  std::string s;
  if(!get_env(a_env,s)) return false;
  bool is_dir;
  dir::is_a(s,is_dir);
  return is_dir;
}

}

//inlib_build_use kernel

#endif
