// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_dirmanip
#define inlib_dirmanip

#include "fmanip"
#include "vmanip"
#include "path_words"

#include "sys/dir"

namespace inlib {

inline bool find_dir_with_dirs(std::ostream& a_out,
                               const std::vector<std::string>& a_dirs,
                               const std::string& a_dir,
                               std::string& a_path,
                               bool a_verbose = false ) {
  std::vector<std::string>::const_iterator it;
  for(it=a_dirs.begin();it!=a_dirs.end();++it) {
    if((*it).empty()) {
      // with a "" in dirs, this case could solve :
      // - a_dir in the current directory.
      // - a_dir with an absolute path name.
      a_path = a_dir; //may be an absolute file name.
    } else {
      a_path = *it;
      a_path += sep();
      a_path += a_dir;
    }

    if(a_verbose) {
      a_out << "find_dir_with_dirs :"
            << " look for " << sout(a_path) << " ..."
            << std::endl;
    }

    bool is;
    if(dir::is_a(a_path,is)&&is) {
      if(a_verbose) {
        a_out << "find_dir_with_dirs :"
              << " found " << sout(a_path) << "."
              << std::endl;
      }
      return true;
    }
  }
  a_path.clear();

  if(a_verbose) {
    a_out << "find_dir_with_dirs :"
          << " " << sout(a_dir) << " not found."
          << std::endl;
  }

  return false;   
}

inline bool get_files(std::ostream& a_out,
                      const std::vector<std::string>& a_dirs,
                      const std::vector<std::string>& a_exts,
                      std::vector<std::string>& a_paths) {

  a_paths.clear();

  bool status = true;

  std::vector<std::string>::const_iterator pit;
  for(pit=a_dirs.begin();pit!=a_dirs.end();++pit) {
    const std::string& dir = *pit;
    bool is_dir;
    if(!dir::is_a(dir,is_dir)) continue;
    if(!is_dir) continue;
        
    std::vector<std::string> ls;
    if(!dir::entries(dir,ls,false)){
      a_out << "inlib::get_files :"
            << " can't get entries"
            << " of directory " << sout(dir) << "."
            << std::endl;
      status = false;
      continue; //continue anyway.
  //} else {
      //a_out << "inlib::get_files :"
      //a_out << "number of files : " << ls.size() << std::endl;
      //std::vector<std::string>::const_iterator it;
      //for(it=ls.begin();it!=ls.end();++it) {
      //  a_out << *it << std::endl;
      //}
    }
    
    std::vector<std::string> files;
   {std::vector<std::string>::const_iterator it;
    for(it=ls.begin();it!=ls.end();++it) {
      if((*it)==".") continue;
      if((*it)=="..") continue;

      std::vector<std::string>::const_iterator eit;
      for(eit=a_exts.begin();eit!=a_exts.end();++eit) {
        const std::string& ext = *eit;
        if((ext=="*")||((*it).rfind(ext)!=std::string::npos)) {
          files.push_back(*it);
        }
      }
    }}
      
    std::vector<std::string>::const_iterator it;
    for(it=files.begin();it!=files.end();++it) {
      std::string path = dir+sep()+(*it);
      a_paths.push_back(path);
    }
  }

  unique(a_paths);
  
  return status;
}

inline bool mkdirs(std::ostream& a_out,
                   const std::string& a_path,
                   bool a_cd = false) {
  //By default it does not "cd" to the leaf directory.
  //In the below, we should treat "absolute" and the case of win_path.
  bool absolute;
  bool win_path;
  std::string drive;
  std::vector<std::string> dirs;
  path_words(a_path,dirs,absolute,win_path,drive);
  if(drive.size()) {
    a_out << "inlib::mkdirs :"
          << " path with a Windows drive not treated yet."
          << std::endl;
    return false;
  }
  std::string spwd;
  if(!a_cd) {
    if(!dir::pwd(spwd)) {
      a_out << "inlib::mkdirs :"
            << " can't get current directory."
            << std::endl;
      return false;
    }
  }  
  if(absolute) {
#ifdef _WIN32
    a_out << "inlib::mkdirs :"
          << " absolute path not treated yet."
          << std::endl;
    return false;
#else
    if(!dir::cd("/")) {
      a_out << "inlib::mkdirs :"
            << " can't cd to /"
            << std::endl;
      return false;
    }
#endif
  }
  bool status = true;
  std::vector<std::string>::const_iterator it;
  for(it=dirs.begin();it!=dirs.end();++it) {
    if(!dir::mkcd(*it)) {
      a_out << "inlib::mkdirs :"
            << " can't mkcd " << sout(*it)
            << std::endl;
      status = false;
      break;
    }
  }
  if(!a_cd) {
    //return to spwd :
    if(!dir::cd(spwd)) {
      a_out << "inlib::mkdirs :"
            << " can't cd to " << spwd << "."
            << std::endl;
      return false;
    }
  }
  return status;
}

inline bool mkdirs_from(std::ostream& a_out,
                        const std::string& a_from,
                        const std::string& a_path){ //relative path
  bool absolute;
  bool win_path;
  std::string drive;
  std::vector<std::string> dirs;
  path_words(a_path,dirs,absolute,win_path,drive);
  if(drive.size()) {
    a_out << "inlib::mkdirs_from :"
          << " path with a Windows drive not treated yet."
          << std::endl;
    return false;
  }
  if(absolute) {
    a_out << "inlib::mkdirs_from :"
          << " path " << sout(a_path) << " must be relative."
          << std::endl;
    return false;
  }

  std::string pwd;
  if(!dir::pwd(pwd)) {
    a_out << "inlib::mkdirs_from :"
          << " can't get current directory."
          << std::endl;
    return false;
  }  

  if(!dir::cd(a_from)){
    a_out << "inlib::mkdirs_from :"
          << " can't cd to " << sout(a_from)
          << std::endl;
    return false;
  }

  bool status = true;
  std::vector<std::string>::const_iterator it;
  for(it=dirs.begin();it!=dirs.end();++it) {
    if(!dir::mkcd(*it)) {
      a_out << "inlib::mkdirs_from :"
            << " can't mkcd " << sout(*it)
            << std::endl;
      status = false;
      break;
    }
  }

  if(!dir::cd(pwd)) {
    a_out << "inlib::mkdirs_from :"
          << " can't cd back to " << sout(pwd) << "."
          << std::endl;
    return false;
  }

  return status;
}

inline bool check_dir(std::ostream& a_out,const std::string& a_path) {
  //NOTE : if a_path.empty() it returns true.
  if(dir::in_fs(a_path)) return true;
  if(!mkdirs(a_out,a_path)) {
    a_out << "inlib::check_dir :"
          << " can't create directory " << sout(a_path) << "."
          << std::endl;
    return false;
  }
  return true;
}

inline bool check_env_dir(const std::string& a_env) {
  std::string s;
  if(!getenv(a_env,s)) return false;
  bool is_dir;
  dir::is_a(s,is_dir);
  return is_dir;
}

inline bool create_out_dir(std::ostream& a_out,const std::string& a_name,unsigned int a_scale,
                           std::string& a_out_dir,std::string& a_data_dir,bool a_verbose = false) {
  std::string home_dir;
  dir::home(home_dir);
  if(a_verbose) a_out << "home_dir is " << home_dir << std::endl;

  a_data_dir = home_dir+sep()+"Documents"+sep()+"TouchSky";
  if(a_verbose) a_out << "data_dir is " << a_data_dir << std::endl;

 {bool is;
  if(!dir::is_a(a_data_dir,is)) {
    a_out << "directory " << a_data_dir << " does not exists." << std::endl;
    a_out_dir.clear();
    a_data_dir.clear();
    return false;
  }}

  std::string out_dir_from_data = a_name+sep();
  numas(a_scale,out_dir_from_data);

  a_out_dir = a_data_dir+sep()+out_dir_from_data;
  if(a_verbose) a_out << "out_dir is " << a_out_dir << std::endl;

 {bool is;
  if(!dir::is_a(a_out_dir,is)||!is) mkdirs_from(a_out,a_data_dir,out_dir_from_data);
  if(!dir::is_a(a_out_dir,is)||!is) {
    a_out << "directory " << a_out_dir << " does not exists." << std::endl;
    a_out_dir.clear();
    a_data_dir.clear();
    return false;
  }}

  return true;
}

}

//inlib_build_use kernel

#endif
