// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_help
#define inlib_cbk_help

#include "../sg/list"
#include "../srep"
#include "../vpair"

#include "../sg/gui_viewer"

namespace inlib {
namespace cbk {

class help : public sg::acbk {
  static unsigned int action_main()   {return 0;}
  static unsigned int action_vis()    {return 1;}
public:
  typedef const char** (*help_func)(unsigned int&);
  typedef std::pair<std::string,help_func> help_item;
  typedef std::vector<help_item> help_t;
public:
  virtual sg::return_action action() {
    if(m_action==action_main()) {
      sg::list* list = new sg::list(m_gv.ttf());
      m_gv.set_style(*list);
      help_t::const_iterator it;
      for(it=m_help.begin();it!=m_help.end();++it) {
        const std::string& label = (*it).first;
        help* _cbk = new help(m_gv,m_help,action_vis());
        _cbk->m_what = label;
        list->add(label,_cbk);
      }
      m_gv.push_list(list);
      return sg::return_to_render;

    } else if(m_action==action_vis()) {

      unsigned int linen = 0;
      const char** lines = 0;

      help_func hfunc;
      if(!find(m_help,m_what,hfunc)) {
        m_gv.map_warn_not_found();
      } else {
        lines = hfunc(linen);
      }

      std::vector<std::string> txt;
     {for(unsigned int index=0;index<linen;index++) {
        std::string s = lines[index];
        replace(s,"@@double_quote@@","\"");
        replace(s,"@@back_slash@@","\\");
        //replace(s,"@@version@@",version);
        txt.push_back(s);
      }}

      m_gv.gui_scroll_text(txt);

      return sg::return_to_render;
    }
    return sg::return_none;
  }
  virtual bcbk* copy() const {return new help(*this);}
public:
  help(sg::gui_viewer& a_gv,
       const help_t& a_help,
       unsigned int a_action = action_main())
  :sg::acbk(a_action)
  ,m_gv(a_gv)
  ,m_help(a_help)
  {}
  virtual ~help(){}
public:
  help(const help& a_from)
  :sg::acbk(a_from)
  ,m_gv(a_from.m_gv)
  ,m_help(a_from.m_help)
  ,m_what(a_from.m_what)
  {}
  help& operator=(const help& a_from){
    acbk::operator=(a_from);
    m_what = a_from.m_what;
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
  const help_t& m_help;
  std::string m_what;
};

}}

//inlib_build_use kernel

#endif
