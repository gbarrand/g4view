// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_image_manip
#define inlib_cbk_image_manip

#include "../sg/alert"
#include "../sg/ecbk"
#include "../sg/base_tex"
#include "../sg/pos_data"
#include "../lina/line"

namespace inlib {
namespace cbk {

inline sg::return_action action_image_manip(sg::alert& a_alert,
                                            const sg::ecbk& a_cbk,sg::base_tex& a_widget,const sg::pos_data&) {
  sg::base_tex::intersect_type type;
  int ex,ey;
 {if(sg::mouse_down_event* devt = sg::event_cast<sg::event,sg::mouse_down_event>(*(a_cbk.m_event))){
    ex = devt->x();
    ey = devt->y();
    type = sg::base_tex::intersect_down;
  } else if(sg::mouse_move_event* mevt = sg::event_cast<sg::event,sg::mouse_move_event>(*(a_cbk.m_event))){
    ex = mevt->x();
    ey = mevt->y();
    type = sg::base_tex::intersect_move;
  } else if(sg::mouse_up_event* uevt = sg::event_cast<sg::event,sg::mouse_up_event>(*(a_cbk.m_event))){
    ex = uevt->x();
    ey = uevt->y();
    type = sg::base_tex::intersect_up;
  } else {
    return sg::return_none;
  }}

  //a_cbk.m_event_action->set_node(this);

  const sg::state& state = a_cbk.m_event_action->state();

  typedef vec3f vec3f;

  line<vec3f> line;

  if(state.m_camera_ortho) {
    float x,y,z,w;
    state.screen2ndc(ex,ey,x,y,z,w);
    if(w==0.0F) {
      a_alert.out_stream() << "inlib::cbk::image_manip::action : null w." << std::endl;
      return sg::return_none;
    }
    mat4f mtx = state.m_proj;
    mtx.mul_mtx(state.m_model);
    mat4f inv;
    if(!mtx.invert(inv)) {
      a_alert.out_stream() << "inlib::cbk::image_manip::action :"
                           << " can't convert screen to world coordinates."
                           << std::endl;
      return sg::return_none;
    }

    float x2 = x;
    float y2 = y;
    float z2 = z+1;

    inv.mul_4f(x,y,z,w);
    x /= w;
    y /= w;
    z /= w;

    inv.mul_4f(x2,y2,z2,w);
    x2 /= w;
    y2 /= w;
    z2 /= w;

    line.set_value(x,y,z,x2,y2,z2);
  } else {
    float x,y,z;
    state.screen2wc(ex,ey,x,y,z);
    // NOTE : how to get cam pos in image wc from final proj ?
    // NOTE : the below is ok as long as camera is not under a matrix node.
    mat4f inv;
    if(!state.m_model.invert(inv)) return sg::return_none;
    vec3f pos = state.m_camera_position;
    inv.mul_3f(pos[0],pos[1],pos[2]); //in image wc.
    line.set_value(pos[0],pos[1],pos[2],x,y,z);
  }

  std::string sv;
  if(!a_widget.intersect_value(a_alert.out_stream(),type,line,sv)) {
    a_alert.show_console("not in image");
  } else {
    if(sv.size()) a_alert.show_console(sv);
    if(type==sg::base_tex::intersect_move) a_cbk.m_event_action->set_done(true);
  }

  return sg::return_none;
}

}}

#include "../sg/event_dispatcher"
#include "../sg/tex_rect"
#include "../sg/tex_quadrilateral"
#include "../sg/alert"
#include "../sg/group"
#include "../sg/search"
#include "../sg/fundata_cbk"
#include "../num2s"

namespace inlib {
namespace cbk {

inline bool tex_set_manip(sg::alert& a_gv,sg::node& a_sg,sg::node& a_node,bool a_verbose) {
  sg::base_tex* img = safe_cast<sg::node,sg::base_tex>(a_node);
  if(!img) {
    a_gv.out_stream() << "inlib::cbk::image_manip::set_manip :"
                      << " node of class " << a_node.s_cls() << " is not a base_tex."
                      << std::endl;
    return false;
  }

  typedef sg::search_action::path_t path_t;

  sg::search_action sa(a_gv.out_stream());
  const path_t& path = sg::find_path(sa,a_sg,a_node,a_verbose);

  sg::group* grp;
  sg::event_dispatcher* dpt;
  int gidx; //index in path of the group.
  if(!sg::rfind<sg::event_dispatcher,sg::group>(path,a_node,grp,dpt,gidx)) {
    a_gv.warn("no event_dispatcher found");
    return false;
  }

  if(a_verbose) {
    a_gv.out_stream() << "inlib::cbk::image_manip::set_manip :"
                      << " action_set_manip : found event_dispatcher."
                      << std::endl;
  }

  bool show_border = false;
  if(dpt->cbks().is_empty()) {
    //dpt->add_callback(new image_manip(a_gv,*img));
    sg::pos_data data(false,0,0);
    dpt->add_callback(new sg::fundata_cbk<sg::alert,sg::base_tex,sg::pos_data,sg::ecbk>(a_gv,*img,action_image_manip,data));
    show_border = true;
  } else {
    dpt->clear_cbks();
    show_border = false;
  }

 {sg::tex_rect* _tex = safe_cast<sg::node,sg::tex_rect>(a_node);
  if(_tex) _tex->show_border = show_border;}
 {sg::tex_quadrilateral* _tex = safe_cast<sg::node,sg::tex_quadrilateral>(a_node);
  if(_tex) _tex->show_border = show_border;}

  return true;
}

}}

#endif
