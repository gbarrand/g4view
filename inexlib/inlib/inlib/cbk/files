// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_files
#define inlib_cbk_files

#include "../sg/gui_viewer"

#include "popup_data"

namespace inlib {
namespace cbk {

inline sg::return_action action_open_file(sg::gui_viewer& a_gv,sg::entries& a_widget,const sg::pos_data& a_data) {
  args _args;
 {std::string sv;
  b2s(a_data.m_popup,sv);
  _args.add(sg::s_popup(),sv);
  num2s(a_data.m_ex,sv);
  _args.add(sg::s_ex(),sv);
  num2s(a_data.m_ey,sv);
  _args.add(sg::s_ey(),sv);}

  const std::string& placement = a_widget.values[0];
  bool clear;
  INLIB_GUI_VIEWER_GET_WIDGET_BOOL(action_open_file,1,clear)

  const std::string& file = a_widget.etc()[0];
  const std::string& format = a_widget.etc()[1];

  _args.add(sg::s_send_placement(),placement);
  if(clear) _args.add(sg::s_send_clear());

  bool done;
  a_gv.opener().open(file,format,_args,done);

  a_gv.hide_main_menu();
  return sg::return_to_render;
}

inline sg::return_action action_choose_file_and_options(sg::gui_viewer& a_gv,sg::file_chooser& a_fch,const sg::pos_data& a_data) {
  if(file::need_placement(a_fch.format.value())) {
    sg::entries* entries = new sg::entries(a_gv.ttf());
    a_gv.set_style(*entries);

    std::vector<std::string> opts;
    opts.push_back(sg::s_placement_static());
    opts.push_back(sg::s_placement_dynamic());
    opts.push_back(sg::s_placement_screen());
    entries->add_opts("placement",opts[0],opts);
    entries->add_bool("clear scene",false);

    entries->etc().push_back(a_fch.value.value());
    entries->etc().push_back(a_fch.format.value());

    sg::add_callback(a_gv,*entries,action_open_file,a_data);
    a_gv.push_list(entries);

  } else {
    args _args;
   {std::string sv;
    b2s(a_data.m_popup,sv);
    _args.add(sg::s_popup(),sv);
    num2s(a_data.m_ex,sv);
    _args.add(sg::s_ex(),sv);
    num2s(a_data.m_ey,sv);
    _args.add(sg::s_ey(),sv);}

    const std::string& file = a_fch.value.value();
    const std::string& format = a_fch.format.value();

  //a_gv.insh().reset_to_stop();  //because of sg/insh_opener.

    bool done;
    a_gv.opener().open(file,format,_args,done);

  }

  return sg::return_to_render;
}

inline sg::return_action action_menu_files(sg::gui_viewer& a_gv,const sg::pos_data& a_data) {
  sg::file_chooser* fch = new sg::file_chooser(a_gv.ttf());
  a_gv.set_style(*fch);

  fch->exts.add(a_gv.opener().exts());

  fch->dirs.add(a_gv.res_dir());
  fch->dirs.add(a_gv.doc_dir());

  sg::add_callback(a_gv,*fch,action_choose_file_and_options,a_data);

  fch->initialize(a_gv.out());

  a_gv.show_widget(a_data,fch);

  return sg::return_to_render;
}

inline sg::return_action action_files(sg::gui_viewer& a_gv,const sg::pos_data& a_data) {return action_menu_files(a_gv,a_data);} //deprecated.

}}

//inlib_build_use kernel

#endif
