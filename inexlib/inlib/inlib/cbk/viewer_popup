// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_viewer_popup
#define inlib_cbk_viewer_popup

#include "popup"
#include "popup_data"
#include "move_manip"

#include "../sg/infos"
#include "../sg/rotate_anim"
#include "../sg/background"
#include "../sg/gui_viewer"
#include "../sg/sf_lut"
#include "../picmap"

#include "../sg/sep4axes"
#include "../sg/axes"

namespace inlib {
namespace cbk {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline sg::return_action viewer_popup_action_cancel(sg::gui_viewer& a_gv) {
  a_gv.hide_popup();
  return sg::return_to_render;
}

class pointer_data {
public:
  pointer_data(void* a_data = 0):m_data(a_data){}
  virtual ~pointer_data(){}
public:
  pointer_data(const pointer_data& a_from):m_data(a_from.m_data){}
  pointer_data& operator=(const pointer_data& a_from){m_data = a_from.m_data;return *this;}
public:
  void* m_data;
};

inline sg::return_action viewer_popup_action_move(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;
  float hcam;
  a_gv.camera_height_at_focal(hcam);
  move_manip::toggle_manip(a_gv,a_gv.out(),a_gv.scene(),*_node,hcam,a_gv.verbose());
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_reset(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;
  move_manip::reset_maniped(a_gv,a_gv.out(),a_gv.scene(),*_node,a_gv.verbose());
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_up(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;
  float hcam;
  a_gv.camera_height_at_focal(hcam);
  move_manip::manip_up(a_gv,a_gv.out(),a_gv.scene(),*_node,hcam,a_gv.verbose());
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_top(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;
  float hcam;
  a_gv.camera_height_at_focal(hcam);
  move_manip::manip_top(a_gv,a_gv.out(),a_gv.scene(),*_node,hcam,a_gv.verbose());
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_delete(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;
  move_manip::delete_maniped(a_gv,a_gv.out(),a_gv.scene(),_node,a_gv.verbose());
  return sg::return_to_render;
}

inline unsigned int viewer_popup_anim_stop()     {return 0;}
inline unsigned int viewer_popup_anim_rot_x()    {return 1;}
inline unsigned int viewer_popup_anim_rot_y()    {return 2;}
inline unsigned int viewer_popup_anim_rot_z()    {return 3;}
inline unsigned int viewer_popup_anim_identity() {return 4;}
inline unsigned int viewer_popup_anim_start()    {return 5;}

inline sg::return_action viewer_popup_action_do_anim(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  typedef sg::node node_t;
  typedef sg::base_anim banim_t;

  if(a_data.m_what==viewer_popup_anim_start()){
    if(banim_t* anim = safe_cast<node_t,banim_t>(a_data.m_node)) {
      anim->start();
      a_gv.enable_anim();
      return sg::return_to_render;
    }
  }

  if(a_data.m_what==viewer_popup_anim_stop()){
    if(banim_t* anim = safe_cast<node_t,banim_t>(a_data.m_node)) {
      anim->stop();
      //return sg::return_to_render;
    }
  }

  sg::matrix* _m;

  sg::group* grp;
 {sg::search_action sa(a_gv.out());
  const sg::path_t& _path = find_path(sa,a_gv.scene(),a_data.m_node,a_gv.verbose());
  int gidx;
  if(!sg::rfind<sg::matrix,sg::group>(_path,a_data.m_node,grp,_m,gidx)) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"matrix node not found");
    return sg::return_to_render;
  }}

  if(a_data.m_what==viewer_popup_anim_stop()){

    if(sg::rotate_anim* am = safe_cast<sg::matrix,sg::rotate_anim>(*_m)) {

      //NOTE : in principle we should not pass here whilst
      //       in the viewer anim_work.
      sg::matrix* m = new sg::matrix;
      m->mtx = am->mtx;
      //NOTE : the delete of am will stop the animation.
      if(!grp->replace(am,m,true)) {
        delete m;
        a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"replace in group failed");
        return sg::return_to_render;
      }
    }

  } else if(a_data.m_what==viewer_popup_anim_identity()){

    _m->set_identity();

  } else {

    atime _now(0,0);
    if(!a_gv.get_time_now(_now)) {
      a_gv.out() << "inlib::cbk::popup::action :"
                 << " viewer.get_time_now() failed."
                 << std::endl;
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"can't get time");
      return sg::return_to_render;
    }

    sg::rotate_anim* am = 0;

    float omega = ftwo_pi()/10.0f; // one turn on 10 secs.

    if(a_data.m_what==viewer_popup_anim_rot_x()) {
      am = new sg::rotate_anim(_now);
      am->axis.set_value(1,0,0);
      am->omega = omega;
    } else if(a_data.m_what==viewer_popup_anim_rot_y()) {
      am = new sg::rotate_anim(_now);
      am->axis.set_value(0,1,0);
      am->omega = omega;
    } else { //viewer_popup_anim_rot_z()
      am = new sg::rotate_anim(_now);
      am->axis.set_value(0,0,1);
      am->omega = omega;
    }

    am->mtx = _m->mtx;
    if(!grp->replace(_m,am,true)) {
      delete am;
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"replace in group failed");
      return sg::return_to_render;
    }
    a_gv.enable_anim();
  }

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_cam_curve(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  typedef sg::node node_t;
  typedef sg::base_camera bc_t;
//typedef sg::base_anim banim_t;

  curve* acurve = safe_cast<node_t,curve>(a_data.m_node);
  if(!acurve) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"node not a curve");
    return sg::return_to_render;
  }

  sg::get_matrix_action ma(a_gv.out(),0,0);
  ma.set_node(&a_data.m_node);
  a_gv.scene().get_matrix(ma);
  if(!ma.done()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"can't get model matrix");
    return sg::return_to_render;
  }

  a_gv.start_cam_move(sg::move_curve,a_gv.m_params.m_cycle_secs);

  bc_t* cam = a_gv.scene_camera();
  if(!cam) return sg::return_to_render;
  sg::base_cam_anim* bcanim = safe_cast<node_t,sg::base_cam_anim>(*cam);
  if(!bcanim) return sg::return_to_render;

  curve* _curve;
  acurve->copy(_curve);
  _curve->set_model_matrix(ma.found_model());

  //a_gv.out() << "debug : ma.found_model() :" << std::endl;
  //a_gv.out() << ma.found_model();

  bcanim->set_curve(_curve); //give ownership.

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_add_axes(sg::gui_viewer& a_gv,const pointer_data& a_data) {
  a_gv.hide_popup();
  sg::node* _node = (sg::node*)a_data.m_data;

  // look if node has some shapes :
  float dx,dy,dz;
  vec3f center;
 {sg::bbox_action _action(a_gv.out());
  _node->bbox(_action);
  if(!_action.end()) return sg::return_none;
  const box3f& box = _action.box();
  if(box.is_empty()) return sg::return_none;
  if(!box.get_cube_size(dx,dy,dz)) return sg::return_none;
  box.center(center);}

  //move_manip::toggle_manip(a_gv,a_gv.out(),a_gv.scene(),*_node,a_gv.verbose());

  typedef sg::search_action::path_t path_t;

  sg::search_action sa(a_gv.out());
  const path_t& path = sg::find_path(sa,a_gv.scene(),*_node,a_gv.verbose());

  if(path.empty()) return sg::return_none;

  // look for a valid container :
  sg::group* _container = 0;
 {sg::group* grp;
  sg::sep4axes* sep;
  int gidx; //index in path of the found grp.
  if(sg::rfind<sg::sep4axes,sg::group>(path,*_node,grp,sep,gidx)) {
    if(sep->m_to_delete) {
      if(!grp->remove(sep)) {
        a_gv.warn("remove in group failed");
      } else {
        delete sep;
      }
      return sg::return_to_render;
    }
    // this sep4axes is one explicitly put in the scene :
    if(sep->size()) { //reset :
      sep->clear();
      return sg::return_to_render;
    }
    _container = sep;
  } else {
    grp = sg::container<sg::group>(path);
    if(!grp) {
      a_gv.warn("no container found");
      return sg::return_to_render;
    }
    sep = new sg::sep4axes;
    sep->m_to_delete = true;
    grp->add_front(sep);
    _container = sep;
  }}

  sg::matrix4manip* _mtx = new sg::matrix4manip;
  _mtx->shape_mask = sg::cube_manip::shape_trans_rot();
  _container->add(_mtx);

  sg::axes* _axes = new sg::axes(a_gv.ttf());
  _axes->shape = sg::axes::xy;
  _axes->xy_depth = 0.2f;
//_axes->shape = sg::axes::xyz;
  _axes->x_axis_modeling = sg::tick_modeling_hplot();
  _axes->x_axis_divisions = 10+10*100+10*10000; //101010
  _axes->y_axis_modeling = sg::tick_modeling_hplot();
  _axes->y_axis_divisions = 10+10*100+10*10000; //101010
  _axes->z_axis_modeling = sg::tick_modeling_hplot();
  _axes->z_axis_divisions = 10+10*100+10*10000; //101010
  //_axes->labels_style().hjust = sg::center;

  _mtx->set_translate(center);
  _mtx->mul_scale(dx,dy,dz);

  _axes->x_axis_automated = false;
  _axes->x_axis_min = 0;
  _axes->x_axis_max = dx;
  _axes->y_axis_automated = false;
  _axes->y_axis_min = 0;
  _axes->y_axis_max = dy;
  _axes->z_axis_automated = false;
  _axes->z_axis_min = 0;
  _axes->z_axis_max = dz;

  _container->add(_axes);

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_bool_true(sg::gui_viewer& a_gv,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::sf<bool>* _sfb = safe_cast<sg::field, sg::sf<bool> >(fd)) _sfb->value(true);
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_bool_false(sg::gui_viewer& a_gv,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::sf<bool>* _sfb = safe_cast<sg::field, sg::sf<bool> >(fd)) _sfb->value(false);
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_numeric(sg::gui_viewer& a_gv,sg::numeric& a_node,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }

  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);

  if(sg::sf<float>* _sff = safe_cast<sg::field, sg::sf<float> >(fd)){
    float v;
    if(!to<float>(a_node.value.value(),v)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not a number");
      return sg::return_to_render;
    }
    _sff->value(v);

  } else if(sg::sf<double>* _sfd = safe_cast<sg::field, sg::sf<double> >(fd)){
    double v;
    if(!to<double>(a_node.value.value(),v)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not a number");
      return sg::return_to_render;
    }
    _sfd->value(v);

  } else if(sg::sf<unsigned int>* _sfui = safe_cast<sg::field, sg::sf<unsigned int> >(fd)) {
    unsigned int v;
    if(!to<unsigned int>(a_node.value.value(),v)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not a number");
      return sg::return_to_render;
    }
    _sfui->value(v);

  } else if(sg::sf<int>* _sfi = safe_cast<sg::field, sg::sf<int> >(fd)) {
    int v;
    if(!to<int>(a_node.value.value(),v)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not a number");
      return sg::return_to_render;
    }
    _sfi->value(v);

  }

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_combo(sg::gui_viewer& a_gv,sg::entries& a_node,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }

  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);

  if(sg::sf_string* _sfs = safe_cast<sg::field,sg::sf_string>(fd)) {
    //if(a_data.m_field_desc.opts().size()) {
      _sfs->value(a_node.values.values()[0]);
    //}
  }

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_keyboard(sg::gui_viewer& a_gv,sg::keyboard& a_node,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }

  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);

  if(sg::sf_string* _sfs = safe_cast<sg::field,sg::sf_string>(fd)) {
    _sfs->value(a_node.value.value());

  } else if(sg::mf_string* _mfs = safe_cast<sg::field,sg::mf_string>(fd)) {
    _mfs->clear();
    _mfs->add(a_node.value.value());
  }

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_color(sg::gui_viewer& a_gv,sg::colors& a_node,const popup_data& a_data) {
  //a_gv.hide_popup();
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::sf_vec<colorf,float>* _sfcolor = safe_cast<sg::field, sg::sf_vec<colorf,float> >(fd)) {
    float r,g,b,a;
    a_node.get_color(r,g,b,a);
    _sfcolor->value(colorf(r,g,b,a));
  }
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_lut(sg::gui_viewer& a_gv,sg::entries& a_node,const popup_data& a_data) {
  //a_gv.hide_popup();
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::sf_lut<float>* _sflut = safe_cast<sg::field, sg::sf_lut<float> >(fd)) {
    const std::vector<std::string>& vals = a_node.values.values();
    float mn;
    if(!to<float>(vals[0],mn)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"mn not a number");
      return sg::return_to_render;
    }
    float mx;
    if(!to<float>(vals[1],mx)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"mx not a number");
      return sg::return_to_render;
    }
    unsigned int coln;
    if(!to<unsigned int>(vals[2],coln)) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"#colors not an uint");
      return sg::return_to_render;
    }

    if(mn>=mx) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"min not < mx");
      return sg::return_to_render;
    }
    if(coln<3) {
      a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"#colors not >= 3");
      return sg::return_to_render;
    }

    _sflut->value(lut<float>(mn,mx,coln));
  }
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_cmap(sg::gui_viewer& a_gv,const popup_data& a_data) {
  // exa sg::healpix::colors.
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::mf_vec<colorf,float>* _sfcmap = safe_cast<sg::field, sg::mf_vec<colorf,float> >(fd)) {
    SOPI::cmap _cmap(0);
    SOPI::stocmap(a_data.m_swhat,_cmap);
    _sfcmap->clear();
   {for(unsigned int index=0;index<_cmap.size();index++) {
      const SOPI::color& _col = _cmap.get_color(index);
      _sfcmap->add(colorf(_col.r(),_col.g(),_col.b()));
    }}
  }
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field_enum(sg::gui_viewer& a_gv,const popup_data& a_data) {
  if(!a_data.m_field_desc.editable()) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"not editable");
    return sg::return_to_render;
  }
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);
  if(sg::bsf_enum* _sfenum = safe_cast<sg::field,sg::bsf_enum>(fd)) {
    _sfenum->set_value(a_data.m_what);
  }
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit_field(sg::gui_viewer& a_gv,const popup_data& a_data) {
  sg::field& fd = a_data.m_node.field_from_desc(a_data.m_field_desc);

  a_gv.hide_popup();

  if(sg::sf<bool>* _sfb = safe_cast<sg::field, sg::sf<bool> >(fd)) {
    std::string svalue;
    b2s(_sfb->value(),svalue);

    sg::list* list = new sg::list(a_gv.ttf());
    a_gv.set_style(*list);

    sg::add_item(a_gv,*list,"current : "+svalue,viewer_popup_action_cancel);
    sg::add_item(a_gv,*list,"true",viewer_popup_action_edit_field_bool_true,a_data);
    sg::add_item(a_gv,*list,"false",viewer_popup_action_edit_field_bool_false,a_data);

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  } else if(/*sg::sf_vec<colorf,float>* _sfcolor =*/ safe_cast<sg::field, sg::sf_vec<colorf,float> >(fd)) {
    std::string svalue;
    if(!fd.s_value(svalue)){svalue="none";}

    sg::colors* colors = new sg::colors(a_gv.ttf());
    a_gv.set_style(*colors);

    colors->value = svalue;
    colors->show_cancel = true;
    popup_data _data(a_data);
    sg::add_callback(a_gv,*colors,viewer_popup_action_edit_field_color,_data);
    sg::add_cancel_callback(a_gv,*colors,viewer_popup_action_cancel,a_data);

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),colors);

  } else if(sg::sf_lut<float>* _sflut = safe_cast<sg::field, sg::sf_lut<float> >(fd)) {

    sg::entries* node = new sg::entries(a_gv.ttf());
    a_gv.set_style(*node);
    node->add_float("min",_sflut->value().mn());
    node->add_float("max",_sflut->value().mx());
    node->add_uint("#colors",(unsigned int)_sflut->value().coln());

    popup_data _data(a_data);
    sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_lut,_data);
  //sg::add_cancel_callback(a_gv,*node,viewer_popup_action_cancel,a_data);

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);

  } else if(/*sg::mf_vec<colorf,float>* _sfcolor =*/ safe_cast<sg::field, sg::mf_vec<colorf,float> >(fd)) {
    sg::list* list = new sg::list(a_gv.ttf());
    a_gv.set_style(*list);

    std::vector<std::string> names;
    SOPI::all_names(names);

    sg::add_item(a_gv,*list,"cancel",viewer_popup_action_cancel);
    inlib_vforcit(std::string,names,it) {
      popup_data data(a_data);
      data.m_swhat = *it;
      sg::add_item(a_gv,*list,*it,viewer_popup_action_edit_field_cmap,data);
    }

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  } else if(sg::sf_string* _sfs = safe_cast<sg::field,sg::sf_string>(fd)) {
    if(a_data.m_field_desc.opts().size()) {
      sg::entries* node = new sg::entries(a_gv.ttf());
      a_gv.set_style(*node);
      node->add_combo_string("value",_sfs->value(),a_data.m_field_desc.opts());
      popup_data _data(a_data);
      sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_combo,_data);
      a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);
    } else {
      sg::keyboard* node = new sg::keyboard(a_gv.ttf());
      a_gv.set_style(*node);
      node->show_cancel = true;
      node->value = _sfs->value();
      popup_data _data(a_data);
      sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_keyboard,_data);
      sg::add_cancel_callback(a_gv,*node,viewer_popup_action_cancel,_data);
      a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);
    }

  } else if(sg::mf_string* _mfs = safe_cast<sg::field,sg::mf_string>(fd)) {
    std::string svalue;
    _mfs->get_value(0,svalue);

    sg::keyboard* node = new sg::keyboard(a_gv.ttf());
    a_gv.set_style(*node);

    node->show_cancel = true;
    node->value = svalue;
    popup_data _data(a_data);
    sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_keyboard,_data);

    sg::add_cancel_callback(a_gv,*node,viewer_popup_action_cancel,_data);

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);

  } else if(safe_cast<sg::field,sg::bsf_enum>(fd)) {
    sg::list* node = new sg::list(a_gv.ttf());
    a_gv.set_style(*node);

    sg::add_item(a_gv,*node,"cancel",viewer_popup_action_cancel);
    inlib_vforcit(sg::field_desc::enum_t,a_data.m_field_desc.enums(),it) {
      popup_data data(a_data);
      data.m_what = (*it).second;
      sg::add_item(a_gv,*node,(*it).first,viewer_popup_action_edit_field_enum,data);
    }

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);

  } else if(safe_cast<sg::field, sg::sf<float> >(fd)        ||
            safe_cast<sg::field, sg::sf<double> >(fd)       ||
            safe_cast<sg::field, sg::sf<unsigned int> >(fd) ||
            safe_cast<sg::field, sg::sf<int> >(fd)          ){
    std::string svalue;
    if(!fd.s_value(svalue)){svalue="none";}

    sg::numeric* node = new sg::numeric(a_gv.ttf());
    a_gv.set_style(*node);

    node->show_cancel = true;
    node->value = svalue;
    popup_data _data(a_data);
    sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_numeric,_data);
    sg::add_cancel_callback(a_gv,*node,viewer_popup_action_cancel,_data);

    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);

#define INLIB_POPUP_EDIT_FIELD(a__type,a__var,a__add_func) \
  } else if(sg::mf<a__type>* a__var = safe_cast<sg::field, sg::mf<a__type> >(fd)) {\
    const std::vector<a__type>& v = a__var->values();\
    sg::entries* node = new sg::entries(a_gv.ttf());\
    a_gv.set_style(*node);\
   {unsigned int count = 0;\
    std::string _s;\
    inlib_vforcit(a__type,v,it) {\
      if(!num2s(count,_s)) {}\
      node->a__add_func(_s,*it);\
      count++;\
      if(count>=100) break;\
    }}\
    popup_data _data(a_data);\
  /*sg::add_callback(a_gv,*node,viewer_popup_action_edit_field_mf_double,_data);*/\
    sg::add_callback(a_gv,*node,viewer_popup_action_cancel,a_data);\
    a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),node);

  INLIB_POPUP_EDIT_FIELD(float,_mff,add_float)
  INLIB_POPUP_EDIT_FIELD(double,_mfd,add_double)
  INLIB_POPUP_EDIT_FIELD(int,_mfi,add_int)
  INLIB_POPUP_EDIT_FIELD(uint32,_mfui,add_uint)
  INLIB_POPUP_EDIT_FIELD(int64,_mfi64,add_int64)
  INLIB_POPUP_EDIT_FIELD(uint64,_mfui64,add_uint64)
  }

#undef INLIB_POPUP_EDIT_FIELD

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_center(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  int ex = a_data.m_ex;
  int ey = a_data.m_ey;

  //m_state is the state at the moment of the pick of the object.

  float x,y,z;
  if(!a_data.m_state.screen2pwc(ex,ey,x,y,z)) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " screen2pwc failed."
               << std::endl;
    return sg::return_to_render;
  }
  //now (x,y,z) is in the camera viewing plane in wc.

  sg::base_camera* cam = a_gv.scene_camera();
  if(!cam) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " no camera found."
               << std::endl;
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"no camera found");
    return sg::return_to_render;
  }

  // set focal :
 {//mat4f mtx = a_data.m_state.m_proj;
  //mtx.mul_mtx(a_data.m_state.m_model);
  mat4f mtx;
  a_data.m_state.camera_proj_only(mtx);
  //mtx not taking into acccount cam orientation,pos.
  mat4f inv;
  if(!mtx.invert(inv)) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " can't convert screen to world coordinates."
               << std::endl;
    return sg::return_to_render;
  }
  float xpick = 0;
  float ypick = 0;
  float zpick = a_data.m_z;
  float wpick = a_data.m_w;
  xpick *= wpick;
  ypick *= wpick;
  zpick *= wpick;
  inv.mul_4f(xpick,ypick,zpick,wpick);
  cam->focal = -zpick;}

  if(a_data.m_state.m_camera_ortho) {
    cam->pane_to(x,y,z); //it panes in the viewing plane only.

  } else {
    // NOTE : how to get cam pos in object wc from final proj ?

    // NOTE : the below is ok as long as camera is not under a matrix node.
    vec3f pos = a_data.m_state.m_camera_position;

    line<vec3f> line;
    line.set_value(pos.x(),pos.y(),pos.z(),x,y,z);

    if(a_gv.plane_viewer()){ //pane in viewing plane.
      vec3f dir;
      a_data.m_state.m_camera_orientation.mul_vec(vec3f(0,0,-1),dir);
      vec3f up;
      a_data.m_state.m_camera_orientation.mul_vec(vec3f(0,1,0),up);
      vec3f side;dir.cross(up,side);

      vec3f p1 = pos + dir*cam->focal;
      vec3f p2 = p1 + up;
      vec3f p3 = p1 + side;
      plane<vec3f> pl(p1,p2,p3);
      vec3f p;
      if(!pl.intersect(line,p)) {
        a_gv.out() << "inlib::cbk::popup::action :"
                   << " plane/line intersection failed."
                   << std::endl;
        return sg::return_to_render;
      }

      cam->pane_to(p.x(),p.y(),p.z());

    } else {
      cam->rotate_to_dir(line.direction());
    }
  }

  return sg::return_to_render;
}

/*
inline sg::return_action viewer_popup_action_cube_at_pos(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  int ex = a_data.m_ex;
  int ey = a_data.m_ey;

  //m_state is the state at the moment of the pick of the object.

  float x,y,z;
  if(!a_data.m_state.screen2pwc(ex,ey,x,y,z)) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " screen2pwc failed."
               << std::endl;
    return sg::return_to_render;
  }
  //now (x,y,z) is in the camera viewing plane in wc.

  sg::base_camera* cam = a_gv.scene_camera();
  if(!cam) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " no camera found."
               << std::endl;
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"no camera found");
    return sg::return_to_render;
  }

  // set focal :
 {//mat4f mtx = a_data.m_state.m_proj;
  //mtx.mul_mtx(a_data.m_state.m_model);
  mat4f mtx;
  a_data.m_state.camera_proj_only(mtx);
  //mtx not taking into acccount cam orientation,pos.
  mat4f inv;
  if(!mtx.invert(inv)) {
    a_gv.out() << "inlib::cbk::popup::action :"
               << " can't convert screen to world coordinates."
               << std::endl;
    return sg::return_to_render;
  }
  float xpick = 0;
  float ypick = 0;
  float zpick = a_data.m_z;
  float wpick = a_data.m_w;
  xpick *= wpick;
  ypick *= wpick;
  zpick *= wpick;
  inv.mul_4f(xpick,ypick,zpick,wpick);
  cam->focal = -zpick;}

  if(a_data.m_state.m_camera_ortho) {
    cam->pane_to(x,y,z); //it panes in the viewing plane only.

  } else {
    // NOTE : how to get cam pos in object wc from final proj ?

    // NOTE : the below is ok as long as camera is not under a matrix node.
    vec3f pos = a_data.m_state.m_camera_position;

    line<vec3f> line;
    line.set_value(pos.x(),pos.y(),pos.z(),x,y,z);

    if(a_gv.plane_viewer()){ //pane in viewing plane.
      vec3f dir;
      a_data.m_state.m_camera_orientation.mul_vec(vec3f(0,0,-1),dir);
      vec3f up;
      a_data.m_state.m_camera_orientation.mul_vec(vec3f(0,1,0),up);
      vec3f side = dir.cross(up);

      vec3f p1 = pos + dir*cam->focal;
      vec3f p2 = p1 + up;
      vec3f p3 = p1 + side;
      plane<vec3f> pl(p1,p2,p3);
      vec3f p;
      if(!pl.intersect(line,p)) {
        a_gv.out() << "inlib::cbk::popup::action :"
                   << " plane/line intersection failed."
                   << std::endl;
        return sg::return_to_render;
      }

      cam->pane_to(p.x(),p.y(),p.z());

    } else {
      cam->rotate_to_dir(line.direction());
    }
  }

  return sg::return_to_render;
}
*/

inline sg::return_action viewer_popup_action_anim(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  popup_data data(a_data);
  data.m_what = viewer_popup_anim_stop();
  sg::add_item(a_gv,*list,"stop",viewer_popup_action_do_anim,data);

  data.m_what = viewer_popup_anim_rot_x();
  sg::add_item(a_gv,*list,"rot x",viewer_popup_action_do_anim,data);

  data.m_what = viewer_popup_anim_rot_y();
  sg::add_item(a_gv,*list,"rot y",viewer_popup_action_do_anim,data);

  data.m_what = viewer_popup_anim_rot_z();
  sg::add_item(a_gv,*list,"rot z",viewer_popup_action_do_anim,data);

  data.m_what = viewer_popup_anim_identity();
  sg::add_item(a_gv,*list,"identity",viewer_popup_action_do_anim,data);

  data.m_what = viewer_popup_anim_start();
  sg::add_item(a_gv,*list,"start(for diapo)",viewer_popup_action_do_anim,data);

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_edit(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  sg::add_item(a_gv,*list,a_data.m_node.s_cls(),viewer_popup_action_cancel);

  inlib_vforcit(sg::field_desc,a_data.m_node.node_desc_fields(),it) {
    popup_data _data(a_data);
    _data.m_field_desc = *it;
    sg::add_item(a_gv,*list,(*it).name(),viewer_popup_action_edit_field,_data);
  }

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_infos(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::infos* _infos;

 {sg::search_action sa(a_gv.out());
  const sg::path_t& _path = find_path(sa,a_gv.scene(),a_data.m_node,a_gv.verbose());
  sg::group* grp;
  int gidx;
  if(!sg::rfind<sg::infos,sg::group>(_path,a_data.m_node,grp,_infos,gidx)) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"infos node not found");
    return sg::return_to_render;
  }}

  //_infos->strings.dump(a_gv.out());

  if(_infos->strings.size()!=2) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"bad format for infos");
    return sg::return_to_render;
  }

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  sg::add_item(a_gv,*list,"cancel",viewer_popup_action_cancel);

  if(!a_gv.exec_dumper(*list,_infos->strings[0],_infos->strings[1])) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"exec_dumper() failed");
    return sg::return_to_render;
  }

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  return sg::return_to_render;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline sg::return_action viewer_popup_action_draw_style_points(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();
  a_data.m_draw_style->style = sg::draw_points;
  return sg::return_to_render;
}
inline sg::return_action viewer_popup_action_draw_style_lines(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();
  a_data.m_draw_style->style = sg::draw_lines;
  return sg::return_to_render;
}
inline sg::return_action viewer_popup_action_draw_style_filled(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();
  a_data.m_draw_style->style = sg::draw_filled;
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_draw_style(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::draw_style* _draw_style;

 {sg::search_action sa(a_gv.out());
  const sg::path_t& _path = find_path(sa,a_gv.scene(),a_data.m_node,a_gv.verbose());
  sg::group* grp;
  int gidx;
  if(!sg::rfind<sg::draw_style,sg::group>(_path,a_data.m_node,grp,_draw_style,gidx)) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"draw_style node not found");
    return sg::return_to_render;
  }}

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  popup_data _data(a_data);
  _data.m_draw_style = _draw_style;
  sg::add_item(a_gv,*list,"draw_points" ,viewer_popup_action_draw_style_points,_data);
  sg::add_item(a_gv,*list,"draw_lines"  ,viewer_popup_action_draw_style_lines,_data);
  sg::add_item(a_gv,*list,"draw_filled" ,viewer_popup_action_draw_style_filled,_data);

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  return sg::return_to_render;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline sg::return_action viewer_popup_action_shade_model_flat(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();
  a_data.m_shade_model->model = sg::shade_flat;
  return sg::return_to_render;
}
inline sg::return_action viewer_popup_action_shade_model_smooth(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();
  a_data.m_shade_model->model= sg::shade_smooth;
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_shade_model(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::shade_model* _shade_model;

 {sg::search_action sa(a_gv.out());
  const sg::path_t& _path = find_path(sa,a_gv.scene(),a_data.m_node,a_gv.verbose());
  sg::group* grp;
  int gidx;
  if(!sg::rfind<sg::shade_model,sg::group>(_path,a_data.m_node,grp,_shade_model,gidx)) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"shade_model node not found");
    return sg::return_to_render;
  }}

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  popup_data _data(a_data);
  _data.m_shade_model = _shade_model;
  sg::add_item(a_gv,*list,"shade_flat"   ,viewer_popup_action_shade_model_flat,_data);
  sg::add_item(a_gv,*list,"shade_smooth" ,viewer_popup_action_shade_model_smooth,_data);

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),list);

  return sg::return_to_render;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline sg::return_action viewer_popup_action_ok_color(sg::gui_viewer& a_gv,sg::colors& a_node,const popup_data& a_data) {
  a_gv.hide_popup();
  float r,g,b,a;
  a_node.get_color(r,g,b,a);
  a_data.m_rgba->color.value().set_value(r,g,b,a);
  return sg::return_to_render;
}

inline sg::return_action viewer_popup_action_color(sg::gui_viewer& a_gv,const popup_data& a_data) {
  a_gv.hide_popup();

  sg::rgba* _rgba;

 {sg::search_action sa(a_gv.out());
  const sg::path_t& _path = find_path(sa,a_gv.scene(),a_data.m_node,a_gv.verbose());
  sg::group* grp;
  int gidx;
  if(!sg::rfind<sg::rgba,sg::group>(_path,a_data.m_node,grp,_rgba,gidx)) {
    a_gv.popup_warn(a_data.m_ex,a_data.m_ey,"rgba node not found");
    return sg::return_to_render;
  }}

  sg::colors* _colors = new sg::colors(a_gv.ttf());
  a_gv.set_style(*_colors);

  popup_data _data(a_data);
  _data.m_rgba = _rgba;
  sg::add_callback(a_gv,*_colors,viewer_popup_action_ok_color,_data);

  a_gv.show_widget(sg::pos_data(true,a_data.m_ex,a_data.m_ey),_colors);

  return sg::return_to_render;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline sg::return_action viewer_popup_action_show(sg::gui_viewer& a_gv,sg::node& a_node,
                                                  const sg::event& a_event,sg::event_action& a_event_action,
                                                  float a_z,float a_w) {
  int ex,ey;
  if(!sg::get_event_xy(a_event,ex,ey)) return sg::return_none;

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  //////////////////////////////////////////////////////////
  /// add items ////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  sg::add_item(a_gv,*list,a_node.s_cls(),viewer_popup_action_cancel);

  if(!a_node.draw_in_frame_buffer()) {
    popup_data data(a_node,ex,ey);
    data.m_state = a_event_action.saved_state();
    data.m_z = a_z;
    data.m_w = a_w;
    sg::add_item(a_gv,*list,"center",viewer_popup_action_center,data);
  }

  sg::add_item(a_gv,*list,"infos",viewer_popup_action_infos,popup_data(a_node,ex,ey));

  sg::add_item(a_gv,*list,"move",viewer_popup_action_move,pointer_data(&a_node));
  sg::add_item(a_gv,*list,"reset",viewer_popup_action_reset,pointer_data(&a_node));
  sg::add_item(a_gv,*list,"up",viewer_popup_action_up,pointer_data(&a_node));
  sg::add_item(a_gv,*list,"top",viewer_popup_action_top,pointer_data(&a_node));

  sg::add_item(a_gv,*list,"edit field",viewer_popup_action_edit,popup_data(a_node,ex,ey));

  sg::add_item(a_gv,*list,"color",viewer_popup_action_color,popup_data(a_node,ex,ey));
  sg::add_item(a_gv,*list,"draw style",viewer_popup_action_draw_style,popup_data(a_node,ex,ey));
  sg::add_item(a_gv,*list,"shade model",viewer_popup_action_shade_model,popup_data(a_node,ex,ey));
  sg::add_item(a_gv,*list,"axes",viewer_popup_action_add_axes,pointer_data(&a_node));
  sg::add_item(a_gv,*list,"anim",viewer_popup_action_anim,popup_data(a_node,ex,ey));
  sg::add_item(a_gv,*list,"cam curve",viewer_popup_action_cam_curve,popup_data(a_node,ex,ey));

  // contextual items :
  popup::add_node_items(*list,a_gv.popup_cbks().callbacks(),a_node,ex,ey);

  if(!list->has_item(sg::s_delete())){
    sg::add_item(a_gv,*list,sg::s_delete(),viewer_popup_action_delete,pointer_data(&a_node));
  }

  a_gv.show_widget(sg::pos_data(true,ex,ey),list);

  a_event_action.set_done(true); //to render.

  return sg::return_none;
}

class viewer_popup : public sg::ecbk {
  INLIB_CBK(viewer_popup,inlib::cbk::viewer_popup,sg::ecbk)
public:
  virtual sg::return_action action() {
    if(!m_node) {
      int ex,ey;
      if(!sg::get_event_xy(*m_event,ex,ey)) return sg::return_none;
      sg::list* list = new sg::list(m_gv.ttf());
      m_gv.set_style(*list);

      sg::add_item(m_gv,*list,"cancel",viewer_popup_action_cancel);
      popup::add_class_items(*list,m_gv.popup_cbks().callbacks(),sg::background::s_class(),ex,ey);

      m_gv.show_widget(sg::pos_data(true,ex,ey),list);
      m_event_action->set_done(true); //to render.
      return sg::return_none;
    }
    // trigger by a sg::selection on pick.
    return viewer_popup_action_show(m_gv,*m_node,*m_event,*m_event_action,m_z,m_w);
  }
public:
  viewer_popup(sg::gui_viewer& a_gv)
  :parent(),m_gv(a_gv)
  {}
  virtual ~viewer_popup(){}
protected:
  viewer_popup(const viewer_popup& a_from):parent(a_from),m_gv(a_from.m_gv){}
  viewer_popup& operator=(const viewer_popup& a_from){
    parent::operator=(a_from);
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
};

}}

//inlib_build_use kernel

#endif
