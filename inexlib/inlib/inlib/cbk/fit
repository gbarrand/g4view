// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_fit
#define inlib_cbk_fit

#include "../sg/file_chooser"
#include "../sg/fpf"
#include "../sg/fit2plot"
#include "../sg/f2plot"
#include "../sg/h2plot_cp"
#include "../sg/plots"
#include "../sg/entries"

#include "../f2cmn"

#include "../sg/view_plots"

//
#define INLIB_CBK_FIT_EDVALOP

namespace inlib {
namespace cbk {

class fit : public sg::acbk, public sg::pos_data {
  typedef sg::acbk parent;
  static const std::string& s_start() {
    static const std::string s_v("start ");
    return s_v;
  }

#ifdef INLIB_CBK_FIT_EDVALOP
#else
  INLIB_CLASS_STRING(gaussian)
  INLIB_CLASS_STRING(breit_wigner)
  INLIB_CLASS_STRING(exp_hbook)
  INLIB_CLASS_STRING(exp_aida)
  INLIB_CLASS_STRING(linear)
  INLIB_CLASS_STRING(sqric)
  INLIB_CLASS_STRING(cubic)
#endif

public:
  static unsigned int action_set_params()        {return 2;}
protected:
  static unsigned int action_fit()               {return 3;}
public:
  virtual sg::return_action action() {

    if(m_action==action_set_params()) {

      bool animated = true;
      if(!to(m_entries->values[1],animated)) animated = true;

      std::string minuit_file = m_entries->values[2];

      unsigned int refresh_rate = 0;
      if(animated) refresh_rate = device::slow_cpu()?2:1;
      
      sg::plotter& plotter = m_plots->current_plotter();

      sg::base_ff* ff = 0;
#ifdef INLIB_CBK_FIT_EDVALOP
      sg::valop_fpf* _ff = new sg::valop_fpf(m_gv,plotter,m_entries->get_valop(0));
      _ff->m_refresh_rate = refresh_rate;
      ff = _ff;
#else
     {const std::string& func = m_entries->values[0];
      if(func==s_gaussian()){
        sg::gauss_fpf* _ff = new sg::gauss_fpf(m_gv,plotter);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_breit_wigner()){
        sg::bw_fpf* _ff = new sg::bw_fpf(m_gv,plotter);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_exp_hbook()){
        sg::exp_hbook_fpf* _ff = new sg::exp_hbook_fpf(m_gv,plotter);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_exp_aida()){
        sg::exp_aida_fpf* _ff = new sg::exp_aida_fpf(m_gv,plotter);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_linear()){ //p0+p1*x
        sg::linear_fpf* _ff = new sg::linear_fpf(m_gv,plotter,0,1);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_sqric()){ //p0+p1*x+p2*x*x
        sg::sqric_fpf* _ff = new sg::sqric_fpf(m_gv,plotter,0,1,1);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else if(func==s_cubic()){ //p0+p1*x+p2*x*x+p3*x*x*x
        sg::cubic_fpf* _ff = new sg::cubic_fpf(m_gv,plotter,0,1,1,1);
        _ff->m_refresh_rate = refresh_rate;
        ff = _ff;
      } else {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"not handled function");
        return sg::return_to_render;
      }}      
#endif

      plotter.remove_todels<sg::base_ff>();
      plotter.add_todel<sg::base_ff>(ff);    

      plotter.remove_plottables<sg::func1D>();
      plotter.remove_plottables<sg::fit2plot>();

      const std::vector<sg::base_ff::parameter>& params = ff->params();
      if(!params.size()) {
        m_gv.pop_warn(m_popup,m_ex,m_ey,"fit function without parameters");
        return sg::return_to_render;
      }

      sg::entries* node = new sg::entries(m_gv.ttf());
      m_gv.set_style(*node);

      inlib_vforcit(sg::base_ff::parameter,params,it) {
        node->add_double(s_start()+(*it).m_name,(*it).m_value);
        //node->add_double("step "+(*it).m_name,(*it).m_step);
        double step = (*it).m_value*0.01;        
        node->add_double("step "+(*it).m_name,step?step:0.01);
        node->add_double("min "+(*it).m_name,0);
        node->add_double("max "+(*it).m_name,0);
      }

      fit* _cbk = new fit(m_gv,m_plots,action_fit(),m_popup,m_ex,m_ey);
      _cbk->m_minuit_file = minuit_file;
      _cbk->m_entries = node;
      _cbk->m_histo = m_histo;
      _cbk->m_bff = ff;
      _cbk->m_animated = animated;
      node->add_callback(_cbk);
  
      m_gv.show_widget(*this,node);

    } else if(m_action==action_fit()) {

      std::vector<std::string>& labs = m_entries->labels.values();
      std::vector<std::string>& vals = m_entries->values.values();

      size_t paramn = vals.size()/4;
      std::vector<f2cmn::parameter> params(paramn);

      for(size_t index=0;index<paramn;index++) {
        const std::string& lab_start = labs[4*index+0];
        params[index].m_name =
          lab_start.substr(s_start().size(),lab_start.size()-s_start().size());

        if(!to<double>(vals[4*index+0],params[index].m_start)) {
          m_gv.pop_warn(m_popup,m_ex,m_ey,vals[4*index+0]+"not a number");
          return sg::return_to_render;     
        }
        if(!to<double>(vals[4*index+1],params[index].m_step)) {
          m_gv.pop_warn(m_popup,m_ex,m_ey,vals[4*index+1]+"not a number");
          return sg::return_to_render;     
        }
        if(!to<double>(vals[4*index+2],params[index].m_min)) {
          m_gv.pop_warn(m_popup,m_ex,m_ey,vals[4*index+2]+"not a number");
          return sg::return_to_render;     
        }
        if(!to<double>(vals[4*index+3],params[index].m_max)) {
          m_gv.pop_warn(m_popup,m_ex,m_ey,vals[4*index+3]+"not a number");
          return sg::return_to_render;     
        }
      }

      sg::plotter& plotter = m_plots->current_plotter();
      plotter.add_plottable(new sg::f1d2plot<sg::plot_func>(*m_bff));
      plotter.func_style(0).modeling = sg::modeling_top_lines();
      plotter.func_style(0).color = colorf_red();
      plotter.func_style(0).line_width = 5;
      //m_gv.style_from_res("exlib_cbk_fit",plotter);

      //to see anim_func::update
      if(m_animated) {
        if(m_popup) {
          m_gv.hide_popup();
        } else {
          m_gv.hide_main_menu();
        }
        m_gv.win_render();
      }

      std::vector<double> fit_out;

      typedef f2cmn::command cmd;
      std::vector<cmd> cmds;

      std::vector<std::string> txt;
      if(file::read(m_minuit_file,txt)){
        inlib_vforcit(std::string,txt,it) cmds.push_back(cmd(*it));      
        
        if(!f2cmn::fit_1D<histo::h1d>(m_gv.out(),*m_histo,params,*m_bff,fit_out,cmds,false)){
          m_gv.pop_warn(m_popup,m_ex,m_ey,"fit failed");
          return sg::return_to_render;     
        }

      } else {
      //cmds.push_back(cmd("SET PRI",1, 0)); //-1 no output, 0 minimum output. 
        cmds.push_back(cmd("SET PRI",1,-1)); //-1 no output, 0 minimum output. 
        cmds.push_back(cmd("MIGRAD"));

        if(!f2cmn::fit_1D<histo::h1d>(m_gv.out(),*m_histo,params,*m_bff,fit_out,cmds)){
          m_gv.pop_warn(m_popup,m_ex,m_ey,"fit failed");
          return sg::return_to_render;     
        }
      }


      if(fit_out.size()!=(2+params.size()*4) ){
        m_gv.pop_warn(m_popup,m_ex,m_ey,"bad number of fit output parameters");
        return sg::return_to_render;     
      }

      std::vector<std::string> names;
      inlib_vforcit(f2cmn::parameter,params,it) names.push_back((*it).m_name);
      plotter.add_plottable(new sg::fit2plot(names,fit_out));
      plotter.infos_style().visible = true;

      if(!m_animated) {
        if(m_popup) {
          m_gv.hide_popup();
        } else {
          m_gv.hide_main_menu();
        }
      }
    }

    return sg::return_to_render;     
  }
  virtual sg::bcbk* copy() const {return new fit(*this);}
public:
  fit(sg::gui_viewer& a_gv,sg::plots* a_plots,unsigned int a_action,bool a_popup,int a_ex,int a_ey)
  :parent(a_action)
  ,sg::pos_data(a_popup,a_ex,a_ey)
  ,m_gv(a_gv)
  ,m_plots(a_plots) //not owner

  ,m_entries(0)
  ,m_histo(0)
  ,m_bff(0)
  ,m_animated(true)
  ,m_file_chooser(0)
  {}
  virtual ~fit(){}
protected:
  fit(const fit& a_from)
  :parent(a_from)
  ,sg::pos_data(a_from)
  ,m_gv(a_from.m_gv)
  ,m_plots(a_from.m_plots)

  ,m_entries(a_from.m_entries)
  ,m_histo(a_from.m_histo)
  ,m_bff(a_from.m_bff)
  ,m_animated(a_from.m_animated)
  ,m_file_chooser(a_from.m_file_chooser)
  ,m_minuit_file(a_from.m_minuit_file)
  {}
  fit& operator=(const fit& a_from){
    parent::operator=(a_from);
    sg::pos_data::operator=(a_from);
    m_plots = a_from.m_plots;

    m_entries = a_from.m_entries;
    m_histo = a_from.m_histo;
    m_bff = a_from.m_bff;
    m_animated = a_from.m_animated;
    m_file_chooser = a_from.m_file_chooser;
    m_minuit_file = a_from.m_minuit_file;
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
  sg::plots* m_plots;
public:
  sg::entries* m_entries;
  histo::h1d* m_histo;
protected:
  sg::base_ff* m_bff;
  bool m_animated;
  sg::file_chooser* m_file_chooser;
  std::string m_minuit_file;
};

class fit_data : public sg::pos_data {
  typedef sg::pos_data parent;
public:
  fit_data(sg::plots* a_plots,bool a_popup,int a_ex,int a_ey)
  :parent(a_popup,a_ex,a_ey)
  ,m_plots(a_plots)
  {}
  virtual ~fit_data(){}
public:
  fit_data(const fit_data& a_from)
  :parent(a_from)
  ,m_plots(a_from.m_plots)
  {}
  fit_data& operator=(const fit_data& a_from){
    parent::operator=(a_from);
    m_plots = a_from.m_plots;
    return *this;
  }
public:
  sg::plots* m_plots;
};

inline sg::return_action action_fit(sg::gui_viewer& a_gv,const fit_data& a_data) {
  sg::plots* _plots = a_data.m_plots;
  if(!_plots) _plots = sg::search_selectable<sg::plots>(a_gv.out(),a_gv.scene());
  if(!_plots) {
    a_gv.pop_warn(a_data,"no plots given");
    return sg::return_to_render;
  }

  // find back the histo :
  sg::plotter& plotter = _plots->current_plotter();

  const std::vector<sg::plottable*>& ptbs = plotter.plottables();
  if(ptbs.empty()) {
    a_gv.pop_warn(a_data,"plotter has no plottable");
    return sg::return_to_render;
  }

  sg::plottable* ptb = ptbs.front();

  histo::h1d* histo = 0;

  if(sg::h1d2plot* h1ptb = safe_cast<sg::plottable,sg::h1d2plot>(*ptb)){
    const histo::h1d& h = h1ptb->data();
    histo = const_cast<histo::h1d*>(&h);

  } else if(sg::h1d2plot_cp* h1ptb_cp = safe_cast<sg::plottable,sg::h1d2plot_cp>(*ptb)){
    histo = &(h1ptb_cp->data());

  } else {
    a_gv.pop_warn(a_data,"no plottable data to fit");
    return sg::return_to_render;
  }

  // ask to choose a function :
  sg::entries* node = new sg::entries(a_gv.ttf());
  a_gv.set_style(*node);
      
#ifdef INLIB_CBK_FIT_EDVALOP
 {sg::edvalop& edvalop = node->edvalop();
  edvalop.edit_what = sg::edvalop::edit_ntuple;
  std::vector<std::string> opts;
  opts.push_back("x");
  edvalop.vars.set_values(opts);
  edvalop.vars_label = "x";
  val_funcs funcs;
  funcs.add_front(new sg::cubic_fpf(a_gv,plotter,0,1,1,1));
  funcs.add_front(new sg::sqric_fpf(a_gv,plotter,0,1,1));
  funcs.add_front(new sg::linear_fpf(a_gv,plotter,0,1));
  funcs.add_front(new sg::exp_aida_fpf(a_gv,plotter));
  funcs.add_front(new sg::exp_hbook_fpf(a_gv,plotter));
  funcs.add_front(new sg::bw_fpf(a_gv,plotter));
  //appears first.
  funcs.add_front(new sg::gauss_fpf(a_gv,plotter));

  edvalop.set_funcs(funcs);
  node->add_math("function",valop(valop::NAME,"x",0));} //0
#else
  std::vector<std::string> opts;
  opts.push_back(s_gaussian());
  opts.push_back(s_breit_wigner());
  opts.push_back(s_exp_hbook());
  opts.push_back(s_exp_aida());
  opts.push_back(s_linear());
  opts.push_back(s_sqric());
  opts.push_back(s_cubic());
  node->add_opts("function",s_gaussian(),opts); //0
#endif
  node->add_bool("animated",true);    //1
  node->add_file(".minuit file","");  //2

 {sg::file_chooser& fch = node->file_chooser();
  fch.exts.add(".minuit");
  fch.dirs.add(a_gv.res_dir());
  fch.dirs.add(a_gv.data_dirs());
  fch.initialize(a_gv.out());}

  fit* _cbk = new fit(a_gv,_plots,fit::action_set_params(),a_data.m_popup,a_data.m_ex,a_data.m_ey);
  _cbk->m_entries = node;
  _cbk->m_histo = histo;
  node->add_callback(_cbk);
  
  a_gv.show_widget(a_data,node);

  return sg::return_to_render;
}

}}

//inlib_build_use kernel

#endif
