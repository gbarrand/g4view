// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_move_manip
#define inlib_cbk_move_manip

#include "../sg/alert"
#include "../sg/ecbk"
#include "../sg/cube_manip"
#include "../sg/search"
#include "../sg/selection"
#include "../sg/matrix4manip"
#include "../mathf"
#include "../sout"

namespace inlib {
namespace cbk {

class move_manip : public sg::ecbk {
public:
  static unsigned int action_start_move() {return 1;}
protected:
  static unsigned int action_manip_move() {return 2;}
public:
  virtual sg::return_action action() {
    if(!m_node) return sg::return_none;

    if(m_action==action_start_move()) {

      // we should pass here from a down event that had selected
      // a sub object of a cube_manip :

      sg::cube* cb = safe_cast<sg::node,sg::cube>(*m_node);
      if(!cb) return sg::return_none;

      // find back the manip :
      sg::cube_manip* cm = sg::find_ancestor<sg::cube_manip>(m_out,m_sg,*m_node,m_verbose);
      if(!cm) return sg::return_none;

      cm->set_active_node(cb);
      cm->m_active_state = m_event_action->saved_state();
      m_event_action->set_done(true); //to render.

    } else if(m_action==action_manip_move()) {

      sg::mouse_move_event* mevt = sg::event_cast<sg::event,sg::mouse_move_event>(*m_event);
      if(!mevt) return sg::return_none;

      // m_node is the manip.

      sg::cube_manip* cm = safe_cast<sg::node,sg::cube_manip>(*m_node);
      if(!cm) return sg::return_none;
      if(!cm->active_node()) return sg::return_none;

      const sg::cube* cb = safe_cast<sg::node,sg::cube>(*(cm->active_node()));
      if(!cb) return sg::return_none;

      // get state when cb had been picked :
      const sg::state& state = cm->m_active_state;

      // get picked point in cb coord system :
      float ox,oy,oz;
      if(!state.screen2wc(mevt->ox(),mevt->oy(),ox,oy,oz)) return sg::return_none;
      float x,y,z;
      if(!state.screen2wc(mevt->x(),mevt->y(),x,y,z)) return sg::return_none;

      vec3f dmevt(float(mevt->x())-float(mevt->ox()),float(mevt->y())-float(mevt->oy()),0);
      float win_diag = ::sqrtf(float(state.m_ww)*float(state.m_ww)+float(state.m_wh)*float(state.m_wh));
      float mevt_fac = dmevt.length()/win_diag;

      // "delta touch" in cb coords :
      float dx = x-ox;
      float dy = y-oy;
      float dz = z-oz;
      vec3f dt(dx,dy,dz); //no need to back-project in cm coord.

      //m_out << "inlib::cbk::move_manip::action :"
      //           << " action_manip_move "
      //           << " dx=" << dx << ",dy=" << dy << ",dz=" << dz
      //           << std::endl;

      //get cb center relative to cm center :
      const mat4f& mtx = cm->get_mtx(*cb); //translations.
      float cbx,cby,cbz;
      mtx.get_translate(cbx,cby,cbz);
      vec3f cbc(cbx,cby,cbz);

      float cm_sz = ::sqrtf(cm->width*cm->width+cm->height*cm->height+cm->depth*cm->depth);

      float tfac = 3; //pure cooking.

      if(cm->to_scale(*cb)) {

        // project delta-touch along line joining center of cm to cb :

        m_u = cbc;
        m_u.normalize();
        float dot = dt.dot(m_u);
        float ds = dot>=0?mevt_fac:-mevt_fac; //in [-1,1]
        ds = ::expf(ds*5); //5 is pure cooking.

        cm->mul_scale(ds,ds,ds);

        //cm->mul_translate(dx,dy,dz);

      ///////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////
      } else if(cm->to_rotate_x(*cb)) {

/*      if(cm->rotate_as_translate.value()) {
          m_u.set_value(dx,dy,0);
          m_u.normalize();
          m_u *= cm_sz * mevt_fac * tfac;
          cm->mul_translate(m_u.x(),m_u.y(),m_u.z());

        } else */ {
          // project delta-touch along line perpandicular to cb edge
          // in yz plane and parallele to diagonal od cm :

          vec3f::s_x().cross(cbc,m_u);
          m_u.normalize();
          float dot = dt.dot(m_u);
          float da = dot>=0?mevt_fac:-mevt_fac;
          da *= ftwo_pi();

          cm->mul_rotate(1,0,0,da);
        }

      } else if(cm->to_rotate_y(*cb)) {

/*      if(cm->rotate_as_translate.value()) {
          m_u.set_value(dx,dy,0);
          m_u.normalize();
          m_u *= cm_sz * mevt_fac * tfac;
          cm->mul_translate(m_u.x(),m_u.y(),m_u.z());
        } else */ {
          vec3f::s_y().cross(cbc,m_u);
          m_u.normalize();
          float dot = dt.dot(m_u);
          float da = dot>=0?mevt_fac:-mevt_fac;
          da *= ftwo_pi();

          cm->mul_rotate(0,1,0,da);
        }

      } else if(cm->to_rotate_z(*cb)) {

        vec3f::s_z().cross(cbc,m_u);
        m_u.normalize();
        float dot = dt.dot(m_u);
        float da = dot>=0?mevt_fac:-mevt_fac;
        da *= ftwo_pi();

        cm->mul_rotate(0,0,1,da);

      ///////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////
      } else if(cm->to_translate_xy(*cb)) {

        // project delta-touch along z in xy plane :

        m_u.set_value(dx,dy,0);
        m_u.normalize();
        m_u *= cm_sz * mevt_fac * tfac;

        cm->mul_translate(m_u.x(),m_u.y(),m_u.z());

      } else if(cm->to_translate_yz(*cb)) {

        m_u.set_value(0,dy,dz);
        m_u.normalize();
        m_u *= cm_sz * mevt_fac * tfac;

        cm->mul_translate(m_u.x(),m_u.y(),m_u.z());

      } else if(cm->to_translate_zx(*cb)) {

        m_u.set_value(dx,0,dz);
        m_u.normalize();
        m_u *= cm_sz * mevt_fac * tfac;

        cm->mul_translate(m_u.x(),m_u.y(),m_u.z());

      }

      m_event_action->set_done(true); //trigger a render in m_gv.touch_move()

    }

    return sg::return_none;
  }
  virtual sg::bcbk* copy() const {return new move_manip(*this);}
public:
  move_manip(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,bool a_verbose,unsigned int a_action)
  :sg::ecbk(a_action)
  ,m_ui(a_ui)
  ,m_out(a_out)
  ,m_sg(a_sg)
  ,m_verbose(a_verbose)
  ,m_manip(0)
  {}
  virtual ~move_manip(){}
public:
  move_manip(const move_manip& a_from)
  :sg::ecbk(a_from)
  ,m_ui(a_from.m_ui)
  ,m_out(a_from.m_out)
  ,m_sg(a_from.m_sg)
  ,m_verbose(a_from.m_verbose)
  ,m_manip(a_from.m_manip)
  {}
  move_manip& operator=(const move_manip& a_from){
    sg::ecbk::operator=(a_from);
    m_verbose = a_from.m_verbose;
    m_manip = a_from.m_manip;
    return *this;
  }
public:
  static void add_cbks(sg::selection& a_sel,sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,bool a_verbose){
  //a_sel.up_cbks().add(new move_manip(a_ui,a_out,a_sg,a_verbose,action_set_manip()));
    a_sel.down_cbks().add(new move_manip(a_ui,a_out,a_sg,a_verbose,action_start_move()));
  }
protected:
  sg::alert& m_ui;
  std::ostream& m_out;
  sg::node& m_sg;
  bool m_verbose;
  vec3f m_u; //optimization
public:
  sg::cube_manip* m_manip; //not owner.

public:
  typedef sg::search_action::path_t path_t;

public: //from a_path
  static sg::cube_manip* is_maniped(std::ostream& a_out,const path_t& a_path,sg::node& a_node,bool a_verbose){
    sg::group* grp;
    sg::cube_manip* cm;
    int gidx;
    if(!sg::rfind<sg::cube_manip,sg::group>(a_path,a_node,grp,cm,gidx)) {
      if(a_verbose) {
        a_out << "is_maniped : group of cube_manip not found" << std::endl;
      }
      return 0;
    }
    const path_t& path = cm->m_path;
    if(path.empty()) { //case of a cube_manip sent to a sg_serv.
      if(a_verbose) {
        a_out << "is_maniped : sg::cube_manip path is empty." << std::endl;
      }
      return 0;
    }
    if(&a_node!=path[path.size()-1]) {
      if(a_verbose) {
        a_out << "is_maniped : node mismatch" << std::endl;
      }
      return 0;
    }
    if(a_verbose) {
      a_out << "is_maniped : cube_manip found" << std::endl;
    }
    return cm;
  }

  static bool set_manip(sg::alert& a_ui,std::ostream& a_out,const path_t& a_path,sg::node& a_node,float a_hcam,bool a_verbose){
    if(a_path.empty()) return false;
  //dump(a_out,a_path);
    sg::group* grp;
    sg::matrix* mtx;
    int gidx; //index in path of the found grp.
    if(!sg::rfind<sg::matrix,sg::group>(a_path,a_node,grp,mtx,gidx)) {
      a_ui.warn("no node matrix found");
      return false;
    }
    if(a_verbose) {
      a_out << "inlib::cbk::move_manip::set_manip : found matrix" << std::endl;
    }
    sg::node* asg = a_path[a_path.size()-1];
    return _set_manip(a_ui,a_out,*asg,a_node,*grp,mtx,a_path,gidx,a_hcam,a_verbose);
  }


public: //from a_node
  static bool set_manip(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node& a_node,float a_hcam,bool a_verbose){
    sg::search_action sa(a_out);
    const path_t& path = sg::find_path(sa,a_sg,a_node,a_verbose);
    return set_manip(a_ui,a_out,path,a_node,a_hcam,a_verbose);
  }


  static bool toggle_manip(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node& a_node,float a_hcam,bool a_verbose){
    sg::search_action sa(a_out);
    const path_t& path = sg::find_path(sa,a_sg,a_node,a_verbose);
    sg::cube_manip* cm = is_maniped(a_out,path,a_node,a_verbose);
    if(cm){
      if(cm->m_gidx==(-1)) {
        a_ui.warn("bad gdix");
        return false;
      }
      sg::group* cm_grp = safe_cast<sg::node,sg::group>(*(cm->m_path[cm->m_gidx]));
      if(!cm_grp) {
        a_ui.warn("unexpected container");
        return false;
      }
      sg::matrix* m = cm->ref_matrix();
      m->mtx = cm->mtx;
      cm->set_delete_ref_matrix(false);
      if(!cm_grp->replace(cm,m,true)) { //it deletes cm.
        cm->set_delete_ref_matrix(true); //cm not found and not deleted. We give back ownership of m to cm.
        a_ui.warn("replace in group failed");
        return false;
      }
      return true;
    } else {
      return set_manip(a_ui,a_out,path,a_node,a_hcam,a_verbose);
    }
  }


  static sg::cube_manip* is_maniped(std::ostream& a_out,sg::node& a_sg,sg::node& a_node,bool a_verbose){
    sg::search_action sa(a_out);
    const path_t& path = sg::find_path(sa,a_sg,a_node,a_verbose);
    return is_maniped(a_out,path,a_node,a_verbose);
  }

  static bool reset_maniped(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node& a_node,bool a_verbose){
    sg::cube_manip* cm = is_maniped(a_out,a_sg,a_node,a_verbose);
    if(!cm) {
      a_ui.warn("not under a manip");
      return false;
    }
    cm->mtx = cm->m_start_matrix;
    return true;
  }

  static bool delete_maniped(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node* a_node,bool a_verbose){
    sg::search_action sa(a_out);
    const path_t& path = sg::find_path(sa,a_sg,*a_node,a_verbose);
    sg::cube_manip* cm = is_maniped(a_out,path,*a_node,a_verbose);
    if(cm) {
      if(cm->m_gidx==(-1)) {
        a_ui.warn("bad gdix");
        return false;
      }
      sg::group* cm_grp = safe_cast<sg::node,sg::group>(*(cm->m_path[cm->m_gidx]));
      if(!cm_grp) {
        a_ui.warn("can't find manip group");
        return false;
      }
      if(!cm_grp->delete_from(cm)) { //touchy
        a_ui.warn("remove_from failed");
        return false;
      }

    } else {
      sg::group* grp = sg::container<sg::group>(path);
      if(!grp) {
        std::string sclass;
        sg::parent_class(path,sclass);
        a_ui.warn("container not found. Parent is of class "+sout(sclass));
        return false;
      }
      if(!grp->remove(a_node)) {
        a_ui.warn("remove in group failed");
        return false;
      }
      delete a_node;
    }
    return true;
  }

  static bool manip_up(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node& a_node,float a_hcam,bool a_verbose){
    sg::cube_manip* cm = is_maniped(a_out,a_sg,a_node,a_verbose);
    if(!cm) {
      a_ui.warn("not under a manip");
      return false;
    }
    if(cm->m_gidx==(-1)) {
      a_ui.warn("bad gdix");
      return false;
    }
    // remove previous manip :
    sg::group* cm_grp = safe_cast<sg::node,sg::group>(*(cm->m_path[cm->m_gidx]));
    if(!cm_grp) {
      a_ui.warn("can't find manip group");
      return false;
    }
    sg::matrix* m = cm->ref_matrix();
    m->mtx = cm->mtx;
    if(!cm_grp->replace(cm,m,false)) { //do not delete cm.
      a_ui.warn("replace in group failed");
      return false;
    }
    cm->set_delete_ref_matrix(false);

    path_t p = cm->m_path;
    p.resize(cm->m_gidx+1);
    p.push_back(m);

    sg::group* grp;
    sg::matrix* mtx;
    int gidx; //index in path of grp.
    if(!sg::rfind<sg::matrix,sg::group>(p,*m,grp,mtx,gidx)) {
      a_ui.warn("no node matrix found");
      // restore back cm :
      cm->set_delete_ref_matrix(true);
      cm_grp->replace(m,cm,false);
      return false;
    }

    bool status = _set_manip(a_ui,a_out,a_sg,a_node,*grp,mtx,cm->m_path,gidx,a_hcam,a_verbose);
    delete cm;

    return status;
  }

  static bool manip_top(sg::alert& a_ui,std::ostream& a_out,sg::node& a_sg,sg::node& a_node,float a_hcam,bool a_verbose){
    sg::cube_manip* cm = is_maniped(a_out,a_sg,a_node,a_verbose);
    if(!cm) {
      a_ui.warn("not under a manip");
      return false;
    }
    if(cm->m_gidx==(-1)) {
      a_ui.warn("bad gdix");
      return false;
    }
    // remove previous manip :
    sg::group* cm_grp = safe_cast<sg::node,sg::group>(*(cm->m_path[cm->m_gidx]));
    if(!cm_grp) {
      a_ui.warn("can't find manip group");
      return false;
    }
    sg::matrix* m = cm->ref_matrix();
    m->mtx = cm->mtx;
    if(!cm_grp->replace(cm,m,false)) { //do not delete cm.
      a_ui.warn("replace in group failed");
      return false;
    }
    cm->set_delete_ref_matrix(false);

    path_t p = cm->m_path;
    p.resize(cm->m_gidx+1);
    p.push_back(m);

    sg::group* grp;
    sg::matrix* mtx;
    int gidx; //index in path of grp.
    if(!sg::find_top<sg::matrix,sg::group>(p,*m,grp,mtx,gidx)) {
      a_ui.warn("no node matrix found");
      // restore back cm :
      cm->set_delete_ref_matrix(true);
      cm_grp->replace(m,cm,false);
      return false;
    }

    bool status = _set_manip(a_ui,a_out,a_sg,a_node,*grp,mtx,cm->m_path,gidx,a_hcam,a_verbose);
    delete cm;

    return status;
  }

protected:
  static bool _set_manip(sg::alert& a_ui,std::ostream& a_out,
                         sg::node& a_sg,sg::node& /*a_node*/,
                         sg::group& a_grp,
                         sg::matrix* a_mtx,
                         const path_t& a_path,
                         int a_gidx,
			 float a_hcam,
                         bool a_verbose){
    // get bbox "after a_mtx in a_grp".

    sg::bbox_action ba(a_out);
    //a_node->bbox(ba);

   {sg::group* bgrp = new sg::group;
    const std::vector<sg::node*>& v = a_grp.children();
    std::vector<sg::node*>::const_iterator it  = v.begin();
    bool found = false;
    for(it=v.begin();it!=v.end();++it) {
      if(*it==a_mtx) {
        found = true;
        continue; //do not include a_mtx.
      }
      if(found) bgrp->add(*it);
    }
    if(!found){
      a_ui.warn("can't find matrix in group");
      return false;
    }
    bgrp->bbox(ba);
    bgrp->children().clear(); //important.
    delete bgrp;}

    if(!ba.end()) {
      a_out << "bad bbox_action end." << std::endl;
      return false;
    }
    //ba.box().dump(a_out);

    float dx,dy,dz;
    /*  the below does not handle properly a single point which has a not empty zero size bbox.
    if(!ba.box().get_cube_size(dx,dy,dz)) {
      a_out << "empty bbox." << std::endl;
      a_ui.warn("empty bounding box");
      return false;
    }*/
    if(ba.box().is_empty()) {
      a_out << "empty bbox." << std::endl;
      a_ui.warn("empty bounding box");
      return false;
    } else {
      if(!ba.box().get_cube_size(dx,dy,dz)) {  //for example on a single point.
	dx = dy = dz = a_hcam*0.05f;
      }
    }

    vec3f bc;
    if(!ba.box().center(bc)) {
      a_out << "empty bbox (2)." << std::endl;
      a_ui.warn("can't get center");
      return false;
    }

    if(a_verbose) {
      a_out << "inlib::cbk::move_manip::_set_manip : bbox :" << std::endl;
      ba.box().dump(a_out);
    }

    sg::cube_manip* cm = new sg::cube_manip;
    cm->set_ref_matrix(a_mtx,true); //give ownership of a_mtx to cm.

    if(sg::matrix4manip* _m = safe_cast<sg::matrix,sg::matrix4manip>(*a_mtx)) {
      cm->shape_mask = _m->shape_mask;
    }

    float fac = 1.1f;

    cm->mtx = a_mtx->mtx.value();
    cm->m_start_matrix = a_mtx->mtx.value();
    cm->m_path = a_path;
    cm->m_gidx = a_gidx;

    cm->center = bc;

    cm->width = dx*fac;
    cm->height = dy*fac;
    cm->depth = dz*fac;

   {move_manip* cbk = new move_manip(a_ui,a_out,a_sg,a_verbose,action_manip_move());
    cbk->m_manip = cm;
    cm->move_cbks().add(cbk);}

    a_grp.replace(a_mtx,cm,false); //it does not delete a_mtx

    return true;
  }
};

}}

#endif
