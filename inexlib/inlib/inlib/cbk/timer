// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_timer
#define inlib_cbk_timer

#include "../sg/acbk"
#include "../sg/ui"
#include "../sys/base_timer"

namespace inlib {
namespace cbk {

class timer : public sg::acbk {
public:
  static unsigned int action_start()  {return 0;}
  static unsigned int action_do()     {return 1;}
  static unsigned int action_stop()   {return 2;}
public:
  virtual sg::return_action action() {

    if(m_action==action_start()) {

      m_timer.start();

      timer* _cbk = (timer*)copy();
      _cbk->m_action = action_do();
      m_ui.add_work(_cbk);

    } else if(m_action==action_do()) {

      m_timer.check_time_out(); //the timer action can stop the timer.

      if(m_timer.active()) { //timer still active.
        // respawn :
        timer* _cbk = (timer*)copy();
        _cbk->m_action = action_do();
        m_ui.add_work(_cbk);
      }

      return sg::return_to_render;

    } else if(m_action==action_stop()) {

      m_timer.stop();
      m_ui.invalidate_works(s_cls());

    }

    return sg::return_none;
  }
  virtual sg::bcbk* copy() const {return new timer(*this);}

public:
  INLIB_SCLASS(inlib::cbk::timer)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<timer>(this,a_class)) return p;
    return sg::acbk::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  timer(sg::ui& a_ui,
        base_timer& a_timer,
        unsigned int a_action = action_start())
  :sg::acbk(a_action)
  ,m_ui(a_ui)
  ,m_timer(a_timer)
  {
    m_single_shoot = true;
  }
  virtual ~timer(){}
protected:
  timer(const timer& a_from)
  :sg::acbk(a_from)
  ,m_ui(a_from.m_ui)
  ,m_timer(a_from.m_timer)
  {}
  timer& operator=(const timer& a_from){
    sg::acbk::operator=(a_from);
    return *this;
  }
public:
  static void invalidate_timer_works(sg::ui& a_ui,const std::string& a_class) {
    // a_class is for a class inheriting inlib::base_timer.
    inlib_vforit(bcbk*,a_ui.cbks(),it) {
      bcbk* _cbk = *it;
      timer* _timer = safe_cast<bcbk,timer>(*_cbk);
      if(!_timer) continue;
      base_timer& btimer = _timer->m_timer;
      if(!btimer.cast(a_class)) continue;
      btimer.stop();
      _cbk->invalidate();
    }
  }
protected:
  sg::ui& m_ui;
  base_timer& m_timer;
};

}}

#endif
