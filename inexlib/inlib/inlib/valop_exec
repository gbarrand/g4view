// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_valop_exec
#define inlib_valop_exec

#include "valop"
#include "smatch"

namespace inlib {

class valop_exec : public virtual valop_visitor {
public:
  virtual bool binary(unsigned int a_type,const valop& a_1,const valop& a_2) {
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    m_return = v1.m_return;

    if(a_type==valop::ADD) {
      if(!value::add(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::SUB) {
      if(!value::subtract(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::MUL) {
      if(!value::multiply(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::DIV) {
      if(!value::divide(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }

    //boolean operations :
    } else if(a_type==valop::CMP_GT) {
      if(!value::if_gt(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_GE) {
      if(!value::if_ge(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_LT) {
      if(!value::if_lt(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_LE) {
      if(!value::if_le(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_EQ) {

      if((m_return.type()==value::STRING)&&
         (v2.m_return.type()==value::STRING)){
        m_return.set(match(m_return.get_string(),v2.m_return.get_string()));
        return true;
      }

      if(!value::if_eq(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_NE) {
      if(!value::if_ne(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_AND) {
      if(!value::if_and(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }
    } else if(a_type==valop::CMP_OR) {
      if(!value::if_or(m_return,v2.m_return,m_error)) {
        m_return.set_none();
        return false;
      }

  //} else if(a_type==valop::SUPS) {
  //} else if(a_type==valop::SUBS) {

    } else {
      return false;
    }
    return true;
  }

  virtual bool unary(unsigned int a_type,const valop& a_1) {
    if(a_type==valop::MINUS) {
      valop_exec v1(m_input,m_error);
      if(!v1.visit(a_1)) {m_return.set_none();return false;}
      m_return = v1.m_return;
      if(!value::minus(m_return,m_error)) {
        m_return.set_none();
        return false;
      }
      return true;
    } else if(a_type==valop::NOT) {
      valop_exec v1(m_input,m_error);
      if(!v1.visit(a_1)) {m_return.set_none();return false;}
      m_return = v1.m_return;
      if(!value::do_not(m_return,m_error)) {
        m_return.set_none();
        return false;
      }
      return true;
    } else if(a_type==valop::ASSIGN) {
      valop_exec v1(m_input,m_error);
      if(!v1.visit(a_1)) {m_return.set_none();return false;}
      m_return = v1.m_return;
      return true;
    } else {
      return false;
    }
  }

  virtual bool variable(unsigned int,const value& a_var) {
    m_return = a_var;
    return true;
  }

  virtual bool option(const valop& a_node) {
    if((a_node.m_index<0)||(a_node.m_index>=int(m_input.size()))) {
      m_return.set_none();
      return false;
    }
    m_return = m_input[a_node.m_index];
    return true;
  }

  virtual bool func_1(const valop& a_f,const valop& a_1) {
    if(a_f.m_function->number_of_arguments()!=1) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
  virtual bool func_2(const valop& a_f,const valop& a_1,const valop& a_2) {
    if(a_f.m_function->number_of_arguments()!=2) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    args.push_back(v2.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
  virtual bool func_3(const valop& a_f,const valop& a_1,const valop& a_2,const valop& a_3) {
    if(a_f.m_function->number_of_arguments()!=3) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    args.push_back(v2.m_return);
  
    valop_exec v3(m_input,m_error);
    if(!v3.visit(a_3)) {m_return.set_none();return false;}
    args.push_back(v3.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
  virtual bool func_4(const valop& a_f,const valop& a_1,const valop& a_2,const valop& a_3,const valop& a_4) {
    if(a_f.m_function->number_of_arguments()!=4) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    args.push_back(v2.m_return);
  
    valop_exec v3(m_input,m_error);
    if(!v3.visit(a_3)) {m_return.set_none();return false;}
    args.push_back(v3.m_return);
  
    valop_exec v4(m_input,m_error);
    if(!v4.visit(a_4)) {m_return.set_none();return false;}
    args.push_back(v4.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
  virtual bool func_5(const valop& a_f,const valop& a_1,const valop& a_2,const valop& a_3,const valop& a_4,const valop& a_5) {
    if(a_f.m_function->number_of_arguments()!=5) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    args.push_back(v2.m_return);
  
    valop_exec v3(m_input,m_error);
    if(!v3.visit(a_3)) {m_return.set_none();return false;}
    args.push_back(v3.m_return);
  
    valop_exec v4(m_input,m_error);
    if(!v4.visit(a_4)) {m_return.set_none();return false;}
    args.push_back(v4.m_return);
  
    valop_exec v5(m_input,m_error);
    if(!v5.visit(a_5)) {m_return.set_none();return false;}
    args.push_back(v5.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
  virtual bool func_6(const valop& a_f,const valop& a_1,const valop& a_2,const valop& a_3,const valop& a_4,const valop& a_5,const valop& a_6) {
    if(a_f.m_function->number_of_arguments()!=6) return false;
    std::vector<value> args;
  
    valop_exec v1(m_input,m_error);
    if(!v1.visit(a_1)) {m_return.set_none();return false;}
    args.push_back(v1.m_return);
  
    valop_exec v2(m_input,m_error);
    if(!v2.visit(a_2)) {m_return.set_none();return false;}
    args.push_back(v2.m_return);
  
    valop_exec v3(m_input,m_error);
    if(!v3.visit(a_3)) {m_return.set_none();return false;}
    args.push_back(v3.m_return);
  
    valop_exec v4(m_input,m_error);
    if(!v4.visit(a_4)) {m_return.set_none();return false;}
    args.push_back(v4.m_return);
  
    valop_exec v5(m_input,m_error);
    if(!v5.visit(a_5)) {m_return.set_none();return false;}
    args.push_back(v5.m_return);
  
    valop_exec v6(m_input,m_error);
    if(!v6.visit(a_6)) {m_return.set_none();return false;}
    args.push_back(v6.m_return);
  
    return a_f.m_function->eval(args,m_return,m_error);
  }
public:
  valop_exec(const std::vector<value>& a_input,std::string& a_error)
  :m_input(a_input)
  ,m_error(a_error)
  {}
  virtual ~valop_exec() {}
public:
  valop_exec(const valop_exec& a_from)
  :valop_visitor(a_from)
  ,m_input(a_from.m_input)
  ,m_error(a_from.m_error)
  ,m_return(a_from.m_return)
  {}
  valop_exec& operator=(const valop_exec& a_from){
    m_return = a_from.m_return;
    return *this;
  }
public:
  value& ret() {return m_return;}
protected:
  const std::vector<value>& m_input;
  std::string& m_error; //inited by the caller.
  value m_return;
};

}

#endif

/*
  bool execute(const std::vector<value>& aInput,
               std::string& a_error){ //Inited by the caller to optimize.
    //FIXME : handle ret values of execute().
    switch(m_type) {
    case CMP_EQ:
      if(!m_A || !m_B) break;
     {if(!EXEC(m_A,aInput,a_error)) return false;
      if(!EXEC(m_B,aInput,a_error)) return false;
      value& va = m_A->ret();
      value& vb = m_B->ret();
      if( (m_A->m_type==NAME) && 
          (va.type()==value::STRING) &&
          (vb.type()==value::STRING) ){
        m_return.set(match(va.get_string(),vb.get_string()));
        return true;
      } else {
        m_return = va;
       {if(!value::if_eq(m_return,vb,a_error)) {
          m_return.set_none();
          return false;
        }}
        return true;
      }}
    case CMP_NE:
      if(!m_A || !m_B) break;
     {if(!EXEC(m_A,aInput,a_error)) return false;
      if(!EXEC(m_B,aInput,a_error)) return false;
      value& va = m_A->ret();
      value& vb = m_B->ret();
      if( (m_A->m_type==NAME) && 
          (va.type()==value::STRING) &&
          (vb.type()==value::STRING) ){
        m_return.set(match(va.get_string(),vb.get_string())?false:true);
        return true;
      } else {
        m_return = va;
       {if(!value::if_ne(m_return,vb,a_error)) {
          m_return.set_none();
          return false;
        }}
        return true;
      }}
    case NOT:
      if(!m_A) break;
      if(!EXEC(m_A,aInput,a_error)) return false;
      m_return = m_A->ret();
     {if(!value::do_not(m_return,a_error)) {
        m_return.set_none();
        return false;
      }}
      return true;
    case ASSIGN:
      if(!m_A) break;
      if(!EXEC(m_A,aInput,a_error)) return false;
      m_return = m_A->ret(); //FIXME : or m_return.assign(m_A->ret()); ???
      return true;
    case NAME:
      if( (m_index<0) || (m_index>=(int)aInput.size()) ) {
        a_error = std::string("valop::execute : index out of range")
    	  + " " + to<int>((int)m_index)
  	  + " range [0," + to<int>((int)aInput.size())
          + "] for variable "+m_name+".";
        m_return.set_none();
        return false;
      }
      m_return = aInput[m_index];
      return true;
    case PI:
      m_return.set(pi());
      return true;
    case FUNC:
      if(!m_A) break;
      if(!m_function) {
        a_error = std::string("valop::execute : null function");
        m_return.set_none();
        return false;
      }
     {std::vector<value> args;
  
      if(!EXEC(m_A,aInput,a_error)) return false;
      args.push_back(m_A->ret());
  
      unsigned int argn = m_function->number_of_arguments();
      if(argn==1) {
      } else if(argn==2) {
        if(!m_B) break;
        if(!EXEC(m_B,aInput,a_error)) return false;
        args.push_back(m_B->ret());
      } else if(argn==3) {
        if(!m_B || !m_C) break;
        if(!EXEC(m_B,aInput,a_error)) return false;
        if(!EXEC(m_C,aInput,a_error)) return false;
        args.push_back(m_B->ret());
        args.push_back(m_C->ret());
      } else if(argn==4) {
        if(!m_B || !m_C || !m_D) break;
        if(!EXEC(m_B,aInput,a_error)) return false;
        if(!EXEC(m_C,aInput,a_error)) return false;
        if(!EXEC(m_D,aInput,a_error)) return false;
        args.push_back(m_B->ret());
        args.push_back(m_C->ret());
        args.push_back(m_D->ret());
      } else if(argn==5) {
        if(!m_B || !m_C || !m_D || !m_E) break;
        if(!EXEC(m_B,aInput,a_error)) return false;
        if(!EXEC(m_C,aInput,a_error)) return false;
        if(!EXEC(m_D,aInput,a_error)) return false;
        if(!EXEC(m_E,aInput,a_error)) return false;
        args.push_back(m_B->ret());
        args.push_back(m_C->ret());
        args.push_back(m_D->ret());
        args.push_back(m_E->ret());
      } else if(argn==6) {
        if(!m_B || !m_C || !m_D || !m_E || !m_F) break;
        if(!EXEC(m_B,aInput,a_error)) return false;
        if(!EXEC(m_C,aInput,a_error)) return false;
        if(!EXEC(m_D,aInput,a_error)) return false;
        if(!EXEC(m_E,aInput,a_error)) return false;
        if(!EXEC(m_F,aInput,a_error)) return false;
        args.push_back(m_B->ret());
        args.push_back(m_C->ret());
        args.push_back(m_D->ret());
        args.push_back(m_E->ret());
        args.push_back(m_F->ret());
      }
      return m_function->eval(args,m_return,a_error);
      }
    case SYMBOL:break;
    case ASIDE:break;
    case NVMUL:break;
    case EQUAL:break;
    }
    }
    a_error = std::string("valop::execute : Can't apply on type ")
      + to<int>((int)m_type) + " : bad return value.";
    m_return.set_none();
    return false;
  }
*/
