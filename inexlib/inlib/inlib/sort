// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sort
#define inlib_sort

#include "cstr"

#include <vector>
#include <string>

extern "C" {

// since extern "C" does not take into account name space, we prefix with inlib_

typedef int (*inlib_sort_func_t)(const void*,const void*);

}

namespace inlib {
namespace sort {

inline int strlen_greater(char** a1,char** a2){
  size_t l1 = ::strlen(*a1);
  size_t l2 = ::strlen(*a2);
  if(l1==l2) return 0;
  return (l1>l2)?1:-1;
}
inline int strlen_lesser(char** a1,char** a2){
  size_t l1 = ::strlen(*a1);
  size_t l2 = ::strlen(*a2);
  if(l1==l2) return 0;
  return (l1<l2)?1:-1;
}

inline bool strlen(std::vector<std::string>& a_text,bool a_increasing = true){
  size_t len = a_text.size();
  if(len<=1) return true;
  typedef char* item;
  item* items = new item[len];
  if(!items) {a_text.clear();return false;}
  // to put back in a_text, we have to duplicate item :
 {for(size_t i=0;i<len;i++) items[i] = str_dup(a_text[i].c_str());}
  if(a_increasing) {
    ::qsort(items,(size_t)len,sizeof(item),(inlib_sort_func_t)strlen_greater);
  } else {
    ::qsort(items,(size_t)len,sizeof(item),(inlib_sort_func_t)strlen_lesser);
  }
 {for(size_t i=0;i<len;i++) {a_text[i] = items[i];str_del(items[i]);}}
  delete [] items;
  return true;
}

template <class T> //T=int, std::string
inline int greater(T** a_1,T** a_2){
  T& a1 = *(*a_1);
  T& a2 = *(*a_2);
  if(a1==a2) return 0;
  return a1>a2?1:-1;
}

template <class T>
inline int lesser(T** a_1,T** a_2){
  T& a1 = *(*a_1);
  T& a2 = *(*a_2);
  if(a1==a2) return 0;
  return a1<a2?1:-1;
}

template <class T>
inline bool sort(std::vector<T>& a_vec,bool a_increasing = true) {
  size_t len = a_vec.size();
  if(len<=1) return true;
  typedef T* item;
  item* items = new item[len];
  if(!items) {a_vec.clear();return false;}
  // to put back in a_vec, we have to duplicate item :
 {for(size_t i=0;i<len;i++) items[i] = new T(a_vec[i]);}
  typedef int(*func_t)(T**,T**);
  if(a_increasing) {
    func_t func = greater<T>;
    ::qsort(items,len,sizeof(item),(inlib_sort_func_t)func);
  } else {
    func_t func = lesser<T>;
    ::qsort(items,len,sizeof(item),(inlib_sort_func_t)func);
  }
 {for(size_t i=0;i<len;i++) {a_vec[i] = *(items[i]);delete items[i];}}
  delete [] items;
  return true;
}

inline void inlib_sort_check_compile() {
 {std::vector<std::string> v;strlen(v);}
 {std::vector<int> v;sort(v);}
 {std::vector<std::string> v;sort(v);}
}

}}

#endif
