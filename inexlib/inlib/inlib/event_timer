// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_event_timer
#define inlib_event_timer

#include "sys/base_timer"
#include "scast"

#ifdef INLIB_MEM
#include "mem"
#endif

namespace inlib {

class event_timer : public base_timer {
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::event_timer");
    return s_v;
  }
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<event_timer>(this,a_class)) return p;
    return 0;
  }
public:
  event_timer(unsigned int a_interval)
  :base_timer(a_interval){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~event_timer(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
  event_timer(const event_timer& a_from)
  :base_timer(a_from){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  event_timer& operator=(const event_timer& a_from){
    base_timer::operator=(a_from);
    return *this;
  }
};

}
  
#endif
