// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

// erf not defined in VisualC++
// Code taken from CERN-ROOT-5.34.00/mathcore/SpecFuncCephes.cxx.

//
//
// gamma and related functions from Cephes library
// see:  http://www.netlib.org/cephes
// 
// Copyright 1985, 1987, 2000 by Stephen L. Moshier
// 
//

#ifndef Pythia8_cephes
#define Pythia8_cephes

#include <cmath>

namespace Pythia8 { 
namespace cephes { 

// calculates a value of a polynomial of the form:
// a[0]x^N+a[1]x^(N-1) + ... + a[N]
inline double polynomial_eval(double x, double* a, unsigned int N) {
   if (N==0) return a[0];
   else
   {
      double pom = a[0];
      for (unsigned int i=1; i <= N; i++)
         pom = pom *x + a[i];
      return pom;
   }
}

// calculates a value of a polynomial of the form:
// x^N+a[0]x^(N-1) + ... + a[N-1]
inline double polynomial_1_eval(double x, double* a, unsigned int N) {
   if (N==0) return a[0];
   else
   {
      double pom = x + a[0];
      for (unsigned int i=1; i < N; i++)
         pom = pom *x + a[i];
      return pom;
   }
}

inline double max_log(){return 709.782712893383973096206318587;}

inline double* erf_P() {
  static double erfP[] = {
   2.46196981473530512524E-10,
   5.64189564831068821977E-1,
   7.46321056442269912687E0,
   4.86371970985681366614E1,
   1.96520832956077098242E2,
   5.26445194995477358631E2,
   9.34528527171957607540E2,
   1.02755188689515710272E3,
   5.57535335369399327526E2
  };
  return erfP;
}

inline double* erf_Q(){
  static double erfQ[] = {
/* 1.00000000000000000000E0,*/
   1.32281951154744992508E1,
   8.67072140885989742329E1,
   3.54937778887819891062E2,
   9.75708501743205489753E2,
   1.82390916687909736289E3,
   2.24633760818710981792E3,
   1.65666309194161350182E3,
   5.57535340817727675546E2
  };
  return erfQ;
}

inline double* erf_R(){
  static double erfR[] = {
   5.64189583547755073984E-1,
   1.27536670759978104416E0,
   5.01905042251180477414E0,
   6.16021097993053585195E0,
   7.40974269950448939160E0,
   2.97886665372100240670E0
  };
  return erfR;
}

inline double* erf_S(){
  static double erfS[] = {
/* 1.00000000000000000000E0,*/
   2.26052863220117276590E0,
   9.39603524938001434673E0,
   1.20489539808096656605E1,
   1.70814450747565897222E1,
   9.60896809063285878198E0,
   3.36907645100081516050E0
  };
  return erfS;
}

inline double* erf_T(){
  static double erfT[] = {
   9.60497373987051638749E0,
   9.00260197203842689217E1,
   2.23200534594684319226E3,
   7.00332514112805075473E3,
   5.55923013010394962768E4
  };
  return erfT;
}

inline double* erf_U(){
  static double erfU[] = {
/* 1.00000000000000000000E0,*/
   3.35617141647503099647E1,
   5.21357949780152679795E2,
   4.59432382970980127987E3,
   2.26290000613890934246E4,
   4.92673942608635921086E4
  };
  return erfU;
}

inline double _erfc( double a ) {
   double p,q,x,y,z;

   if( a < 0.0 )
      x = -a;
   else
      x = a;

   z = -a * a;

   if( z < -max_log() )
   {
   under:
      if( a < 0 )
         return( 2.0 );
      else
         return( 0.0 );
   }

   z = ::exp(z);

   if( x < 8.0 )
   {
      p = polynomial_eval( x, erf_P(), 8 );
      q = polynomial_1_eval( x, erf_Q(), 8 );
   }
   else
   {
      p = polynomial_eval( x, erf_R(), 5 );
      q = polynomial_1_eval( x, erf_S(), 6 );
   }
   y = (z * p)/q;

   if( a < 0 )
      y = 2.0 - y;

   if( y == 0 )
      goto under;

   return(y);
}

inline double _erf( double x) {
   double y, z;
   z = x * x;
   y = x * polynomial_eval( z, erf_T(), 4 ) / polynomial_1_eval(z,erf_U(),5);
   return( y );

}

inline double erf( double x) {
   if( std::abs(x) > 1.0 ) {
     return( 1.0 - _erfc(x) );
   } else {
     return _erf(x);
   }
}

//inline double erfc( double x) {
//   return( 1.0 - erf(x) );
//}

}}

#endif
