// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_Windows_glarea
#define exlib_Windows_glarea

#include <windows.h>
#include <windowsx.h>
#include <wingdi.h>

#include <string>

namespace exlib {
namespace Windows {

class glarea {
  static const std::string& s_class() {
    static const std::string s_v("exlib::Windows::glarea");
    return s_v;
  }
  static void register_class(){
    static bool s_done = false; //not const, then not thread safe.
    if(!s_done) {
      WNDCLASS         wc;
      wc.style         = CS_HREDRAW | CS_VREDRAW;
      wc.lpfnWndProc   = (WNDPROC)proc;
      wc.cbClsExtra    = 0;
      wc.cbWndExtra    = 0;
      wc.hInstance     = ::GetModuleHandle(NULL);
      wc.hIcon         = LoadIcon(NULL,IDI_APPLICATION);
      wc.hCursor       = LoadCursor(NULL,IDC_ARROW);
      wc.hbrBackground = GetSysColorBrush(COLOR_BTNFACE);
      wc.lpszMenuName  = s_class().c_str();
      wc.lpszClassName = s_class().c_str();
      ::RegisterClass(&wc);
      s_done = true;
    }
  }
public:
  virtual void resize(unsigned int,unsigned int){}
  virtual void paint(unsigned int a_w,unsigned int a_h) {}
  virtual void left_button_up(unsigned int a_x,unsigned int a_y) {}
  virtual void left_button_down(unsigned int a_x,unsigned int a_y) {}
  virtual void mouse_move(unsigned int a_x,unsigned int a_y,bool) {}
public:
  glarea(HWND a_parent)
  :m_parent(a_parent)
  ,m_hwnd(0)
  ,m_context(0)
  ,m_HDC(0)
  {
    register_class();
    // The WS_BORDER is needed. Else probleme of size at startup.
    RECT rect;
    ::GetClientRect(m_parent,&rect);
    m_hwnd = ::CreateWindow(s_class().c_str(),
                             NULL,
                             WS_CHILD | WS_VISIBLE,
                             0,0,
                             rect.right-rect.left,
                             rect.bottom-rect.top,
                             m_parent,NULL,
                             GetWindowInstance(m_parent),
                             NULL);
    if(!m_hwnd) return;
    ::SetWindowLongPtr(m_hwnd,GWLP_USERDATA,LONG_PTR(this));
  
    // initialize OpenGL rendering :
    m_HDC = ::GetDC(m_hwnd);
    if(m_HDC && SetWindowPixelFormat(m_HDC) ) {
      m_context = ::wglCreateContext(m_HDC);
    }
  }
  virtual ~glarea(){
    if(::wglGetCurrentContext()!=NULL) ::wglMakeCurrent(NULL,NULL);
    if(m_context)        {
      ::wglDeleteContext(m_context);
      m_context = 0;
    }
    if(m_HDC && m_hwnd) ::ReleaseDC(m_hwnd,m_HDC);
    if(m_hwnd) {
      ::SetWindowLongPtr(m_hwnd,GWLP_USERDATA,LONG_PTR(NULL));
      ::DestroyWindow(m_hwnd);
      m_hwnd = 0;
    }
  }
public:
  glarea(const glarea& a_from)
  :m_parent(a_from.m_parent)
  ,m_hwnd(0)
  ,m_context(0)
  ,m_HDC(0)
  {
    if(!m_parent) return;
    register_class();
    RECT rect;
    ::GetClientRect(m_parent,&rect);
    m_hwnd = ::CreateWindow(s_class().c_str(),
                             NULL,
                             WS_CHILD | WS_VISIBLE,
                             0,0,
                             rect.right-rect.left,
                             rect.bottom-rect.top,
                             m_parent,NULL,
                             GetWindowInstance(m_parent),
                             NULL);
    if(!m_hwnd) return;
    ::SetWindowLongPtr(m_hwnd,GWLP_USERDATA,LONG_PTR(this));
  
    // initialize OpenGL rendering :
    m_HDC = ::GetDC(m_hwnd);
    if(m_HDC && SetWindowPixelFormat(m_HDC) ) {
      m_context = ::wglCreateContext(m_HDC);
    }
  }
protected:
  glarea& operator=(const glarea&){return *this;}
public:
  HWND hwnd() const {return m_hwnd;}
  void post_WM_PAINT() const {
    ::PostMessage(m_hwnd,WM_PAINT,(WPARAM)0,(LPARAM)0);
  }
  void send_WM_PAINT() const {
    ::SendMessage(m_hwnd,WM_PAINT,(WPARAM)0,(LPARAM)0);
  }
  void wm_paint() {
    PAINTSTRUCT ps;
    //HDC hDC =
    BeginPaint(m_hwnd,&ps);
    if(m_HDC && m_context) {
      ::wglMakeCurrent(m_HDC,m_context);

      RECT rect;
      ::GetClientRect(m_hwnd,&rect);
      unsigned int w = rect.right-rect.left;
      unsigned int h = rect.bottom-rect.top;
  
      paint(w,h);
  
      ::SwapBuffers(m_HDC);
      ::wglMakeCurrent(m_HDC,0);
    }
    EndPaint(m_hwnd,&ps);
  }
protected:
  static LRESULT CALLBACK proc(HWND a_hwnd,UINT a_msg,WPARAM a_wparam,LPARAM a_lparam) {
    switch (a_msg) { 
    case WM_SIZE:{
      int width = LOWORD(a_lparam);
      int height = HIWORD(a_lparam);
      glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
      if(_this) {
        _this->resize(width,height);
      } else {
        // CreateWindow send a WM_SIZE but GWLP_USERDATA not yet set.
      }
    }return 0;
    case WM_PAINT:{
      glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
      if(_this) {
        _this->wm_paint();
      }	
    }return 0;
    case WM_LBUTTONDOWN:{
      glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
      if(_this) {
        RECT rect;
        //::GetWindowRect(hwnd,&rect); ???
        ::GetClientRect(a_hwnd,&rect);
        unsigned int h = rect.bottom-rect.top;
        _this->left_button_down(LOWORD(a_lparam),h-HIWORD(a_lparam));
      }
    }return 0;
    case WM_LBUTTONUP:{
      glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
      if(_this) {
        RECT rect;
        ::GetClientRect(a_hwnd,&rect);
        unsigned int h = rect.bottom-rect.top;
        _this->left_button_up(LOWORD(a_lparam),h-HIWORD(a_lparam));
      }
    } return 0;
    case WM_MOUSEMOVE:{
      WPARAM state = a_wparam;
      bool ldown = ((state & MK_LBUTTON)==MK_LBUTTON)?true:false;

      glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
      if(_this) {
        RECT rect;
        ::GetClientRect(a_hwnd,&rect);
        unsigned int h = rect.bottom-rect.top;
        _this->mouse_move(LOWORD(a_lparam),h-HIWORD(a_lparam),ldown);
      }

    }return 0;
    case WM_DESTROY:wm__destroy(a_hwnd);return 0;
    }
    return (DefWindowProc(a_hwnd,a_msg,a_wparam,a_lparam));
  }
  static bool SetWindowPixelFormat(HDC a_HDC){
    PIXELFORMATDESCRIPTOR pfd;
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = 
      PFD_DRAW_TO_WINDOW | 
      PFD_SUPPORT_OPENGL | 
      PFD_DOUBLEBUFFER | 
      PFD_STEREO_DONTCARE;  
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cRedBits = 8;
    pfd.cRedShift = 16;
    pfd.cGreenBits = 8;
    pfd.cGreenShift = 8;
    pfd.cBlueBits = 8;
    pfd.cBlueShift = 0;
    pfd.cAlphaBits = 0;
    pfd.cAlphaShift = 0;
    pfd.cAccumBits = 64;        
    pfd.cAccumRedBits = 16;
    pfd.cAccumGreenBits = 16;
    pfd.cAccumBlueBits = 16;
    pfd.cAccumAlphaBits = 0;
    pfd.cDepthBits = 32;
    pfd.cStencilBits = 8;
    pfd.cAuxBuffers = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    pfd.bReserved = 0;
    pfd.dwLayerMask = 0;
    pfd.dwVisibleMask = 0;
    pfd.dwDamageMask = 0;
    
    int pixelIndex = ::ChoosePixelFormat(a_HDC,&pfd);
    if (pixelIndex==0) {
      // Let's choose a default index.
      pixelIndex = 1;        
      if (::DescribePixelFormat(a_HDC, 
                                pixelIndex, 
                                sizeof(PIXELFORMATDESCRIPTOR), 
                                &pfd)==0) {
        return false;
      }
    }
  
    if (::SetPixelFormat(a_HDC,pixelIndex,&pfd)==FALSE) return false;
  
    return true;
  }
  static void wm__destroy(HWND a_hwnd) { 
    glarea* _this = (glarea*)::GetWindowLongPtr(a_hwnd,GWLP_USERDATA);
    if(_this) { //How to be sure that we have a glarea* ???
      if(_this->m_hwnd!=a_hwnd) {
        //::printf("WinTk::Component::wm_destroy : HWND mismatch !\n");
      }
      _this->m_hwnd = 0;
    }
    ::SetWindowLongPtr(a_hwnd,GWLP_USERDATA,LONG_PTR(NULL));
  }
protected:
  HWND m_parent;
  HWND m_hwnd;
  HGLRC m_context;
  HDC m_HDC;
};

}}

//exlib_build_use Windows

#endif
