// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_uzres
#define exlib_uzres

#include <inlib/system>
#include <inlib/dirmanip>
#include <inlib/sys/file>

#include "unzip"

namespace exlib {

inline bool unfold_res_file_tmp(std::ostream& a_out,
                       const std::string& a_env,
                       const std::string& a_app,
                       const std::string& a_file,
                       const std::string& a_expected_dir, //relative
                       const std::string& a_data_dir,
                       const std::string& a_tmp_dir,
                       std::vector<std::string>& a_tmp_dirs) {
 {std::string env;
  if(inlib::get_env(a_env,env)) {
    bool is_dir;
    inlib::dir::is_a(env,is_dir);
    if(!is_dir) {
      a_out << "exlib::unfold_res_file_tmp :"
            << " env variable " << inlib::sout(a_env) << " exists, but value " << inlib::sout(env)
	    << " points to an invalid directory." << std::endl;
    }
    return false;
  }}

 {bool is_dir;
  std::string in_data_dir = a_data_dir+inlib::sep()+a_expected_dir;
  inlib::dir::is_a(in_data_dir,is_dir);
  if(is_dir) {
    //user had already installed one in the app data dir.
    if(!inlib::put_env(a_env,in_data_dir)) {
      a_out << "exlib::unfold_res_file_tmp : putenv of " << a_env << " failed." << std::endl;
      return false;
    }
    return true;
  }}
  
  std::string _tmp_dir;
  if(!inlib::tmpname(a_tmp_dir,a_app,"",_tmp_dir)) {
    a_out << "exlib::unfold_res_file_tmp : can't get a tmpname." << std::endl;
    return false;
  }

  if(!inlib::mkdirs_from(a_out,a_tmp_dir,inlib::base_name(_tmp_dir))){
    a_out << "exlib::unfold_res_file_tmp : mkdirs_from failed." << std::endl;
    return false;
  }

  a_tmp_dirs.push_back(_tmp_dir);

  std::string env_path = _tmp_dir+inlib::sep()+a_expected_dir;
  if(!exlib::unzip_from(a_out,_tmp_dir,a_file,env_path)) {
    a_out << "exlib::unfold_res_file_tmp : unzip_from failed." << std::endl;
    return false;
  }

  if(!inlib::put_env(a_env,env_path)) {
    a_out << "exlib::unfold_res_file_tmp : putenv of " << a_env << " failed." << std::endl;
    return false;
  }
  
  return true;
}

inline bool unfold_res_file_iOS(std::ostream& a_out,
                           const std::string& a_env,
                           const std::string& a_file,
                           const std::string& a_expected_dir, //relative
                           const std::string& a_data_dir,
                           const std::string& a_tmp_dir) {
  if(inlib::is_env(a_env)) return true;

 {bool is_dir;
  std::string in_data_dir = a_data_dir+inlib::sep()+a_expected_dir;
  inlib::dir::is_a(in_data_dir,is_dir);
  if(is_dir) {
    //user had already installed one in the app data dir.
    if(!inlib::put_env(a_env,in_data_dir)) {
      a_out << "exlib::unfold_res_file_iOS : putenv of " << a_env << " failed." << std::endl;
      return false;
    }
    return true;
  }}
  
 {bool is_dir;
  std::string in_tmp_dir = a_tmp_dir+inlib::sep()+a_expected_dir;
  inlib::dir::is_a(in_tmp_dir,is_dir);
  if(is_dir) {
    //one already exists in the tmp dir.
    if(!inlib::put_env(a_env,in_tmp_dir)) {
      a_out << "exlib::unfold_res_file_iOS : putenv of " << a_env << " failed." << std::endl;
      return false;
    }
    return true;
  }}

  std::string env_path = a_tmp_dir+inlib::sep()+a_expected_dir;

  if(!exlib::unzip_from(a_out,a_tmp_dir,a_file,env_path)) {
    a_out << "exlib::unfold_res_file_iOS : unzip_from failed." << std::endl;
    return false;
  }

  if(!inlib::put_env(a_env,env_path)) {
    a_out << "exlib::unfold_res_file_iOS :"
                  << " putenv of " << a_env << " failed."
                  << std::endl;
    return false;
  }
  
  return true;
}

}

#include <inlib/platform>

namespace exlib {

// for our g4 apps :
inline bool unfold(std::ostream& a_out,
                   const std::string& a_data_dir,
                   const std::string& a_res_dir,
                   const std::string& a_tmp_dir,
                   std::vector<std::string>& a_tmp_dirs,
                   const std::string& a_zip,const std::string& a_env,const std::string& a_tmp_prefix,const std::string& a_dir) {
  // The AppleStore does not want more than 6 Mbytes in Documents dir
  // coming from the app then we unfold res file in /tmp.
  std::string file = a_res_dir;
  file += inlib::sep();    
  file += a_zip;
  if(inlib::device::is_iOS()){
    // no way to cleanup tmp file at exit (because we can't be warned
    // when the app is killed), then we store in app tmp dir but as
    // if done permanently.
    return unfold_res_file_iOS(a_out,a_env,file,a_dir,a_data_dir,a_tmp_dir);
  } else {
    return unfold_res_file_tmp(a_out,a_env,a_tmp_prefix,file,a_dir,a_data_dir,a_tmp_dir,a_tmp_dirs);
  }
}

}

//exlib_build_use inlib zip zlib

#endif
