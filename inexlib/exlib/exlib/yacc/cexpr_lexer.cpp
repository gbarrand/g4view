
#line 3 "lex.cexpr_lexer_.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#if defined(_MSC_VER) && _MSC_VER >= 1900
#include <stdint.h> /*G.Barrand : Windows : rm warnings about UINT8_MAX, etc... already defined.*/
#endif

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define cexpr_lexer_const const
#else
#define cexpr_lexer_const
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (cexpr_lexer__start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((cexpr_lexer__start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cexpr_lexer_restart(cexpr_lexer_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(cexpr_lexer__state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct cexpr_lexer__buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t cexpr_lexer__size_t;
#endif

extern cexpr_lexer__size_t cexpr_lexer_leng;

extern FILE *cexpr_lexer_in, *cexpr_lexer_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define cexpr_lexer_less(n) \
	do \
		{ \
		/* Undo effects of setting up cexpr_lexer_text. */ \
        int cexpr_lexer_less_macro_arg = (n); \
        YY_LESS_LINENO(cexpr_lexer_less_macro_arg);\
		*cexpr_lexer__cp = (cexpr_lexer__hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(cexpr_lexer__c_buf_p) = cexpr_lexer__cp = cexpr_lexer__bp + cexpr_lexer_less_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cexpr_lexer_text again */ \
		} \
	while ( 0 )

#define unput(c) cexpr_lexer_unput( c, (cexpr_lexer_text_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct cexpr_lexer__buffer_state
	{
	FILE *cexpr_lexer__input_file;

	char *cexpr_lexer__ch_buf;		/* input buffer */
	char *cexpr_lexer__buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	cexpr_lexer__size_t cexpr_lexer__buf_size;

	/* Number of characters read into cexpr_lexer__ch_buf, not including EOB
	 * characters.
	 */
	cexpr_lexer__size_t cexpr_lexer__n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int cexpr_lexer__is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int cexpr_lexer__is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int cexpr_lexer__at_bol;

    int cexpr_lexer__bs_lineno; /**< The line count. */
    int cexpr_lexer__bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int cexpr_lexer__fill_buffer;

	int cexpr_lexer__buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cexpr_lexer_restart()), so that the user can continue scanning by
	 * just pointing cexpr_lexer_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t cexpr_lexer__buffer_stack_top = 0; /**< index of top of stack. */
static size_t cexpr_lexer__buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * cexpr_lexer__buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (cexpr_lexer__buffer_stack) \
                          ? (cexpr_lexer__buffer_stack)[(cexpr_lexer__buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (cexpr_lexer__buffer_stack)[(cexpr_lexer__buffer_stack_top)]

/* cexpr_lexer__hold_char holds the character lost when cexpr_lexer_text is formed. */
static char cexpr_lexer__hold_char;
static cexpr_lexer__size_t cexpr_lexer__n_chars;		/* number of characters read into cexpr_lexer__ch_buf */
cexpr_lexer__size_t cexpr_lexer_leng;

/* Points to current character in buffer. */
static char *cexpr_lexer__c_buf_p = (char *) 0;
static int cexpr_lexer__init = 0;		/* whether we need to initialize */
static int cexpr_lexer__start = 0;	/* start state number */

/* Flag which is used to allow cexpr_lexer_wrap()'s to do buffer switches
 * instead of setting up a fresh cexpr_lexer_in.  A bit of a hack ...
 */
static int cexpr_lexer__did_buffer_switch_on_eof;

void cexpr_lexer_restart (FILE *input_file  );
void cexpr_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cexpr_lexer__create_buffer (FILE *file,int size  );
void cexpr_lexer__delete_buffer (YY_BUFFER_STATE b  );
void cexpr_lexer__flush_buffer (YY_BUFFER_STATE b  );
void cexpr_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void cexpr_lexer_pop_buffer_state (void );

static void cexpr_lexer_ensure_buffer_stack (void );
static void cexpr_lexer__load_buffer_state (void );
static void cexpr_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cexpr_lexer__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cexpr_lexer__scan_buffer (char *base,cexpr_lexer__size_t size  );
YY_BUFFER_STATE cexpr_lexer__scan_string (cexpr_lexer_const char *cexpr_lexer__str  );
YY_BUFFER_STATE cexpr_lexer__scan_bytes (cexpr_lexer_const char *bytes,cexpr_lexer__size_t len  );

void *cexpr_lexer_alloc (cexpr_lexer__size_t  );
void *cexpr_lexer_realloc (void *,cexpr_lexer__size_t  );
void cexpr_lexer_free (void *  );

#define cexpr_lexer__new_buffer cexpr_lexer__create_buffer

#define cexpr_lexer__set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cexpr_lexer_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cexpr_lexer__create_buffer(cexpr_lexer_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__is_interactive = is_interactive; \
	}

#define cexpr_lexer__set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cexpr_lexer_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cexpr_lexer__create_buffer(cexpr_lexer_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cexpr_lexer_in = (FILE *) 0, *cexpr_lexer_out = (FILE *) 0;

typedef int cexpr_lexer__state_type;

extern int cexpr_lexer_lineno;

int cexpr_lexer_lineno = 1;

extern char *cexpr_lexer_text;
#define cexpr_lexer_text_ptr cexpr_lexer_text

static cexpr_lexer__state_type cexpr_lexer__get_previous_state (void );
static cexpr_lexer__state_type cexpr_lexer__try_NUL_trans (cexpr_lexer__state_type current_state  );
//static int cexpr_lexer__get_next_buffer (void );
static void cexpr_lexer__fatal_error (cexpr_lexer_const char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cexpr_lexer_text.
 */
#define YY_DO_BEFORE_ACTION \
	(cexpr_lexer_text_ptr) = cexpr_lexer__bp; \
	cexpr_lexer_leng = (size_t) (cexpr_lexer__cp - cexpr_lexer__bp); \
	(cexpr_lexer__hold_char) = *cexpr_lexer__cp; \
	*cexpr_lexer__cp = '\0'; \
	(cexpr_lexer__c_buf_p) = cexpr_lexer__cp;

#define YY_NUM_RULES 11
#define YY_END_OF_BUFFER 12
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct cexpr_lexer__trans_info
	{
	flex_int32_t cexpr_lexer__verify;
	flex_int32_t cexpr_lexer__nxt;
	};
static cexpr_lexer_const flex_int16_t cexpr_lexer__accept[44] =
    {   0,
        0,    0,   12,   10,    1,   11,   10,   10,   10,    3,
        3,    8,    8,    8,    8,    1,    0,    9,    0,    4,
        4,    3,    0,    0,    8,    8,    8,    8,    0,    4,
        0,    3,    2,    8,    8,    8,    0,    4,    5,    8,
        6,    7,    0
    } ;

static cexpr_lexer_const flex_int32_t cexpr_lexer__ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    1,
        1,    1,    6,    1,    7,    8,    1,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1,    1,    1,    1,   11,   11,   11,   11,   12,   11,
       13,   13,   14,   13,   13,   13,   15,   13,   13,   16,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,    1,    1,    1,   17,    1,   18,   11,   11,   11,

       19,   20,   13,   13,   13,   13,   13,   21,   13,   13,
       13,   13,   13,   22,   23,   24,   25,   13,   13,   26,
       13,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static cexpr_lexer_const flex_int32_t cexpr_lexer__meta[27] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    3,    3,    3,
        4,    4,    4,    4,    4,    4
    } ;

static cexpr_lexer_const flex_int16_t cexpr_lexer__base[48] =
    {   0,
        0,    0,   82,   83,   79,   83,   76,   74,   18,   21,
       52,    0,   60,   58,   53,   72,   65,   83,   60,   39,
       25,    0,   32,    0,    0,   45,   36,   31,   53,    0,
       27,   34,    0,   41,   31,   31,   36,   43,    0,   20,
        0,    0,   83,   63,   67,   69,   29
    } ;

static cexpr_lexer_const flex_int16_t cexpr_lexer__def[48] =
    {   0,
       43,    1,   43,   43,   43,   43,   44,   45,   43,   43,
       10,   46,   46,   46,   46,   43,   44,   43,   45,   43,
       20,   11,   43,   47,   46,   46,   46,   46,   43,   21,
       43,   43,   47,   46,   46,   46,   43,   43,   46,   46,
       46,   46,    0,   43,   43,   43,   43
    } ;

static cexpr_lexer_const flex_int16_t cexpr_lexer__nxt[110] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,   10,   11,
       12,   12,   12,   12,   13,   12,   12,   12,   12,   14,
       12,   12,   12,   15,   12,   12,   20,   20,   21,   22,
       22,   33,   23,   30,   30,   32,   32,   31,   42,   23,
       32,   32,   32,   32,   38,   38,   24,   20,   20,   41,
       29,   38,   38,   40,   39,   36,   35,   29,   37,   37,
       34,   38,   38,   17,   18,   17,   17,   19,   18,   19,
       19,   25,   25,   16,   28,   27,   26,   43,   18,   18,
       16,   43,    3,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43
    } ;

static cexpr_lexer_const flex_int16_t cexpr_lexer__chk[110] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    9,   10,   10,
       10,   47,   10,   21,   21,   31,   31,   23,   40,   10,
       23,   23,   32,   32,   37,   37,   10,   20,   20,   36,
       20,   38,   38,   35,   34,   28,   27,   20,   29,   29,
       26,   29,   29,   44,   19,   44,   44,   45,   17,   45,
       45,   46,   46,   16,   15,   14,   13,   11,    8,    7,
        5,    3,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43
    } ;

static cexpr_lexer__state_type cexpr_lexer__last_accepting_state;
static char *cexpr_lexer__last_accepting_cpos;

extern int cexpr_lexer__flex_debug;
int cexpr_lexer__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define cexpr_lexer_more() cexpr_lexer_more_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cexpr_lexer_text;
#line 1 "../exlib/yacc/cexpr_lexer.l"
#line 2 "../exlib/yacc/cexpr_lexer.l"

#include "cexpr_lexer.h"

#include "cexpr_tokens"

#include <inlib/sout>
#include <inlib/sto>
#include <inlib/mathT>

#include <cstring>

//#define DEBUG

#ifdef _MSC_VER
#include <io.h>
#define isatty _isatty
#else
#include <unistd.h> //isatty
#endif

static  int cexpr_lexer__get_next_buffer(exlib::yacc::cexpr_lexer&);

extern int cexpr_lexer_lex(exlib::yacc::cexpr_lexer&);

#define YY_DECL int cexpr_lexer_lex(exlib::yacc::cexpr_lexer& aLexer)

#define _UNISTD_H_
#define YY_NEVER_INTERACTIVE 1

#undef YY_INPUT
#define YY_INPUT(aBuffer,aResult,aMaxSize) (aResult=aLexer.input(aBuffer,aMaxSize)) 

#define YY_NO_INPUT

#define NotFound (-1)

/* signus handled in by the parser :
number [-+]?([0-9]+|(([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+))([eE][-+]?[0-9]+)?)
integer [0-9]+
*/
/* should be put (if any) below the below T_FALSE.
_or_ return T_OR;
_and_ return T_AND;
_gt_ return T_GT;
_ge_ return T_GE;
_lt_ return T_LT;
_le_ return T_LE;
_eq_ return T_EQ;
_ne_ return T_NE;
*/
#line 537 "lex.cexpr_lexer_.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */

#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int cexpr_lexer__init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cexpr_lexer_lex_destroy (void );

int cexpr_lexer_get_debug (void );

void cexpr_lexer_set_debug (int debug_flag  );

YY_EXTRA_TYPE cexpr_lexer_get_extra (void );

void cexpr_lexer_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *cexpr_lexer_get_in (void );

void cexpr_lexer_set_in  (FILE * in_str  );

FILE *cexpr_lexer_get_out (void );

void cexpr_lexer_set_out  (FILE * out_str  );

cexpr_lexer__size_t cexpr_lexer_get_leng (void );

char *cexpr_lexer_get_text (void );

int cexpr_lexer_get_lineno (void );

void cexpr_lexer_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cexpr_lexer_wrap (void );
#else
extern int cexpr_lexer_wrap (void );
#endif
#endif

    static void cexpr_lexer_unput (int c,char *buf_ptr  );
    
#ifndef cexpr_lexer_text_ptr
static void cexpr_lexer__flex_strncpy (char *,cexpr_lexer_const char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int cexpr_lexer__flex_strlen (cexpr_lexer_const char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int cexpr_lexer_input (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( cexpr_lexer_text, cexpr_lexer_leng, 1, cexpr_lexer_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__is_interactive ) \
		{ \
		int c = '*'; \
		cexpr_lexer__size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cexpr_lexer_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cexpr_lexer_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cexpr_lexer_in))==0 && ferror(cexpr_lexer_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cexpr_lexer_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "cexpr_lexer_terminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef cexpr_lexer_terminate
#define cexpr_lexer_terminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) cexpr_lexer__fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cexpr_lexer_lex (void);

#define YY_DECL int cexpr_lexer_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cexpr_lexer_text and cexpr_lexer_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	/*GB register*/ cexpr_lexer__state_type cexpr_lexer__current_state;
	/*GB register*/ char *cexpr_lexer__cp, *cexpr_lexer__bp;
	/*GB register*/ int cexpr_lexer__act;
    
#line 62 "../exlib/yacc/cexpr_lexer.l"



#line 723 "lex.cexpr_lexer_.c"

	if ( !(cexpr_lexer__init) )
		{
		(cexpr_lexer__init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (cexpr_lexer__start) )
			(cexpr_lexer__start) = 1;	/* first start state */

		if ( ! cexpr_lexer_in )
			cexpr_lexer_in = stdin;

		if ( ! cexpr_lexer_out )
			cexpr_lexer_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cexpr_lexer_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cexpr_lexer__create_buffer(cexpr_lexer_in,YY_BUF_SIZE );
		}

		cexpr_lexer__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		cexpr_lexer__cp = (cexpr_lexer__c_buf_p);

		/* Support of cexpr_lexer_text. */
		*cexpr_lexer__cp = (cexpr_lexer__hold_char);

		/* cexpr_lexer__bp points to the position in cexpr_lexer__ch_buf of the start of
		 * the current run.
		 */
		cexpr_lexer__bp = cexpr_lexer__cp;

		cexpr_lexer__current_state = (cexpr_lexer__start);
cexpr_lexer__match:
		do
			{
			/*GB register*/ YY_CHAR cexpr_lexer__c = cexpr_lexer__ec[YY_SC_TO_UI(*cexpr_lexer__cp)];
			if ( cexpr_lexer__accept[cexpr_lexer__current_state] )
				{
				(cexpr_lexer__last_accepting_state) = cexpr_lexer__current_state;
				(cexpr_lexer__last_accepting_cpos) = cexpr_lexer__cp;
				}
			while ( cexpr_lexer__chk[cexpr_lexer__base[cexpr_lexer__current_state] + cexpr_lexer__c] != cexpr_lexer__current_state )
				{
				cexpr_lexer__current_state = (int) cexpr_lexer__def[cexpr_lexer__current_state];
				if ( cexpr_lexer__current_state >= 44 )
					cexpr_lexer__c = cexpr_lexer__meta[(unsigned int) cexpr_lexer__c];
				}
			cexpr_lexer__current_state = cexpr_lexer__nxt[cexpr_lexer__base[cexpr_lexer__current_state] + (unsigned int) cexpr_lexer__c];
			++cexpr_lexer__cp;
			}
		while ( cexpr_lexer__base[cexpr_lexer__current_state] != 83 );

cexpr_lexer__find_action:
		cexpr_lexer__act = cexpr_lexer__accept[cexpr_lexer__current_state];
		if ( cexpr_lexer__act == 0 )
			{ /* have to back up */
			cexpr_lexer__cp = (cexpr_lexer__last_accepting_cpos);
			cexpr_lexer__current_state = (cexpr_lexer__last_accepting_state);
			cexpr_lexer__act = cexpr_lexer__accept[cexpr_lexer__current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( cexpr_lexer__act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*cexpr_lexer__cp = (cexpr_lexer__hold_char);
			cexpr_lexer__cp = (cexpr_lexer__last_accepting_cpos);
			cexpr_lexer__current_state = (cexpr_lexer__last_accepting_state);
			goto cexpr_lexer__find_action;

case 1:
YY_RULE_SETUP
#line 65 "../exlib/yacc/cexpr_lexer.l"
/* ignore whitespace */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "../exlib/yacc/cexpr_lexer.l"
{ 
#ifdef DEBUG
  aLexer.out() << "debug : Lexer.l : integer :" << cexpr_lexer_text << "|" << std::endl;
#endif
  unsigned int i;
  if(sscanf(cexpr_lexer_text,"0x%x",&i)!=1) {
    aLexer.out() << "exlib::yacc::cexpr_lexer :"
        << " problem converting " << inlib::sout(cexpr_lexer_text) 
        << " to unsigned int."
        << std::endl;
    cexpr_eval_lval.m_integer = 0;
  } else {
    cexpr_eval_lval.m_integer = i;
  }
  return NUMBER_INTEGER;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "../exlib/yacc/cexpr_lexer.l"
{ 
#ifdef DEBUG
  aLexer.out() << "debug : Lexer.l : integer :" << cexpr_lexer_text << "|" << std::endl;
#endif
  unsigned int i,j;
  if( (sscanf(cexpr_lexer_text,"%ue%u",&i,&j)==2)  ||
      (sscanf(cexpr_lexer_text,"%ue+%u",&i,&j)==2) ||
      (sscanf(cexpr_lexer_text,"%uE%u",&i,&j)==2)  ||
      (sscanf(cexpr_lexer_text,"%uE+%u",&i,&j)==2) ){
    typedef unsigned int uint_t;
    uint_t pow_10_j;
    inlib::power<uint_t,uint_t>(10,j,pow_10_j);
    cexpr_eval_lval.m_integer = i * pow_10_j;
  } else if(sscanf(cexpr_lexer_text,"%u",&i)==1) {
    cexpr_eval_lval.m_integer = i;
  } else {
    aLexer.out() << "exlib::yacc::cexpr_lexer :"
        << " problem converting " << inlib::sout(cexpr_lexer_text) 
        << " to long."
        << std::endl;
    cexpr_eval_lval.m_integer = 0;
  }
  return NUMBER_INTEGER;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 107 "../exlib/yacc/cexpr_lexer.l"
{
#ifdef DEBUG
  aLexer.out() << "debug : Lexer.l : number :" << cexpr_lexer_text << "|" << std::endl;
#endif
  if(!inlib::to<double>(cexpr_lexer_text,cexpr_eval_lval.m_number)) {
    aLexer.out() << "exlib::yacc::cexpr_lexer :"
        << " problem converting " << inlib::sout(cexpr_lexer_text) 
        << " to double."
        << std::endl;
    cexpr_eval_lval.m_number = 0.;
  }
  return NUMBER_REAL;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "../exlib/yacc/cexpr_lexer.l"
return T_PI;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 123 "../exlib/yacc/cexpr_lexer.l"
return T_TRUE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "../exlib/yacc/cexpr_lexer.l"
return T_FALSE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "../exlib/yacc/cexpr_lexer.l"
{
#ifdef DEBUG
  aLexer.out() << "debug : Lexer.l : name :" << cexpr_lexer_text << "|" << std::endl;
#endif
  aLexer.variables().push_back(cexpr_lexer_text);
  cexpr_eval_lval.m_index = (unsigned int)(aLexer.variables().size()-1);
  return T_NAME;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 135 "../exlib/yacc/cexpr_lexer.l"
{
#ifdef DEBUG
  aLexer.out() << "debug : Lexer.l : string :" << cexpr_lexer_text << "|" << std::endl;
#endif
  // Remove leading and trailing double quote :
  // "abcd"
  // 012345
  std::string s = cexpr_lexer_text;
  aLexer.variables().push_back(s.substr(1,s.length()-2)); 
  cexpr_eval_lval.m_index = (unsigned int)(aLexer.variables().size()-1);
  return STRG;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "../exlib/yacc/cexpr_lexer.l"
return cexpr_lexer_text[0];
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 151 "../exlib/yacc/cexpr_lexer.l"
ECHO;
	YY_BREAK
#line 928 "lex.cexpr_lexer_.c"
case YY_STATE_EOF(INITIAL):
	cexpr_lexer_terminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int cexpr_lexer__amount_of_matched_text = (int) (cexpr_lexer__cp - (cexpr_lexer_text_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*cexpr_lexer__cp = (cexpr_lexer__hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cexpr_lexer_in at a new source and called
			 * cexpr_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(cexpr_lexer__n_chars) = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars;
			YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__input_file = cexpr_lexer_in;
			YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for cexpr_lexer__c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since cexpr_lexer__c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (cexpr_lexer__c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars)] )
			{ /* This was really a NUL. */
			cexpr_lexer__state_type cexpr_lexer__next_state;

			(cexpr_lexer__c_buf_p) = (cexpr_lexer_text_ptr) + cexpr_lexer__amount_of_matched_text;

			cexpr_lexer__current_state = cexpr_lexer__get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * cexpr_lexer__get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			cexpr_lexer__next_state = cexpr_lexer__try_NUL_trans( cexpr_lexer__current_state );

			cexpr_lexer__bp = (cexpr_lexer_text_ptr) + YY_MORE_ADJ;

			if ( cexpr_lexer__next_state )
				{
				/* Consume the NUL. */
				cexpr_lexer__cp = ++(cexpr_lexer__c_buf_p);
				cexpr_lexer__current_state = cexpr_lexer__next_state;
				goto cexpr_lexer__match;
				}

			else
				{
				cexpr_lexer__cp = (cexpr_lexer__c_buf_p);
				goto cexpr_lexer__find_action;
				}
			}

		else switch ( cexpr_lexer__get_next_buffer(aLexer) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(cexpr_lexer__did_buffer_switch_on_eof) = 0;

				if ( cexpr_lexer_wrap( ) )
					{
					/* Note: because we've taken care in
					 * cexpr_lexer__get_next_buffer() to have set up
					 * cexpr_lexer_text, we can now set up
					 * cexpr_lexer__c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(cexpr_lexer__c_buf_p) = (cexpr_lexer_text_ptr) + YY_MORE_ADJ;

					cexpr_lexer__act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (cexpr_lexer__did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(cexpr_lexer__c_buf_p) =
					(cexpr_lexer_text_ptr) + cexpr_lexer__amount_of_matched_text;

				cexpr_lexer__current_state = cexpr_lexer__get_previous_state(  );

				cexpr_lexer__cp = (cexpr_lexer__c_buf_p);
				cexpr_lexer__bp = (cexpr_lexer_text_ptr) + YY_MORE_ADJ;
				goto cexpr_lexer__match;

			case EOB_ACT_LAST_MATCH:
				(cexpr_lexer__c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars)];

				cexpr_lexer__current_state = cexpr_lexer__get_previous_state(  );

				cexpr_lexer__cp = (cexpr_lexer__c_buf_p);
				cexpr_lexer__bp = (cexpr_lexer_text_ptr) + YY_MORE_ADJ;
				goto cexpr_lexer__find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cexpr_lexer_lex */

/* cexpr_lexer__get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int cexpr_lexer__get_next_buffer(exlib::yacc::cexpr_lexer& aLexer)
{
    	/*GB register*/ char *dest = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf;
	/*GB register*/ char *source = (cexpr_lexer_text_ptr);
	/*GB register*/ int number_to_move, i;
	int ret_val;

	if ( (cexpr_lexer__c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (cexpr_lexer__c_buf_p) - (cexpr_lexer_text_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((cexpr_lexer__c_buf_p) - (cexpr_lexer_text_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars = (cexpr_lexer__n_chars) = 0;

	else
		{
			cexpr_lexer__size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int cexpr_lexer__c_buf_p_offset =
				(int) ((cexpr_lexer__c_buf_p) - b->cexpr_lexer__ch_buf);

			if ( b->cexpr_lexer__is_our_buffer )
				{
				cexpr_lexer__size_t new_size = b->cexpr_lexer__buf_size * 2;

				if ( new_size <= 0 )
					b->cexpr_lexer__buf_size += b->cexpr_lexer__buf_size / 8;
				else
					b->cexpr_lexer__buf_size *= 2;

				b->cexpr_lexer__ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cexpr_lexer_realloc((void *) b->cexpr_lexer__ch_buf,b->cexpr_lexer__buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->cexpr_lexer__ch_buf = 0;

			if ( ! b->cexpr_lexer__ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(cexpr_lexer__c_buf_p) = &b->cexpr_lexer__ch_buf[cexpr_lexer__c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[number_to_move]),
			(cexpr_lexer__n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars = (cexpr_lexer__n_chars);
		}

	if ( (cexpr_lexer__n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cexpr_lexer_restart(cexpr_lexer_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((cexpr_lexer__size_t) ((cexpr_lexer__n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		cexpr_lexer__size_t new_size = (cexpr_lexer__n_chars) + number_to_move + ((cexpr_lexer__n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf = (char *) cexpr_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer__get_next_buffer()" );
	}

	(cexpr_lexer__n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(cexpr_lexer_text_ptr) = &YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[0];

	return ret_val;
}

/* cexpr_lexer__get_previous_state - get the state just before the EOB char was reached */

    static cexpr_lexer__state_type cexpr_lexer__get_previous_state (void)
{
	/*GB register*/ cexpr_lexer__state_type cexpr_lexer__current_state;
	/*GB register*/ char *cexpr_lexer__cp;
    
	cexpr_lexer__current_state = (cexpr_lexer__start);

	for ( cexpr_lexer__cp = (cexpr_lexer_text_ptr) + YY_MORE_ADJ; cexpr_lexer__cp < (cexpr_lexer__c_buf_p); ++cexpr_lexer__cp )
		{
		/*GB register*/ YY_CHAR cexpr_lexer__c = (*cexpr_lexer__cp ? cexpr_lexer__ec[YY_SC_TO_UI(*cexpr_lexer__cp)] : 1);
		if ( cexpr_lexer__accept[cexpr_lexer__current_state] )
			{
			(cexpr_lexer__last_accepting_state) = cexpr_lexer__current_state;
			(cexpr_lexer__last_accepting_cpos) = cexpr_lexer__cp;
			}
		while ( cexpr_lexer__chk[cexpr_lexer__base[cexpr_lexer__current_state] + cexpr_lexer__c] != cexpr_lexer__current_state )
			{
			cexpr_lexer__current_state = (int) cexpr_lexer__def[cexpr_lexer__current_state];
			if ( cexpr_lexer__current_state >= 44 )
				cexpr_lexer__c = cexpr_lexer__meta[(unsigned int) cexpr_lexer__c];
			}
		cexpr_lexer__current_state = cexpr_lexer__nxt[cexpr_lexer__base[cexpr_lexer__current_state] + (unsigned int) cexpr_lexer__c];
		}

	return cexpr_lexer__current_state;
}

/* cexpr_lexer__try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = cexpr_lexer__try_NUL_trans( current_state );
 */
    static cexpr_lexer__state_type cexpr_lexer__try_NUL_trans  (cexpr_lexer__state_type cexpr_lexer__current_state )
{
	/*GB register*/ int cexpr_lexer__is_jam;
    	/*GB register*/ char *cexpr_lexer__cp = (cexpr_lexer__c_buf_p);

	/*GB register*/ YY_CHAR cexpr_lexer__c = 1;
	if ( cexpr_lexer__accept[cexpr_lexer__current_state] )
		{
		(cexpr_lexer__last_accepting_state) = cexpr_lexer__current_state;
		(cexpr_lexer__last_accepting_cpos) = cexpr_lexer__cp;
		}
	while ( cexpr_lexer__chk[cexpr_lexer__base[cexpr_lexer__current_state] + cexpr_lexer__c] != cexpr_lexer__current_state )
		{
		cexpr_lexer__current_state = (int) cexpr_lexer__def[cexpr_lexer__current_state];
		if ( cexpr_lexer__current_state >= 44 )
			cexpr_lexer__c = cexpr_lexer__meta[(unsigned int) cexpr_lexer__c];
		}
	cexpr_lexer__current_state = cexpr_lexer__nxt[cexpr_lexer__base[cexpr_lexer__current_state] + (unsigned int) cexpr_lexer__c];
	cexpr_lexer__is_jam = (cexpr_lexer__current_state == 43);

	return cexpr_lexer__is_jam ? 0 : cexpr_lexer__current_state;
}

    static void cexpr_lexer_unput (int c, /*GB register*/ char * cexpr_lexer__bp )
{
	/*GB register*/ char *cexpr_lexer__cp;
    
    cexpr_lexer__cp = (cexpr_lexer__c_buf_p);

	/* undo effects of setting up cexpr_lexer_text */
	*cexpr_lexer__cp = (cexpr_lexer__hold_char);

	if ( cexpr_lexer__cp < YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		/*GB register*/ cexpr_lexer__size_t number_to_move = (cexpr_lexer__n_chars) + 2;
		/*GB register*/ char *dest = &YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[
					YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_size + 2];
		/*GB register*/ char *source =
				&YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf )
			*--dest = *--source;

		cexpr_lexer__cp += (int) (dest - source);
		cexpr_lexer__bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars =
			(cexpr_lexer__n_chars) = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_size;

		if ( cexpr_lexer__cp < YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--cexpr_lexer__cp = (char) c;

	(cexpr_lexer_text_ptr) = cexpr_lexer__bp;
	(cexpr_lexer__hold_char) = *cexpr_lexer__cp;
	(cexpr_lexer__c_buf_p) = cexpr_lexer__cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int cexpr_lexer_input (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(cexpr_lexer__c_buf_p) = (cexpr_lexer__hold_char);

	if ( *(cexpr_lexer__c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* cexpr_lexer__c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (cexpr_lexer__c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__ch_buf[(cexpr_lexer__n_chars)] )
			/* This was really a NUL. */
			*(cexpr_lexer__c_buf_p) = '\0';

		else
			{ /* need more input */
			cexpr_lexer__size_t offset = (cexpr_lexer__c_buf_p) - (cexpr_lexer_text_ptr);
			++(cexpr_lexer__c_buf_p);

			switch ( cexpr_lexer__get_next_buffer(aLexer) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because cexpr_lexer__g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cexpr_lexer_restart(cexpr_lexer_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cexpr_lexer_wrap( ) )
						return 0;

					if ( ! (cexpr_lexer__did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return cexpr_lexer_input();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(cexpr_lexer__c_buf_p) = (cexpr_lexer_text_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (cexpr_lexer__c_buf_p);	/* cast for 8-bit char's */
	*(cexpr_lexer__c_buf_p) = '\0';	/* preserve cexpr_lexer_text */
	(cexpr_lexer__hold_char) = *++(cexpr_lexer__c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cexpr_lexer_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cexpr_lexer_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cexpr_lexer__create_buffer(cexpr_lexer_in,YY_BUF_SIZE );
	}

	cexpr_lexer__init_buffer(YY_CURRENT_BUFFER,input_file );
	cexpr_lexer__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cexpr_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cexpr_lexer_pop_buffer_state();
	 *		cexpr_lexer_push_buffer_state(new_buffer);
     */
	cexpr_lexer_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(cexpr_lexer__c_buf_p) = (cexpr_lexer__hold_char);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_pos = (cexpr_lexer__c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars = (cexpr_lexer__n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cexpr_lexer__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cexpr_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after cexpr_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(cexpr_lexer__did_buffer_switch_on_eof) = 1;
}

static void cexpr_lexer__load_buffer_state  (void)
{
    	(cexpr_lexer__n_chars) = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars;
	(cexpr_lexer_text_ptr) = (cexpr_lexer__c_buf_p) = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_pos;
	cexpr_lexer_in = YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__input_file;
	(cexpr_lexer__hold_char) = *(cexpr_lexer__c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cexpr_lexer__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cexpr_lexer_alloc(sizeof( struct cexpr_lexer__buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer__create_buffer()" );

	b->cexpr_lexer__buf_size = size;

	/* cexpr_lexer__ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->cexpr_lexer__ch_buf = (char *) cexpr_lexer_alloc(b->cexpr_lexer__buf_size + 2  );
	if ( ! b->cexpr_lexer__ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer__create_buffer()" );

	b->cexpr_lexer__is_our_buffer = 1;

	cexpr_lexer__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cexpr_lexer__create_buffer()
 * 
 */
    void cexpr_lexer__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->cexpr_lexer__is_our_buffer )
		cexpr_lexer_free((void *) b->cexpr_lexer__ch_buf  );

	cexpr_lexer_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cexpr_lexer_restart() or at EOF.
 */
    static void cexpr_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cexpr_lexer__flush_buffer(b );

	b->cexpr_lexer__input_file = file;
	b->cexpr_lexer__fill_buffer = 1;

    /* If b is the current buffer, then cexpr_lexer__init_buffer was _probably_
     * called from cexpr_lexer_restart() or through cexpr_lexer__get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->cexpr_lexer__bs_lineno = 1;
        b->cexpr_lexer__bs_column = 0;
    }

        b->cexpr_lexer__is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cexpr_lexer__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->cexpr_lexer__n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->cexpr_lexer__ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->cexpr_lexer__ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->cexpr_lexer__buf_pos = &b->cexpr_lexer__ch_buf[0];

	b->cexpr_lexer__at_bol = 1;
	b->cexpr_lexer__buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cexpr_lexer__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cexpr_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cexpr_lexer_ensure_buffer_stack();

	/* This block is copied from cexpr_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(cexpr_lexer__c_buf_p) = (cexpr_lexer__hold_char);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__buf_pos = (cexpr_lexer__c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->cexpr_lexer__n_chars = (cexpr_lexer__n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(cexpr_lexer__buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cexpr_lexer__switch_to_buffer. */
	cexpr_lexer__load_buffer_state( );
	(cexpr_lexer__did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cexpr_lexer_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cexpr_lexer__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((cexpr_lexer__buffer_stack_top) > 0)
		--(cexpr_lexer__buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cexpr_lexer__load_buffer_state( );
		(cexpr_lexer__did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cexpr_lexer_ensure_buffer_stack (void)
{
	cexpr_lexer__size_t num_to_alloc;
    
	if (!(cexpr_lexer__buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(cexpr_lexer__buffer_stack) = (struct cexpr_lexer__buffer_state**)cexpr_lexer_alloc
								(num_to_alloc * sizeof(struct cexpr_lexer__buffer_state*)
								);
		if ( ! (cexpr_lexer__buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer_ensure_buffer_stack()" );
								  
		memset((cexpr_lexer__buffer_stack), 0, num_to_alloc * sizeof(struct cexpr_lexer__buffer_state*));
				
		(cexpr_lexer__buffer_stack_max) = num_to_alloc;
		(cexpr_lexer__buffer_stack_top) = 0;
		return;
	}

	if ((cexpr_lexer__buffer_stack_top) >= ((cexpr_lexer__buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (cexpr_lexer__buffer_stack_max) + grow_size;
		(cexpr_lexer__buffer_stack) = (struct cexpr_lexer__buffer_state**)cexpr_lexer_realloc
								((cexpr_lexer__buffer_stack),
								num_to_alloc * sizeof(struct cexpr_lexer__buffer_state*)
								);
		if ( ! (cexpr_lexer__buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((cexpr_lexer__buffer_stack) + (cexpr_lexer__buffer_stack_max), 0, grow_size * sizeof(struct cexpr_lexer__buffer_state*));
		(cexpr_lexer__buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cexpr_lexer__scan_buffer  (char * base, cexpr_lexer__size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cexpr_lexer_alloc(sizeof( struct cexpr_lexer__buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer__scan_buffer()" );

	b->cexpr_lexer__buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->cexpr_lexer__buf_pos = b->cexpr_lexer__ch_buf = base;
	b->cexpr_lexer__is_our_buffer = 0;
	b->cexpr_lexer__input_file = 0;
	b->cexpr_lexer__n_chars = b->cexpr_lexer__buf_size;
	b->cexpr_lexer__is_interactive = 0;
	b->cexpr_lexer__at_bol = 1;
	b->cexpr_lexer__fill_buffer = 0;
	b->cexpr_lexer__buffer_status = YY_BUFFER_NEW;

	cexpr_lexer__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cexpr_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param cexpr_lexer_str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cexpr_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE cexpr_lexer__scan_string (cexpr_lexer_const char * cexpr_lexer_str )
{
    
	return cexpr_lexer__scan_bytes(cexpr_lexer_str,strlen(cexpr_lexer_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cexpr_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cexpr_lexer__scan_bytes  (cexpr_lexer_const char * cexpr_lexer_bytes, cexpr_lexer__size_t  _cexpr_lexer_bytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	cexpr_lexer__size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _cexpr_lexer_bytes_len + 2;
	buf = (char *) cexpr_lexer_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cexpr_lexer__scan_bytes()" );

	for ( i = 0; i < _cexpr_lexer_bytes_len; ++i )
		buf[i] = cexpr_lexer_bytes[i];

	buf[_cexpr_lexer_bytes_len] = buf[_cexpr_lexer_bytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cexpr_lexer__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cexpr_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->cexpr_lexer__is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void cexpr_lexer__fatal_error (cexpr_lexer_const char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine cexpr_lexer_less() so it works in section 3 code. */

#undef cexpr_lexer_less
#define cexpr_lexer_less(n) \
	do \
		{ \
		/* Undo effects of setting up cexpr_lexer_text. */ \
        int cexpr_lexer_less_macro_arg = (n); \
        YY_LESS_LINENO(cexpr_lexer_less_macro_arg);\
		cexpr_lexer_text[cexpr_lexer_leng] = (cexpr_lexer__hold_char); \
		(cexpr_lexer__c_buf_p) = cexpr_lexer_text + cexpr_lexer_less_macro_arg; \
		(cexpr_lexer__hold_char) = *(cexpr_lexer__c_buf_p); \
		*(cexpr_lexer__c_buf_p) = '\0'; \
		cexpr_lexer_leng = cexpr_lexer_less_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cexpr_lexer_get_lineno  (void)
{
        
    return cexpr_lexer_lineno;
}

/** Get the input stream.
 * 
 */
FILE *cexpr_lexer_get_in  (void)
{
        return cexpr_lexer_in;
}

/** Get the output stream.
 * 
 */
FILE *cexpr_lexer_get_out  (void)
{
        return cexpr_lexer_out;
}

/** Get the length of the current token.
 * 
 */
cexpr_lexer__size_t cexpr_lexer_get_leng  (void)
{
        return cexpr_lexer_leng;
}

/** Get the current token.
 * 
 */

char *cexpr_lexer_get_text  (void)
{
        return cexpr_lexer_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cexpr_lexer_set_lineno (int  line_number )
{
    
    cexpr_lexer_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cexpr_lexer__switch_to_buffer
 */
void cexpr_lexer_set_in (FILE *  in_str )
{
        cexpr_lexer_in = in_str ;
}

void cexpr_lexer_set_out (FILE *  out_str )
{
        cexpr_lexer_out = out_str ;
}

int cexpr_lexer_get_debug  (void)
{
        return cexpr_lexer__flex_debug;
}

void cexpr_lexer_set_debug (int  bdebug )
{
        cexpr_lexer__flex_debug = bdebug ;
}

static int cexpr_lexer__init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cexpr_lexer_lex_destroy(), so don't allocate here.
     */

    (cexpr_lexer__buffer_stack) = 0;
    (cexpr_lexer__buffer_stack_top) = 0;
    (cexpr_lexer__buffer_stack_max) = 0;
    (cexpr_lexer__c_buf_p) = (char *) 0;
    (cexpr_lexer__init) = 0;
    (cexpr_lexer__start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cexpr_lexer_in = stdin;
    cexpr_lexer_out = stdout;
#else
    cexpr_lexer_in = (FILE *) 0;
    cexpr_lexer_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cexpr_lexer_lex_init()
     */
    return 0;
}

/* cexpr_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int cexpr_lexer_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cexpr_lexer__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cexpr_lexer_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	cexpr_lexer_free((cexpr_lexer__buffer_stack) );
	(cexpr_lexer__buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cexpr_lexer_lex() is called, initialization will occur. */
    cexpr_lexer__init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef cexpr_lexer_text_ptr
static void cexpr_lexer__flex_strncpy (char* s1, cexpr_lexer_const char * s2, int n )
{
	/*GB register*/ int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int cexpr_lexer__flex_strlen (cexpr_lexer_const char * s )
{
	/*GB register*/ int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cexpr_lexer_alloc (cexpr_lexer__size_t  size )
{
	return (void *) malloc( size );
}

void *cexpr_lexer_realloc  (void * ptr, cexpr_lexer__size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cexpr_lexer_free (void * ptr )
{
	free( (char *) ptr );	/* see cexpr_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "cexpr_lexer_tables"

#line 151 "../exlib/yacc/cexpr_lexer.l"



int cexpr_lexer_wrap(){return 1;}

inline void cexpr_lexer_dummy() { //to rm g++ "unused warning".
  cexpr_lexer_unput(0,0);
}


