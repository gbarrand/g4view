// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_gzip
#define exlib_gzip

#ifdef EXLIB_USE_NATIVE_ZLIB
#include <zlib.h>
#else //EXLIB_USE_NATIVE_ZLIB
#include <ourex_zlib.h> //enforce ourex zlib
#endif //EXLIB_USE_NATIVE_ZLIB

#include <cstdio> //EOF
#include <cstring> //strlen

namespace exlib {

//size_t to have same signature as inlib::file::read_string.
inline bool zread_buff(gzFile a_file,char* a_buff,unsigned int a_lbuf,size_t& a_length) {
  // a_length = 0 when finished (end of file).
  int len = ::gzread(a_file,a_buff,a_lbuf);
  if(len==(-1)) {
    //out << "Lib::GZipReader::read :"
    //    << " error reading in file \"" << fFileName 
    //   << "\"." << Lib::endl;
    a_length = 0;
    return false;
  }
  a_length = len;
  return true;
}

inline bool zread_cstring(gzFile a_file,char* a_buff,unsigned int a_lbuf,size_t& a_length) {
  char* buffer = ::gzgets(a_file,a_buff,a_lbuf);
  if(buffer==Z_NULL) {
    if(gzeof(a_file)==0) { //error
      //a_out << "BatchLab::zread_cstring :"
      //      << " gzgets error."
      //      << std::endl;
    }
    a_length = 0;
    return false; //EOF
  }

  size_t l = ::strlen(buffer);
  //  On Windows, editors when saving binary files,
  // put \r\n at place of \n ; we then look for \r\n.
  if( (l>=2) && (buffer[l-2]=='\r') && (buffer[l-1]=='\n') ) {
    buffer[l-2] = '\0';
    l -= 2;
  } else if( (l>=1) && (buffer[l-1]=='\n') ) {
    buffer[l-1] = '\0';
    l -= 1;
  }
  a_length = l;
  return true;
}

}

#include <sstream>

namespace exlib {

class ogzip : public std::streambuf, public std::ostream {
public:
  ogzip(const std::string& a_name,std::ostream& a_out)
  : std::streambuf() //WARNING : must come before the below.
  //, std::ostream((std::streambuf*)this)
  , std::ostream(0)
  ,m_out(a_out)
  ,m_name(a_name)
  ,m_size(4095)
  ,m_buffer(0)
  ,m_count(0)
  ,m_gzFile(0)
  {
    std::ostream::rdbuf(this);
    m_buffer = new char[m_size];
    m_gzFile = ::gzopen(a_name.c_str(),"wb");
    if(!m_gzFile) {
      m_out << "ogzip::ogzip :"
            << " gzopen error for \"" << a_name << "\"." 
            << std::endl;
    }
  }

  virtual ~ogzip(){
    if(m_gzFile) ::gzclose(m_gzFile);
    delete [] m_buffer;
  }
private:
  ogzip(const ogzip& a_from)
  :std::basic_ios<char, std::char_traits<char> >()
  ,std::basic_streambuf<char, std::char_traits<char> >()
#ifdef INLIB_STL
  ,std::streambuf(a_from)
#endif
  ,std::ostream((std::streambuf*)&a_from)
  ,m_out(a_from.m_out){}
  ogzip& operator=(const ogzip&){return *this;}
public:
  bool opened() const {return m_gzFile?true:false;}

  void close() {
    if(!m_gzFile) return; // Already closed.
    ::gzclose(m_gzFile);
    m_gzFile = 0;
    m_count = 0;
  }

public: //std::streambuf mechanism
  int overflow(int a_char) {
    int result = 0;
    //01234 = 5
    if(m_count>=m_size) {
      result = gz_write();
      m_count = 0; //WARNING : must be done after the upper line.
    }
    m_buffer[m_count] = a_char;
    m_count++;
    return result;
  }
  int sync() {
    int result = gz_write();
    m_count = 0; //WARNING : must be done after the upper line.
    return result;
  }
#ifdef _MSC_VER
  int underflow() {return 0;}
#endif

private:
  int gz_write() { //prefix with gz_ to avoid clash with std::.
    if(!m_gzFile) return EOF;
    if(::gzwrite(m_gzFile,m_buffer,m_count)==0) {
      m_out << "ogzip::gz_write :"
            << " gzwrite error for file \"" << m_name << "\"." 
            << std::endl;
      close();
      return EOF;
    } else {
      return 0;
    }
  }

private:
  std::ostream& m_out;
  std::string m_name;
  unsigned int m_size;
  char* m_buffer;
  unsigned int m_count;
  // zlib specific :
  gzFile m_gzFile;
};

}

#ifdef INLIB_MEM
#include <inlib/S_STRING>
#include <inlib/mem>
#endif
#include <inlib/file_reader>

namespace exlib {

class gzip_reader : public virtual inlib::file::reader {
#ifdef INLIB_MEM
  INLIB_SCLASS(exlib::gzip_reader)
#endif
public:
  virtual bool open(const std::string& a_file) {
    if(m_file) return false; //already open.
    m_file = ::gzopen(a_file.c_str(),"rb");
    if(!m_file) return false;
    return true;
  }
  virtual void close() {
    if(!m_file) return;
    ::gzclose(m_file);
    m_file = 0;
  }
  virtual bool is_open() const {return m_file?true:false;}
  virtual bool read(char* a_buff,unsigned int a_lbuf,size_t& a_length) {
    int len = ::gzread(m_file,a_buff,a_lbuf);
    if(len==(-1)) {
      a_length = 0;
      return false;
    }
    a_length = len;
    return true;
  }
  virtual bool get_line(char* a_buff,unsigned int a_lbuf) {
    return ::gzgets(m_file,a_buff,a_lbuf)==Z_NULL?false:true;
  }
  virtual bool eof() const {
    return ::gzeof(m_file)?true:false;
  }
public:
  gzip_reader():m_file(0){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~gzip_reader() {
    if(m_file) ::gzclose(m_file);
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
private:
  gzip_reader(const gzip_reader& a_from)
  :inlib::file::reader(a_from)
  ,m_file(0)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  gzip_reader& operator=(const gzip_reader&){return *this;}
public:
  bool getline(char* a_buff,unsigned int a_lbuf) {return get_line(a_buff,a_lbuf);}
protected:
  gzFile m_file;
};

inline bool gzip_signature(const std::string& a_file,unsigned char a_head[],unsigned int& a_num){ //it is assumed a_head[] can contain a_num chars.
  gzFile file = ::gzopen(a_file.c_str(),"rb");
  if(!file) return false;
  int len = ::gzread(file,a_head,a_num);
  if(len==(-1)) return false;
  ::gzclose(file);
  a_num = (unsigned int)len;
  return true;
}

inline bool gzip_is_iv(const std::string& a_file,bool& a_is){
  unsigned char head[9];
 {unsigned int num = 9;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=9) {a_is = false;return true;}}
  if(head[0]!='#') {a_is = false;return true;}
  if(head[1]!='I') {a_is = false;return true;}
  if(head[2]!='n') {a_is = false;return true;}
  if(head[3]!='v') {a_is = false;return true;}
  if(head[4]!='e') {a_is = false;return true;}
  if(head[5]!='n') {a_is = false;return true;}
  if(head[6]!='t') {a_is = false;return true;}
  if(head[7]!='o') {a_is = false;return true;}
  if(head[8]!='r') {a_is = false;return true;}
  a_is = true;  
  return true;
}

inline bool gzip_is_wrl(const std::string& a_file,bool& a_is){
  unsigned char head[5];
 {unsigned int num = 5;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=5) {a_is = false;return true;}}
  if(head[0]!='#') {a_is = false;return true;}
  if(head[1]!='V') {a_is = false;return true;}
  if(head[2]!='R') {a_is = false;return true;}
  if(head[3]!='M') {a_is = false;return true;}
  if(head[4]!='L') {a_is = false;return true;}
  a_is = true;  
  return true;
}

inline bool gzip_is_bsg(const std::string& a_file,bool& a_is){
  unsigned char head[7];
 {unsigned int num = 7;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=7) {a_is = false;return true;}}
  if(head[0]!='i') {a_is = false;return true;}
  if(head[1]!='n') {a_is = false;return true;}
  if(head[2]!='e') {a_is = false;return true;}
  if(head[3]!='x') {a_is = false;return true;}
  if(head[4]!='b') {a_is = false;return true;}
  if(head[5]!='s') {a_is = false;return true;}
  if(head[6]!='g') {a_is = false;return true;}
  a_is = true;  
  return true;
}

inline bool gzip_is_aida(const std::string& a_file,bool& a_is){
  unsigned char head[1024];
 {unsigned int num = 1024;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=1024) {a_is = false;return true;}}
  head[1023] = 0; //to have a C string.
  a_is = ::strstr((const char*)head,"<aida")?true:false;
  return true;
}

inline bool gzip_is_jive(const std::string& a_file,bool& a_is){
  unsigned char head[1024];
 {unsigned int num = 1024;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=1024) {a_is = false;return true;}}
  head[1023] = 0; //to have a C string.
  if(::strstr((const char*)head,"<?ATLAS")) {a_is = true;return true;}
  a_is = ::strstr((const char*)head,"<!DOCTYPE Event")?true:false;
  return true;
}

inline bool gzip_is_heprep(const std::string& a_file,bool& a_is){
  unsigned char head[1024];
 {unsigned int num = 1024;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=1024) {a_is = false;return true;}}
  head[1023] = 0; //to have a C string.
  a_is = ::strstr((const char*)head,"<heprep")?true:false;
  return true;
}

inline bool gzip_is_gdml(const std::string& a_file,bool& a_is){
  unsigned char head[1024];
 {unsigned int num = 1024;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=1024) {a_is = false;return true;}}
  head[1023] = 0; //to have a C string.
  a_is = ::strstr((const char*)head,"<gdml")?true:false;
  return true;
}

inline bool gzip_is_fog(const std::string& a_file,bool& a_is){
  unsigned char head[256];
 {unsigned int num = 256;
  if(!gzip_signature(a_file,head,num)) {a_is = false;return false;}
  if(num!=256) {a_is = false;return true;}}
  head[255] = 0; //to have a C string.
  a_is = ::strstr((const char*)head,"#nb super-volumes")?true:false;
  return true;
}

}

#include <inlib/gzip>

namespace exlib {

inline bool gzip_read_bytes(const std::string& a_file,char*& a_buffer,long& a_length){
  unsigned int usz;
  if(!inlib::file::gzip_usize(a_file,usz)) {
    a_buffer = 0;
    a_length = 0L;
    return false;
  }
  // Returned buffer should be deleted with delete [].
  gzFile file = ::gzopen(a_file.c_str(),"rb");
  if(!file) {
    a_buffer = 0;
    a_length = 0L;
    return false;
  }
  // Add one byte to be able to add \n if file contain lines.
  a_buffer = new char[usz+1];
  if(!a_buffer) {
    ::gzclose(file);
    a_buffer = 0;
    a_length = 0L;
    return false;
  }
#ifdef INLIB_MEM
  inlib::mem::increment(inlib::s_new().c_str());
#endif
  //::gzrewind(file);
  int len = ::gzread(file,a_buffer,usz);
  if(len==(-1)) {
    ::gzclose(file);
    delete [] a_buffer;
#ifdef INLIB_MEM
    inlib::mem::decrement(inlib::s_new().c_str());
#endif
    a_buffer = 0;
    a_length = 0L;
    return false;
  }
  ::gzclose(file);
  a_buffer[usz] = 0;
  a_length = usz;
  return true;
}  

}


#endif

//exlib_build_use inlib zlib
