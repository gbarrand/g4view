// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_X11_gui_dispatcher
#define exlib_X11_gui_dispatcher

#include "base_session"

#include <X11/keysym.h>
#include <X11/Xutil.h>

#include <inlib/sg/enums> //key_left,etc...

#include <inlib/sg/gui_viewer>

namespace exlib {
namespace X11 {

class gui_dispatcher : public dispatcher {
  typedef dispatcher parent;
public:
  virtual bool dispatch(XEvent& a_event) {
    if(!m_win) return false;
    if(a_event.xany.window!=m_win) return false;
    if(a_event.type==Expose) {
      int width = 0;
      int height = 0;
      m_x11.window_size(m_win,width,height);
      m_viewer.set_size(width,height);
      m_viewer.win_render();
      return true;

    } else if(a_event.type==ConfigureNotify) {
      int width,height;
      m_x11.window_size(m_win,width,height);
      if( (width!=(int)m_viewer.width())   ||
          (height!=(int)m_viewer.height()) ){
        m_viewer.set_size(width,height);
        m_viewer.win_render();
      }
      return true;

    } else if(a_event.type==ClientMessage) {
      if(a_event.xclient.data.l[0]==(long)m_x11.WM_DELETE_WINDOW_atom()) {
        m_x11.post(m_win,m_x11.SESSION_EXIT_STEER_atom());
        return true;
      }

    } else if(a_event.type==KeyPress) {
      KeySym keySym;
      ::XLookupString(&(a_event.xkey),NULL,0,&keySym,NULL);

      bool shift = a_event.xkey.state & ShiftMask;
      bool ctrl = a_event.xkey.state & ControlMask;

      if(keySym==XK_Left)  {
        if(m_viewer.do_key(inlib::sg::key_left,shift,ctrl)) m_viewer.win_render();
        return true;

      } else if(keySym==XK_Right) {
        if(m_viewer.do_key(inlib::sg::key_right,shift,ctrl)) m_viewer.win_render();
        return true;

      } else if(keySym==XK_Up) {
        if(m_viewer.do_key(inlib::sg::key_up,shift,ctrl)) m_viewer.win_render();
        return true;

      } else if(keySym==XK_Down) {
        if(m_viewer.do_key(inlib::sg::key_down,shift,ctrl)) m_viewer.win_render();
        return true;

      } else if(keySym==XK_Tab) {
        if(m_viewer.do_tab(shift)) m_viewer.win_render();
        return true;
      } else if(keySym==XK_Return) {
        m_viewer.do_return();
        return true;
      } else if(shift && (keySym==XK_Escape)) {
        m_viewer.toggle_param_viewing();
        m_viewer.win_render();
        return true;
      } else if(keySym==XK_Escape) {
        m_viewer.do_escape();
        m_viewer.win_render();
        return true;
      }

    ///////////////////////////////////////////////////////////
    /// emulate a "touch gesture" /////////////////////////////
    ///////////////////////////////////////////////////////////
    } else if(a_event.type==ButtonPress && a_event.xbutton.button==1) {

      unsigned int wh = m_viewer.height();
      bool to_render = m_viewer.touch_down(a_event.xbutton.x,wh-a_event.xbutton.y);
      // same logic as other drivers (moreover the below permits it here to avoid too much redraw in case of "pure X11") :
      if(m_viewer.do_works()) to_render = true;
      if(to_render) m_viewer.win_render();
      return true;

    } else if(a_event.type==ButtonRelease && a_event.xbutton.button==1) {

      m_viewer.add_work_check_arm_buttons();
      unsigned int wh = m_viewer.height();
      bool to_render = m_viewer.touch_up(a_event.xbutton.x,wh-a_event.xbutton.y);
      //treat single shoot cbks :
      if(m_viewer.do_works()) to_render = true;
      if(to_render) m_viewer.win_render();
      return true;

    } else if(a_event.type==MotionNotify) {
      if((a_event.xmotion.state & Button1MotionMask)==Button1MotionMask) {
        // part of the touch gesture :
        bool to_render = m_viewer.touch_move(a_event.xmotion.x,m_viewer.height()-a_event.xmotion.y);
        if(m_viewer.do_works()) to_render = true;
        if(to_render) m_viewer.win_render();
        return true;
      } else {
        /* deprecated (moreover it slows down interactivity) :
        // notify the viewer. Needed in case of wall cursor remote control.
        bool to_render = m_viewer.mouse_motion(a_event.xmotion.x,m_viewer.height()-a_event.xmotion.y);
        if(m_viewer.do_works()) to_render = true;
        if(to_render) m_viewer.win_render();
        return true;
	*/
      }

    } else if((a_event.type==ButtonRelease)&&(a_event.xbutton.button==5)) { // mouse scrollwheel up :
      if(m_viewer.update_anim_motion(inlib::sg::anim_up,m_viewer.m_params.m_anim_mode))
        m_viewer.win_render();
      return true;

    } else if((a_event.type==ButtonRelease)&&(a_event.xbutton.button==4)) { // mouse scrollwheel down :
      if(m_viewer.update_anim_motion(inlib::sg::anim_down,m_viewer.m_params.m_anim_mode))
        m_viewer.win_render();
      return true;

    }
    return false;
  }
  virtual Window window() const {return m_win;}
  virtual dispatcher* copy() const {return new gui_dispatcher(*this);}
public:
  gui_dispatcher(base_session& a_x11,Window a_win,inlib::sg::gui_viewer& a_viewer)
  :parent()
  ,m_x11(a_x11)
  ,m_win(a_win)
  ,m_viewer(a_viewer)
  {}
  virtual ~gui_dispatcher(){}
public:
  gui_dispatcher(const gui_dispatcher& a_from)
  :parent(a_from)
  ,m_x11(a_from.m_x11)
  ,m_win(a_from.m_win)
  ,m_viewer(a_from.m_viewer)
  {}
  gui_dispatcher& operator=(const gui_dispatcher& a_from) {
    parent::operator=(a_from);
    m_win = a_from.m_win;
    return *this;
  }
protected:
  base_session& m_x11;
  Window m_win;
  inlib::sg::gui_viewer& m_viewer;
};

}}

//exlib_build_use inlib X11 GLX

#endif
