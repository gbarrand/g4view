// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file wall.license for terms.

#ifndef exlib_X11_colors
#define exlib_X11_colors

#include <X11/Xlib.h>
#include <inlib/colorf>
#include <map>

namespace exlib {
namespace X11 {

typedef unsigned long Pixel;
typedef std::vector<Pixel> pixels_t;
typedef std::map<inlib::colorf,Pixel,inlib::cmp_colorf> colors_t;

inline bool rgb2pixel(Display* a_display,float a_r,float a_g,float a_b,Pixel& a_pixel,bool& a_allocated) {
  // read_write visual class: PseudoColor, GrayScale, DirectColor.
  // read_only  visual class: TrueColor, StaticColor, StaticGray.
  // Could allocate a read_only cell in a read_write, read_only visual class.
  // Could allocate a read_write cell only in read_write visual class.
  // StaticGray + (depth=1) is monochrome.

  Screen* screen = ::XDefaultScreenOfDisplay(a_display);
  int vclass = ::XDefaultVisualOfScreen(screen)->c_class;
  Colormap cmap = ::XDefaultColormapOfScreen(screen);

  bool is_grey  = ((vclass==GrayScale) || (vclass==StaticGray) ) ? true : false;

  XColor xcolor;
  xcolor.pixel  = 0L;
  if(is_grey) {
    float grey = 0.30f * a_r + 0.59f * a_g + 0.11f * a_b;
    xcolor.red    = (unsigned short) (grey * 0xffff);
    xcolor.green  = (unsigned short) (grey * 0xffff);
    xcolor.blue   = (unsigned short) (grey * 0xffff);
  } else {
    xcolor.red    = (unsigned short) (a_r  * 0xffff);
    xcolor.green  = (unsigned short) (a_g  * 0xffff);
    xcolor.blue   = (unsigned short) (a_b  * 0xffff);
  }

  // Could be done on read_only/read_write visual class.
  // Cell is taken from a common pool. It is read only.
  if(::XAllocColor(a_display,cmap,&xcolor)==0) {
    // Color not found. Try to allocate a private color cell :
    if((vclass==TrueColor)||(vclass==StaticColor)||(vclass==StaticGray)) { //Viusal class is read_only.
      a_pixel = 0;
      a_allocated = false;
      return false;
    }
    if(::XAllocColorCells(a_display,cmap,False,NULL,0,&(xcolor.pixel),1)==0) { //read/write cell.
      a_pixel = 0;
      a_allocated = false;
      return false;
    }
    xcolor.flags = DoRed|DoGreen|DoBlue;
    ::XStoreColor(a_display,cmap,&xcolor);
    a_pixel = xcolor.pixel;
    a_allocated = true;
  } else {
    a_pixel = xcolor.pixel;
    a_allocated = false;
  }

  return true;
}

inline bool get_pixel(Display* a_display,pixels_t& a_pixels,colors_t& a_colors,float a_r,float a_g,float a_b,Pixel& a_pixel) {
  std::map<inlib::colorf,Pixel,inlib::cmp_colorf>::const_iterator it = a_colors.find(inlib::colorf(a_r,a_g,a_b));
  if(it!=a_colors.end()) {a_pixel = (*it).second;return true;}
  bool allocated;
  if(!rgb2pixel(a_display,a_r,a_g,a_b,a_pixel,allocated)) {
    a_pixel = XWhitePixelOfScreen(XDefaultScreenOfDisplay(a_display));
    return false;
  }
  if(allocated) a_pixels.push_back(a_pixel);
  a_colors[inlib::colorf(a_r,a_g,a_b)] = a_pixel;
  return true;
}

inline bool set_foreground(Display* a_display,GC a_gc,pixels_t& a_pixels,colors_t& a_colors,
                           float a_r,float a_g,float a_b) {
  Pixel pixel;
  if(!get_pixel(a_display,a_pixels,a_colors,a_r,a_g,a_b,pixel)) return false;
  XGCValues gcv;
  gcv.foreground = pixel;
  if(::XChangeGC(a_display,a_gc,GCForeground,&gcv)==0) return false;
  return true;
}

}}

//exlib_build_use inlib X11

#endif
