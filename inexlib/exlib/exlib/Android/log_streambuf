// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_Android_log_streambuf
#define exlib_Android_log_streambuf

#include <android/log.h>

#include <string>
#include <sstream>

namespace exlib {
namespace Android {

class log_streambuf : public std::streambuf {
public:
  log_streambuf(const std::string& a_app_name)
  :m_app_name(a_app_name)
  ,m_buffer(0)
  ,m_size(4095)
  ,m_count(0)
  {
    m_buffer = new char[m_size+1];
  }

  virtual ~log_streambuf(){delete [] m_buffer;}
private:
  log_streambuf(const log_streambuf& aFrom){}
  log_streambuf& operator=(const log_streambuf&){return *this;}
public:
  int overflow(int aChar) {
    int result = 0;
    if(m_count>=m_size) {
      m_buffer[m_count] = '\0';
      m_count = 0;
      result = receiveString();
    }
    m_buffer[m_count] = aChar;
    m_count++;
    if(aChar=='\n') {
      m_buffer[m_count] = '\0';
      m_count = 0;
      result = receiveString();
    }
    return result;
  }

  int sync() {
    m_buffer[m_count] = '\0';
    m_count = 0;
    return receiveString ();
  }

private:
  int receiveString() {
    __android_log_print(ANDROID_LOG_INFO,m_app_name.c_str(),"%s",m_buffer);
    return 0;
  }

private:
  std::string m_app_name;
  char* m_buffer;
  unsigned int m_size;
  unsigned int m_count;
};

}}

//exlib_build_use Android

#endif
