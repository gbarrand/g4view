// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_WebGL_session
#define exlib_WebGL_session

//#include <inlib/sys/mutex>

#include <inlib/sys/file> //tmpname
#include <inlib/sbeg>
#include <inlib/saui>
#include <inlib/sg/gui_viewer>

#include <inlib/WebGL/render>

#include "../sg/text_freetype"

namespace exlib {
namespace WebGL {

class pv_holder {
public:
  pv_holder(std::ostream&):m_ttf(),m_selection(){}
  virtual ~pv_holder(){}
protected:
  pv_holder(const pv_holder& a_from):m_ttf(a_from.m_ttf),m_selection(a_from.m_selection){}
  pv_holder& operator=(const pv_holder& a_from) {
    m_ttf = a_from.m_ttf;
    m_selection = a_from.m_selection;
    return *this;
  }
protected:
  exlib::sg::text_freetype m_ttf;
  inlib::sg::selection m_selection;
};

template <class APP_MAIN>
class main : protected pv_holder, public APP_MAIN {
  INLIB_T_HEADER(APP_MAIN,main,exlib::WebGL::main,APP_MAIN)
public:
  virtual void render() {
    //::printf("debug : render : 000 %d %d\n",m_ww,m_wh);

    this->check_gui_cursor();

    const inlib::colorf& bk = parent::m_clear_color;

    m_mgr.begin_render(0,0,parent::m_ww,parent::m_wh,bk.r(),bk.g(),bk.b(),bk.a());

    inlib::WebGL::render _action(m_mgr,parent::m_out,parent::m_ww,parent::m_wh);
    _action.state().m_use_gsto = parent::m_use_gsto;

    this->sg().render(_action);
    //after_render();

    m_mgr.end_render();
  }
public:
  virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {
    if(!parent::set_cursor_shape(a_shape)) return false;
    if(a_shape==inlib::sg::cursor_default) {
      //m_have_to_set_cursor = "default";
      m_have_to_set_cursor = "auto";
      return true;
    } else if(a_shape==inlib::sg::cursor_target) {
      m_have_to_set_cursor = "crosshair";
      return true;
    } else {
      return false;
    }
  }
  virtual void enable_anim() {
    //::printf("debug : enable_anim\n");
    parent::enable_anim();
    m_have_to_enable_anim = true;
  }

  virtual void disable_anim() {
    parent::disable_anim();
    m_have_to_disable_anim = true;
  }

  virtual void set_event_anim(inlib::event_timer* a_timer) {
    parent::set_event_anim(a_timer);
    m_have_to_enable_anim = true;
  }

  //?
  //virtual void stop_event_anim() {
  //}

  virtual inlib::sg::node* create_main_menu() {
    inlib::sg::node* _node = parent::create_main_menu();

    inlib::sg::list* list = inlib::safe_cast<inlib::sg::node,inlib::sg::list>(*_node);
    if(!list) return _node;

    if(m_can_upload) {
      inlib::sg::add_image_item_before
        (*this,*list,inlib::sg::s_files(),"upload file","files.jpg",action_upload_file,inlib::sg::pos_data(false,0,0));
    }

    //list->remove_item(inlib::sg::s_files()); //authorize opening res files.

    list->remove_item(inlib::sg::s_export()); //disconnected for the moment.
    list->remove_item(inlib::sg::s_ftp());
    list->remove_item(inlib::sg::s_wall());

    return list;
  }

  virtual void win_render() { //for exa from ioda/exa/fit.
    //::printf("debug : win_render\n");
  }
public:
  main(std::ostream& a_out,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       int a_w,int a_h,
       bool a_can_upload,
       inlib::WebGL::manager& a_mgr)
  :pv_holder(a_out)
  ,parent(a_out,
          a_mgr,pv_holder::m_ttf,pv_holder::m_selection,
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  ,m_mgr(a_mgr)
  ,m_mouse_down(false)
  ,m_have_to_enable_anim(false)
  ,m_have_to_disable_anim(false)
  ,m_have_to_upload_file(false)
  ,m_reply_compression(0)
  ,m_can_upload(a_can_upload)
  {
    parent::m_params.m_gsto_mode = inlib::sg::s_gsto_gl_vbo();
    this->set_use_gsto(true);

    //gui_viewer::m_params.m_image_buttons = false;

    this->push_home();

    //m_mutex.initialize();

    this->set_size(a_w,a_h);
  }
  virtual ~main(){
   {inlib_vforcit(std::string,m_tmp_files,it) {
     if(::remove((*it).c_str())!=0) {
       parent::m_out << "exlib::WebGL::main::~main :"
             << " problem removing " << (*it)
             << std::endl;
      } else {
       parent::m_out << "debug : exlib::WebGL::main::~main :"
                     << " " << (*it) << " removed."
                     << std::endl;
      }
    }
    m_tmp_files.clear();}
  }
private:
  main(const main& a_from):pv_holder(a_from),parent(a_from),m_mgr(a_from.m_mgr) {}
  main& operator=(const main&) {return *this;}
public:
  void init_GL(unsigned int a_mid) {m_mgr.initialize_GL(a_mid,parent::m_ww,parent::m_wh);}

  bool mouse_down(int a_x,int a_y) {
    //::printf("debug : viewer::mouse_down : %d %d\n",a_x,a_y);
    unsigned int wh = parent::height();
    bool to_render = this->touch_down(a_x,wh-a_y);
    //for arm cbks :
    if(this->do_works()) to_render = true;
    m_mouse_down = true;
    return to_render;
  }

  bool mouse_move(int a_x,int a_y) {
    if(m_mouse_down) {
      //::printf("debug : viewer::mouse_move : and down : %d %d\n",a_x,a_y);
      unsigned int wh = parent::height();
      bool to_render = this->touch_move(a_x,wh-a_y);
      if(this->do_works()) to_render = true;
      return to_render;
    } else {
/*
      //::printf("debug : viewer::mouse_move : and not down : %d %d\n",a_x,a_y);
      // notify the viewer. Needed in case of wall cursor remote control.
      unsigned int wh = parent::height();
      a_to_render = mouse_motion(a_x,wh-a_y);
      if(do_works()) a_to_render = true;
*/
      return false;
    }
  }

  bool mouse_up(int a_x,int a_y) {
    //::printf("debug : viewer::mouse_up : %d %d\n",a_x,a_y);
    m_mouse_down = false;
    this->add_work_check_arm_buttons();
    unsigned int wh = parent::height();
    bool to_render = this->touch_up(a_x,wh-a_y);
    //treat single shoot cbks :
    if(this->do_works()) to_render = true;
    return to_render;
  }

  inlib::WebGL::manager& manager() {return m_mgr;}

  void open_file(const std::string& a_file) {
    //m_mutex.lock();
    std::string fmt = inlib::file::s_format_guessed();
    if(this->opener().preferred_format().size()) fmt = this->opener().preferred_format();
    bool done;
    if(!this->opener().open(a_file,fmt,inlib::args(),done)) {
      //the upper should issue a map_warn().
      //m_mutex.unlock();
      this->win_render();
      return;
    }
    if(!done) {
      this->map_warn("unknown file type");
    }
    //m_mutex.unlock();
  }

  void reply_render(std::ostream& a_reply_out,std::string& a_content_type) {
    //a_session.m_action_count++;
    //std::string suff = "_"+inlib::to(a_session.m_action_count);
    //_mgr.m_gen_id++;
    //std::string suff = "_"+inlib::to(_mgr.m_gen_id);

    std::string suff;

    //_main.m_mutex.lock();
    m_mgr.js().str("");
    m_mgr.texs_js().str("");
    m_mgr.vbos_js().str("");
    m_mgr.texs_delete();
    m_mgr.vbos_delete();
    m_mgr.texs_header("create_texs"+suff);
    m_mgr.vbos_header("create_vbos"+suff);
    m_mgr.draw_header("draw_scene"+suff);

    render();

    m_mgr.texs_trailer();
    m_mgr.vbos_trailer();
    m_mgr.draw_trailer();
    m_mgr.js() << "create_texs"+suff+"();\n"
              << "create_vbos"+suff+"();\n"
              << "draw_scene"+suff+"();\n";

/*
    if(m_reply_compression) {
      std::string sreply = m_mgr.vbos_js().str()+m_mgr.texs_js().str()+m_mgr.js().str();

      unsigned int uc_length = sreply.size();
      char* uc_buffer = (char*)sreply.c_str();
      unsigned int cp_length = 0;
      char* cp_buffer = new char[uc_length];
      //if(!cp_buffer) {}
      if(!exlib::gzip_buffer(m_out,1,uc_length,(char*)uc_buffer,uc_length,cp_buffer,cp_length)){
        m_out << "exlib::WebGL::main::reply_render :"
              << " gzip failed."
              << std::endl;
        delete [] cp_buffer;
//        a_reply.out() << s_failed() << " : reply_render.";
        a_content_type = "text/javascript";
        a_reply_out << "";
        return;
      }
      if(!cp_length) {
        m_out << "exlib::WebGL::main::reply_render :"
              << " zero compression size."
              << std::endl;
        delete [] cp_buffer;
//        a_reply_out << s_failed() << " : reply_render.";
        a_content_type = "text/javascript";
        a_reply_out << "";
        return;
      }

      //3
      std::vector<char> cp_b64;
      inlib::base64::encode(cp_length,cp_buffer,cp_b64);
      if(m_verbose) {
        ::printf("reply_render : uc %u cp %u : cp_b64 %lu\n",uc_length,cp_length,cp_b64.size());
      }
      sreply.clear();
      inlib_vforcit(char,cp_b64,it) sreply += *it;

      delete [] cp_buffer;

      a_content_type = "text/javascript";
      a_reply_out << sreply;
    } else*/ {
      if(parent::m_verbose) {
        size_t sz = m_mgr.vbos_js().str().size()+m_mgr.texs_js().str().size()+m_mgr.js().str().size();
        ::printf("reply_render : uc %u\n",(unsigned int)sz);
      }
      a_content_type = "text/javascript";
      a_reply_out << m_mgr.vbos_js().str()
                  << m_mgr.texs_js().str()
                  << m_mgr.js().str();
    }
    //m_mutex.unlock();
  }

  void reply_reload(unsigned int a_mid,std::ostream& a_reply_out) {
    m_mgr.delete_gstos();

    //m_mutex.lock();
    this->do_works();

    m_mgr.js().str("");
    m_mgr.texs_js().str("");
    m_mgr.vbos_js().str("");

    init_GL(a_mid); //load main.js

    m_mgr.texs_header();
    m_mgr.vbos_header();
    m_mgr.texs_delete();
    m_mgr.vbos_delete();
    m_mgr.js() << "<script type=\"text/javascript\">" << std::endl;
    m_mgr.draw_header();

    render();

    m_mgr.texs_trailer();
    m_mgr.vbos_trailer();
    m_mgr.draw_trailer();

    if(m_reply_compression) {
      m_mgr.js() << "g_compression = 3;" << std::endl;
    } else {
      m_mgr.js() << "g_compression = 0;" << std::endl;
    }

    //a_reply.setContentType("text/html; charset=utf-8");
    a_reply_out << m_mgr.js().str()
                << m_mgr.vbos_js().str()
                << m_mgr.texs_js().str()
                << "</script>" << std::endl;
    //m_mutex.unlock();
  }

protected:
  static inlib::sg::return_action action_upload_file(inlib::sg::gui_viewer& a_gv) {
    main* _main = inlib::safe_cast<inlib::sg::gui_viewer,main>(a_gv);
    _main->m_have_to_upload_file = true;
    return inlib::sg::return_none;
  }

protected:
  inlib::WebGL::manager& m_mgr;
public:
  //inlib::mutex m_mutex;
  bool m_mouse_down;
  bool m_have_to_enable_anim;
  bool m_have_to_disable_anim;
  bool m_have_to_upload_file;
  std::string m_have_to_set_cursor;
  unsigned int m_reply_compression;
  bool m_can_upload;
  std::vector<std::string> m_tmp_files;
};

}}

#include <inlib/app>
#include <inlib/cmd/rest>
#include <inlib/sargs>

INLIB_GLOBAL_STRING(done)
INLIB_GLOBAL_STRING(failed)

INLIB_GLOBAL_STRING_VALUE(arg_bgcolor,-bgcolor)
INLIB_GLOBAL_STRING_VALUE(arg_compression,-compression)
INLIB_GLOBAL_STRING_VALUE(arg_reply_compression,-reply_compression)
INLIB_GLOBAL_STRING_VALUE(arg_can_upload,-can_upload)
INLIB_GLOBAL_STRING_VALUE(arg_app_name,-app_name) //internal

namespace exlib {
namespace WebGL {

template <class APP_MAIN>
class session {
  INLIB_T_SCLASS(APP_MAIN,exlib::WebGL::session)
protected:
  typedef main<APP_MAIN> main_t;
public:
  session(std::ostream& a_out,const inlib::args& a_args)
  :m_out(a_out)
  ,m_args(a_args)
  ,m_verbose(false)
  ,m_can_shutdown(false)
  ,m_gen_id(0)
  ,m_action_count(0)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
    //::printf("exlib::WebGL::session::session() : %lu\n",(unsigned long)this);

    std::string exe_path;
   {std::string arg0;
    if(!m_args.prog_name(arg0)) {
      m_out << "exlib::WebGL::session::session() : can't get exe path." << std::endl;
    }
    if(!inlib::program_path(arg0,exe_path)) {
      m_out << "exlib::WebGL::session::session() : can't get exe directory." << std::endl;
    }}

    if(!a_args.find(s_arg_app_name(),m_app_name)) {
      m_out << "exlib::WebGL::session::session() : -app_name not found in args." << std::endl;
    }

    m_verbose = a_args.is_arg(inlib::s_arg_verbose());

    m_can_shutdown = a_args.is_arg(inlib::s_arg_can_shutdown());
    //if(m_verbose)

    std::string home_dir;
    inlib::dir::home(home_dir);
    if(home_dir.empty()) {
      m_out << "exlib::WebGL::session::session() : can't get home directory." << std::endl;
    } else {
      std::string doc_app_dir = "Documents";
      doc_app_dir += inlib::sep();
      doc_app_dir += m_app_name;
      std::string doc_dir = home_dir;
      doc_dir += inlib::sep();
      doc_dir += doc_app_dir;

      m_data_dir = doc_dir;
      m_out_dir = doc_dir;
      m_tmp_dir = "/tmp";
    }

    inlib::app_res_dir(exe_path,m_res_dir);

    if(m_verbose) {
      m_out << "exe_path : " << inlib::sout(exe_path) << std::endl;
      m_out << "home_dir : " << inlib::sout(home_dir) << std::endl;
      m_out << "data_dir : " << inlib::sout(m_data_dir) << std::endl;
      m_out << "res_dir : " << inlib::sout(m_res_dir) << std::endl;
      m_out << "out_dir : " << inlib::sout(m_out_dir) << std::endl;
      m_out << "tmp_dir : " << inlib::sout(m_tmp_dir) << std::endl;
    }
  }
  virtual ~session(){
    //if(m_verbose)
    //::printf("exlib::WebGL::session::~session() : %lu\n",(unsigned long)this);
    delete_mains();
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
private:
  session(const session& a_from):m_out(a_from.m_out){}
  session& operator=(const session&){return *this;}
public:
  bool create_main(unsigned int& a_mid,main_t*& a_main) {
    a_mid = 0;
    a_main = 0;

    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    unsigned int ww,wh;
    inlib::window_size_from_args(m_args,ww,wh);
    if(!ww||!wh) {
      m_out << "exlib::WebGL::session::initialize() : bad size." << std::endl;
      return false;
    }

    unsigned int compression;
    m_args.find<unsigned int>(s_arg_compression(),compression,3); //3 = gzip+base64
    if(m_verbose) {
      m_out << "exlib::WebGL::session::initialize() :"
                << " compression mode " << compression << "."
                << std::endl;
    }

    std::string bgcolor;
    m_args.find(s_arg_bgcolor(),bgcolor,"#F0F0F0");

    bool can_upload = m_args.is_arg(s_arg_can_upload());

    std::string DOCUMENT;
   {m_args.find(inlib::s_arg_document(),DOCUMENT);
    if(m_verbose) {
      m_out << "exlib::WebGL::session::initialize() :"
                << " document is " << inlib::sout(DOCUMENT) << "."
                << std::endl;
    }}

    unsigned int reply_compression;
    m_args.find<unsigned int>(s_arg_reply_compression(),reply_compression,0);

    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////

    inlib::WebGL::manager* _mgr = new inlib::WebGL::manager(m_out,m_gen_id,m_app_name,bgcolor);
    _mgr->set_compression(compression);
    main<APP_MAIN>* _main = new main<APP_MAIN>(m_out,m_data_dir,m_res_dir,m_out_dir,m_tmp_dir,m_verbose,ww,wh,can_upload,*_mgr);
    _main->m_reply_compression = reply_compression;
    if(DOCUMENT.size()) {
      _main->create_gui();
      bool done;
      _main->opener().open(DOCUMENT,inlib::file::s_format_guessed(),inlib::args(),done);
    }
    m_action_count++;
    a_mid = m_action_count;
    a_main = _main;
    m_mains[a_mid] = mgr_main_t(_mgr,_main);

    return true;
  }
  bool find_main(unsigned int a_id,main_t*& a_main) const {
    typename std::map<unsigned int,mgr_main_t>::const_iterator it = m_mains.find(a_id);
    if(it==m_mains.end()) {a_main = 0;return false;}
    a_main = (*it).second.second;
    return true;
  }
  bool delete_main(unsigned int a_id) {
    typename std::map<unsigned int,mgr_main_t>::iterator it = m_mains.find(a_id);
    if(it==m_mains.end()) return true;
    main<APP_MAIN>* _main = (*it).second.second;
    inlib::WebGL::manager* _mgr = (*it).second.first;
    m_mains.erase(it);
    delete _main;
    delete _mgr; //after _main
    ::printf("debug : delete_main : %u\n",a_id);
    return true;
  }
protected:
  void delete_mains() {
    inlib_typename_mforit(unsigned int,mgr_main_t,m_mains,it) {
      delete (*it).second.second; //main
      (*it).second.second = 0;
      delete (*it).second.first;  //mgr
      (*it).second.first = 0;
    }
    m_mains.clear();
  }
public:
  void http_failed(std::ostream& a_sout,const std::string& a_msg) {
    a_sout << s_failed() << " : " << a_msg;
    if(m_verbose) m_out << "exlib::WebGL::session :" << " failed : " << a_msg << std::endl;
  }
  void js_failed(std::ostream& a_reply_sout,const std::string& a_msg) {
    std::string msg = s_failed()+" : "+a_msg;
    a_reply_sout << "console.log(\"" << msg << "\");";
    if(m_verbose) m_out << "exlib::WebGL::session : " << msg << std::endl;
  }
  bool verbose() const {return m_verbose;}
  bool can_shutdown() const {return m_can_shutdown;}
  const std::string& res_dir() const {return m_res_dir;}
  const std::string& tmp_dir() const {return m_tmp_dir;}

protected:
  INLIB_CLASS_STRING_VALUE(empty,)
  INLIB_CLASS_STRING(mouse_down)
  INLIB_CLASS_STRING(mouse_up)
  INLIB_CLASS_STRING(mouse_move)
  INLIB_CLASS_STRING(idle_proc)
  INLIB_CLASS_STRING(end)
  INLIB_CLASS_STRING(resize)
public:
  bool dispatch_url(const std::string& a_url,std::ostream& a_reply_out,std::ostream& /*a_reply_sout*/,std::string& a_content_type) {
    a_content_type.clear();
    if(a_url=="/glMatrix-0.9.5.min.js") {
      std::stringstream js;
      inlib::WebGL::get_glMatrix_0_9_5_min_js(js);
      a_content_type = "text/javascript";
      a_reply_out << js.str();
      return true;

    } else if(a_url=="/inflate.min.js") {
      std::stringstream js;
      inlib::WebGL::get_inflate_min_js(js);
      a_content_type = "text/javascript";
      a_reply_out << js.str();
      return true;
    }

    return false; //not handled.
  }
  bool dispatch_cmd(const std::string& a_cmd,std::ostream& a_reply_out,std::ostream& a_reply_sout,std::string& a_content_type) {
    a_content_type.clear();

    if(m_verbose) m_out << "exlib::WebGL::session::dispatch_cmd : a_cmd : " << inlib::sout(a_cmd) << std::endl;

    std::string cmd = a_cmd;
    std::string rest;
    inlib::cmd::rest(cmd,rest);

    //if(m_verbose) m_out << "exlib::WebGL::session::dispatch_cmd : cmd : " << cmd << std::endl;

    if(cmd==s_empty()) {
      unsigned int mid;
      main_t* main_;
/*
      if(m_mains.size()) {
        typename std::map<unsigned int,mgr_main_t>::const_iterator it = m_mains.begin();
        mid = (*it).first;
        main_ = (*it).second.second;
        main_->reply_reload(mid,a_reply_out);
        ::printf("debug : create_main : existing id %u\n",mid);
        return true;
      }
*/
      if(!create_main(mid,main_)) {
        http_failed(a_reply_sout,"empty cmd : can't create main.");
        return true;
      }
      ::printf("debug : create_main : id %u\n",mid);
      main_->reply_reload(mid,a_reply_out);
      return true;

    } else if(cmd==s_mouse_down()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      int x,y;
      if((words.size()!=3)||(!inlib::to(words[0],mid))||(!inlib::to(words[1],x))||(!inlib::to(words[2],y))) {
        js_failed(a_reply_sout,"mouse_down : syntax error.");
        return true;
      }
      //::printf("debug : mouse_down : mid %d : %d %d\n",mid,x,y);
      main_t* main_ = 0;
      if(!find_main(mid,main_)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      main_t& _main = *main_;
      if(!_main.mouse_down(x,y)) return true;

      _main.reply_render(a_reply_out,a_content_type);

      return true;

    } else if(cmd==s_mouse_up()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      int x,y;
      if((words.size()!=3)||(!inlib::to(words[0],mid))||(!inlib::to(words[1],x))||(!inlib::to(words[2],y))) {
        js_failed(a_reply_sout,"mouse_up : syntax error.");
        return true;
      }
      main_t* main_ = 0;
      if(!find_main(mid,main_)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      main_t& _main = *main_;
      if(!_main.mouse_up(x,y)) return true;

      if(_main.to_exit()) {
        if(!delete_main(mid)) {
          js_failed(a_reply_sout,"main id not found.");
          return true;
        }
        a_content_type = "text/javascript";
        a_reply_out << "clear_page();";
        return true;
      }

      if(_main.m_have_to_upload_file) {
        _main.m_have_to_upload_file = false;
        a_content_type = "text/html";
        a_reply_out << "\
<html><head><title>exlib_WebGL_upload_form</title></head><body>\n\
<form action=\"exlib_upload_form_" << mid << "\" enctype=\"multipart/form-data\" method=\"post\">\n\
  <input type=\"file\" name=\"file\"><br>\n\
  <input type=\"submit\" value=\"Submit\">\n\
</form></body></html>\n\
";
        return true;
      }

      _main.reply_render(a_reply_out,a_content_type);

      if(_main.m_have_to_enable_anim) {
        _main.m_have_to_enable_anim = false;
        //a_reply.setContentType("text/javascript");
        a_reply_out << "g_idle_timer = setInterval(idle_proc,40);";
      }
      if(_main.m_have_to_disable_anim) {
        _main.m_have_to_disable_anim = false;
        //a_reply.setContentType("text/javascript");
        a_reply_out << "clearInterval(g_idle_timer);";
      }
      if(_main.m_have_to_set_cursor.size()) {
        //a_reply.setContentType("text/javascript");
        a_reply_out << "set_canvas_cursor(\"" << _main.m_have_to_set_cursor << "\");";
        _main.m_have_to_set_cursor.clear();
      }
      return true;

    } else if(cmd==s_mouse_move()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      int x,y;
      if((words.size()!=3)||(!inlib::to(words[0],mid))||(!inlib::to(words[1],x))||(!inlib::to(words[2],y))) {
        js_failed(a_reply_sout,"mouse_move : syntax error.");
        return true;
      }
      main_t* main_ = 0;
      if(!find_main(mid,main_)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      main_t& _main = *main_;
      if(!_main.mouse_move(x,y)) return true;

      _main.reply_render(a_reply_out,a_content_type);

      return true;

    } else if(cmd==s_idle_proc()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      if((words.size()!=1)||(!inlib::to(words[0],mid))) {
        js_failed(a_reply_sout,"idle_proc : syntax error.");
        return true;
      }
      main_t* main_ = 0;
      if(!find_main(mid,main_)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      main_t& _main = *main_;
      if(!_main.do_works()) return true;

      _main.reply_render(a_reply_out,a_content_type);

      return true;

    } else if(cmd==s_resize()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      int ww,wh;
      if((words.size()!=3)||(!inlib::to(words[0],mid))||(!inlib::to(words[1],ww))||(!inlib::to(words[2],wh))) {
        js_failed(a_reply_sout,"mouse_move : syntax error.");
        return true;
      }
      main_t* main_ = 0;
      if(!find_main(mid,main_)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      main_t& _main = *main_;
      //::printf("debug : set_size : %d %d\n",ww,wh);
      _main.set_size(ww,wh);
      _main.do_works();

      _main.reply_render(a_reply_out,a_content_type);

      return true;

    } else if(cmd==s_end()) {
      std::vector<std::string> words;
      inlib::words(rest," ",false,words);
      unsigned int mid;
      if((words.size()!=1)||(!inlib::to(words[0],mid))) {
        js_failed(a_reply_sout,"idle_proc : syntax error.");
        return true;
      }
      if(m_verbose) m_out << "exlib::WebGL : cmd=end : mid " << mid << "..." << std::endl;
      if(!delete_main(mid)) {
        js_failed(a_reply_sout,"main id not found.");
        return true;
      }
      if(m_verbose) m_out << "exlib::WebGL : cmd=end : mid " << mid << " done." << std::endl;
      return true;
    }

    return false; //a_cmd not handled.
  }

protected:
  std::ostream& m_out;
  inlib::args m_args;
  bool m_verbose;
  bool m_can_shutdown;
  std::string m_app_name;
  std::string m_data_dir;
  std::string m_res_dir;
  std::string m_out_dir;
  std::string m_tmp_dir;
  unsigned int m_gen_id;
  typedef typename std::pair<inlib::WebGL::manager*,main_t* > mgr_main_t;
  std::map<unsigned int,mgr_main_t> m_mains;
  unsigned int m_action_count;
};

}}

#endif

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat kernel

