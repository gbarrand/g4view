// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_xml_style
#define exlib_xml_style

#include <inlib/xml/styles>

#include "loader"

namespace exlib {
namespace xml {
  
inline bool load_style_file(std::ostream&,const std::string& a_file,inlib::xml::styles& a_styles) {
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_styles.out(),false);
  std::vector<std::string> tags;
  tags.push_back("styles");
  tags.push_back("style");
  tags.push_back("plotter_style");
  ml.set_tags(tags);
  if(!ml.load_file(a_file,false)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true; //File could be empty.
  return scan_style_tree(a_styles,*top);
}

inline bool load_style_string(inlib::xml::styles& a_styles,const std::string& a_string) {
  inlib::xml::default_factory factory;
  exlib::xml::loader ml(factory,a_styles.out(),false);
  std::vector<std::string> tags;
  tags.push_back("styles");
  tags.push_back("style");
  tags.push_back("plotter_style");
  ml.set_tags(tags);
  if(!ml.load_string(a_string)) return false;
  inlib::xml::tree* top = ml.top_item();
  if(!top) return true;
  return scan_style_tree(a_styles,*top);
}

}}

//exlib_build_use inlib expat

#endif
