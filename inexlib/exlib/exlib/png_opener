// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_png_opener
#define exlib_png_opener

#include <inlib/sg/iopener>
#include <inlib/sg/open_image_file>

#include "png"
#include "pngb"

namespace exlib {

class png_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::png_opener)
public:
  virtual parent* copy() const {return new png_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    a_is = png::is(a_path);
    return true;
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    png::reader rdr;
    if(!inlib::open_image_file(*_gv,rdr,a_path,a_args,m_mem_limit)) return false;
    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64 a_sz,const char* a_buffer,bool& a_is) const {
    a_is = pngb::is(a_sz,a_buffer);
    return true;
  }
  virtual bool open(inlib::uint64 a_sz,const char* a_buffer,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args& a_args,
                    bool& a_done) const {
    a_done = false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    if(!open_image_buffer(*_gv,a_sz,a_buffer,a_args,m_mem_limit)) return false;
    a_done = true;
    return true;
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args& a_args,
                    bool& a_done) const {
    return open(a_path,a_viewer,a_args,a_done);
  }
public:
  png_opener(unsigned int a_mem_limit)
  :m_mem_limit(a_mem_limit)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~png_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  png_opener(const png_opener& a_from)
  :parent(a_from)
  ,m_mem_limit(a_from.m_mem_limit)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  png_opener& operator=(const png_opener& a_from){
    m_mem_limit = a_from.m_mem_limit;
    return *this;
  }
protected:
  static bool open_image_buffer(inlib::sg::gui_viewer& a_gv,
                                inlib::uint64 a_sz,const char* a_buffer,
                                const inlib::args& a_args,
                                unsigned int a_mem_limit){
    std::ostream& out = a_gv.out();

    unsigned int w,h,bpp;
    unsigned char* buffer = 0;

    if(a_mem_limit) {
      if(!pngb::infos_buffer((unsigned int)a_sz,a_buffer,w,h,bpp)) {
        out << "exlib::jpeg_opener::open_image_buffer : read_infos failed." << std::endl;
        a_gv.map_warn_failed();
        return false;
      }
      if((w*h*bpp)>a_mem_limit) {

        //unsigned int sw;
        //unsigned int sh;
        //float aspect = float(w)/float(h);
        //if(aspect>=1) {
        //  sh = 2;
        //  sw = aspect*sh;
        //} else {
        //  sw = 2;
        //  sh = sw/aspect;
        //}

        unsigned int sw = 2;
        unsigned int sh = 2;
        while(true) {
          if(((2*sw)*(2*sh)*bpp)>a_mem_limit) break;
          sw *=2;
          sh *=2;
        }

        unsigned int sx = (w-sw)/2;
        unsigned int sy = (h-sh)/2;

        buffer = pngb::read_part(out,(unsigned int)a_sz,a_buffer,sx,sy,sw,sh,w,h,bpp);
      } else {
        buffer = pngb::read_buffer((unsigned int)a_sz,a_buffer,w,h,bpp);
      }
    } else {
      buffer = pngb::read_buffer((unsigned int)a_sz,a_buffer,w,h,bpp);
    }

    if(!buffer) {
      out << "exlib::png_opener::open_image_buffer : read failed." << std::endl;
      a_gv.map_warn_failed();
      return false;
    }

    inlib::img<inlib::byte> img(w,h,bpp,buffer,true);

    load_img(a_gv,img,inlib::colorf_lightgrey());

    //see cbk::diaporama
    //if(!a_args.is_arg(inlib::sg::s_no_hide_menu())) a_gv.hide_main_menu();
    a_gv.hide_main_menu();

    return true;
  }

protected:
  unsigned int m_mem_limit;
};

}

//exlib_build_use inlib png zlib kernel

#endif


