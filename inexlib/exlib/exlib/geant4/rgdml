// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_rgdml
#define exlib_geant4_rgdml

#include <G4NistManager.hh>

#include <G4ReflectedSolid.hh>
#include <G4TwistedBox.hh>
#include <G4TwistedTrap.hh>
#include <G4TwistedTrd.hh>

#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=1031
// There is a typedef function in G4SimpleIntegration.hh that clashes with a "using namespace std;"
// found in Pythia includes (PythiaStdlib.h) and a "function" class found in the functional include of Xcode-8.3.3.
#define function EXLIB_function
#include <G4TwistedTubs.hh>
#undef EXLIB_function
#else
#include <G4TwistedTubs.hh>
#endif

#include <G4CutTubs.hh>
#include <G4UnionSolid.hh>
#include <G4SubtractionSolid.hh>
#include <G4IntersectionSolid.hh>
#include <G4DisplacedSolid.hh>
#include <G4Box.hh>
#include <G4Tubs.hh>
#include <G4EllipticalTube.hh>
#include <G4Ellipsoid.hh>
#include <G4Sphere.hh>
#include <G4Cons.hh>
#include <G4Torus.hh>
#include <G4EllipticalCone.hh>
#include <G4Hype.hh>
#include <G4Orb.hh>
#include <G4Para.hh>
#include <G4Paraboloid.hh>
#include <G4Polycone.hh>
#include <G4Tet.hh>
#include <G4GenericTrap.hh>
#include <G4Trap.hh>
#include <G4Trd.hh>
#include <G4Polyhedra.hh>
#include <G4ExtrudedSolid.hh>

#include <G4QuadrangularFacet.hh>
#include <G4TessellatedSolid.hh>
#include <G4TriangularFacet.hh>

#include <G4LogicalVolume.hh>
#include <G4PVPlacement.hh>
#include <G4LogicalBorderSurface.hh>
#include <G4LogicalSkinSurface.hh>
#include <G4PVParameterised.hh>
#include <G4PVReplica.hh>
#include <G4AssemblyVolume.hh>

#include <G4OpticalSurface.hh>
#include <G4ReflectionFactory.hh>
#include <G4VPVParameterisation.hh>
//#include <G4PVDivisionFactory.hh>

#include "../xml/base_gdml"

namespace exlib {
namespace geant4 {

class Transform3D : public HepGeom::Transform3D {
public:
  Transform3D(const inlib::mat4d& a_m)
  :HepGeom::Transform3D(a_m(0,0),a_m(0,1),a_m(0,2),a_m(0,3),
                        a_m(1,0),a_m(1,1),a_m(1,2),a_m(1,3),
                        a_m(2,0),a_m(2,1),a_m(2,2),a_m(2,3))
  {}
public:
  Transform3D(const Transform3D& a_from):HepGeom::Transform3D(a_from){}
  Transform3D& operator=(const Transform3D& a_from){
    HepGeom::Transform3D::operator=(a_from);
    return *this;
  }  
};

class rgdml
:public xml::base_gdml 
<G4Element
,G4Material
,G4LogicalVolume
,G4VPhysicalVolume
,G4AssemblyVolume
,G4OpticalSurface
,G4SurfaceProperty
,G4LogicalSurface
,G4VSolid>
{

  typedef xml::base_gdml 
<G4Element
,G4Material
,G4LogicalVolume
,G4VPhysicalVolume
,G4AssemblyVolume
,G4OpticalSurface
,G4SurfaceProperty
,G4LogicalSurface
,G4VSolid> parent;

protected:
  G4State cvt_state(mat_state a_state) {
    switch(a_state){
    case mat_state_undefined:return kStateUndefined;
    case mat_state_solid:return kStateSolid;
    case mat_state_liquid:return kStateLiquid;
    case mat_state_gas:return kStateGas;
    }
    return kStateUndefined;
  }

  G4SurfaceType cvt_surface_type(surface_type a_type) {
    switch(a_type){
    case surface_dielectric_metal:return dielectric_metal;
    case surface_dielectric_dielectric:return dielectric_dielectric;
    case surface_dielectric_LUT:return dielectric_LUT;
    case surface_firsov:return firsov;
    case surface_x_ray:return x_ray;
    };
    return dielectric_metal;
  }

  G4OpticalSurfaceFinish cvt_optical_surface_finish
    (optical_surface_finish a_finish){
    switch(a_finish){
    case optical_surface_polished:return polished;
    case optical_surface_polishedfrontpainted:return polishedfrontpainted;
    case optical_surface_polishedbackpainted:return polishedbackpainted;

    case optical_surface_ground:return ground;
    case optical_surface_groundfrontpainted:return groundfrontpainted;
    case optical_surface_groundbackpainted:return groundbackpainted;

    case optical_surface_polishedlumirrorair:return polishedlumirrorair;
    case optical_surface_polishedlumirrorglue:return polishedlumirrorglue;
    case optical_surface_polishedair:return polishedair;
    case optical_surface_polishedteflonair:return polishedteflonair;
    case optical_surface_polishedtioair:return polishedtioair;
    case optical_surface_polishedtyvekair:return polishedtyvekair;
    case optical_surface_polishedvm2000air:return polishedvm2000air;
    case optical_surface_polishedvm2000glue:return polishedvm2000glue;

    case optical_surface_etchedlumirrorair:return etchedlumirrorair;
    case optical_surface_etchedlumirrorglue:return etchedlumirrorglue;
    case optical_surface_etchedair:return etchedair;
    case optical_surface_etchedteflonair:return etchedteflonair;
    case optical_surface_etchedtioair:return etchedtioair;
    case optical_surface_etchedtyvekair:return etchedtyvekair;
    case optical_surface_etchedvm2000air:return etchedvm2000air;
    case optical_surface_etchedvm2000glue:return etchedvm2000glue;

    case optical_surface_groundlumirrorair:return groundlumirrorair;
    case optical_surface_groundlumirrorglue:return groundlumirrorglue;
    case optical_surface_groundair:return groundair;
    case optical_surface_groundteflonair:return groundteflonair;
    case optical_surface_groundtioair:return groundtioair;
    case optical_surface_groundtyvekair:return groundtyvekair;
    case optical_surface_groundvm2000air:return groundvm2000air;
    case optical_surface_groundvm2000glue:return groundvm2000glue;
    };

    return polished;
  }

  G4OpticalSurfaceModel cvt_optical_surface_model
                          (optical_surface_model a_model){
    switch(a_model){
    case optical_surface_glisur:return glisur;
    case optical_surface_unified:return unified;
    case optical_surface_LUT:return LUT;
    };
    return glisur;
  }

  EAxis cvt_axis_type(axis_type a_axis){
    switch(a_axis){
    case axis_XAxis:return kXAxis;
    case axis_YAxis:return kYAxis;
    case axis_ZAxis:return kZAxis;
    case axis_Rho:return kRho;
    case axis_Radial3D:return kRadial3D;
    case axis_Phi:return kPhi;
    case axis_Undefined:return kUndefined;
    };
    return kUndefined;
  }

public:
  virtual G4Element* create_element(const std::string& a_name,
                                    const std::string& a_symbol,
                                    double  a_Zeff,
                                    double  a_Aeff){
    return new G4Element(a_name,a_symbol,a_Zeff,a_Aeff);
  }

  virtual G4Material* find_material(const std::string& a_name) {
    return G4NistManager::Instance()->FindOrBuildMaterial(a_name);
  }

  virtual G4Material* create_material(const std::string& a_name,
                                      double  a_density,
                                      mat_state a_state,
                                      double  a_temp,
                                      double  a_pressure,
                                      double  a_z,
                                      double  a_a){
    return new G4Material(a_name,
                          a_z,a_a,
                          a_density,cvt_state(a_state),a_temp,a_pressure);
  }

  virtual G4Material* create_material(const std::string& a_name,
                                      double a_density,
                                      mat_state a_state,
                                      double a_temp,
                                      double a_pressure,
      const std::vector< std::pair<G4Material*,double> >& a_mat_fracs,
      const std::vector< std::pair<G4Element*,double> >& a_elem_fracs,
      const std::vector< std::pair<G4Element*,int> >& a_elem_ns){

    size_t number = a_mat_fracs.size()+a_elem_fracs.size()+a_elem_ns.size();
    if(!number) return 0;

    G4Material* material =
      new G4Material(a_name,a_density,G4int(number),
                     cvt_state(a_state),a_temp,a_pressure);

   {std::vector< std::pair<G4Material*,double> >::const_iterator it;
    for(it=a_mat_fracs.begin();it!=a_mat_fracs.end();++it){
      material->AddMaterial((*it).first,(*it).second);
    }}
   {std::vector< std::pair<G4Element*,double> >::const_iterator it;
    for(it=a_elem_fracs.begin();it!=a_elem_fracs.end();++it){
      material->AddElement((*it).first,(*it).second);
    }}
   {std::vector< std::pair<G4Element*,int> >::const_iterator it;
    for(it=a_elem_ns.begin();it!=a_elem_ns.end();++it){
      material->AddElement((*it).first,(*it).second);
    }}

    return material;
  }

  virtual void material_set_MEE(G4Material& a_material,double a_value) {
    a_material.GetIonisation()->SetMeanExcitationEnergy(a_value);
  }

  virtual void material_add_property(G4Material& a_material,
                                     const std::string& a_name,
                                     double a_value) {
    G4MaterialPropertiesTable* matprop =
      a_material.GetMaterialPropertiesTable();
    if(!matprop) {
      matprop = new G4MaterialPropertiesTable();
      a_material.SetMaterialPropertiesTable(matprop);
    }
    matprop->AddConstProperty(a_name.c_str(),a_value);
  }

  virtual void material_add_property(G4Material& a_material,
                                     const std::string& a_name,
                 const std::vector< std::pair<double,double> >& a_vals) {
    G4MaterialPropertiesTable* matprop =
      a_material.GetMaterialPropertiesTable();
    if(!matprop) {
      matprop = new G4MaterialPropertiesTable();
      a_material.SetMaterialPropertiesTable(matprop);
    }
    G4MaterialPropertyVector* propvect = new G4MaterialPropertyVector(0,0,0);
    std::vector< std::pair<double,double> >::const_iterator it;
    for(it=a_vals.begin();it!=a_vals.end();++it) {
      propvect->InsertValues((*it).first,(*it).second); 
    }   
    matprop->AddProperty(a_name.c_str(),propvect);
  }

  virtual bool solid_name(const G4VSolid& a_solid,std::string& a_s) const {
    a_s = a_solid.GetName();
    return true;
  }
  virtual bool volume_name(const G4LogicalVolume& a_volume,std::string& a_s) const {
    a_s = a_volume.GetName();
    return true;
  }

  virtual G4VSolid* create_box(const std::string& a_name,
                               double a_dx,double a_dy,double a_dz) {
    return new G4Box(a_name,a_dx,a_dy,a_dz);
  }
  virtual G4VSolid* create_tube(const std::string& a_name,
                                double a_rmin,double a_rmax,
                                double a_z,
                                double a_phi,double a_dphi) { 
    return new G4Tubs(a_name,a_rmin,a_rmax,a_z,a_phi,a_dphi);
  }
  virtual G4VSolid* create_elliptical_tube(const std::string& a_name,
                                  double a_dx,double a_dy,double a_dz) {
    return new G4EllipticalTube(a_name,a_dx,a_dy,a_dz);
  }
  virtual G4VSolid* create_ellipsoid(const std::string& a_name,
                                     double a_ax,double a_by,double a_cz,
                                     double a_zcut1,double a_zcut2) {
    return new G4Ellipsoid(a_name,a_ax,a_by,a_cz,a_zcut1,a_zcut2);
  }
  virtual G4VSolid* create_sphere(const std::string& a_name,
                                  double a_rmin,double a_rmax,
                                  double a_phi,double a_dphi,
                                  double a_theta,double a_dtheta) { 
    return new G4Sphere(a_name,a_rmin,a_rmax,a_phi,a_dphi,a_theta,a_dtheta);
  }
  virtual G4VSolid* create_cone(const std::string& a_name,
                                double a_rmin1,double a_rmax1,
                                double a_rmin2,double a_rmax2,
                                double a_z,
                                double a_phi,double a_dphi) {
    return new G4Cons(a_name,a_rmin1,a_rmax1,a_rmin2,a_rmax2,a_z,a_phi,a_dphi);
  }
  virtual G4VSolid* create_torus(const std::string& a_name,
                                 double a_rmin,double a_rmax,
                                 double a_rtor,
                                 double a_phi,double a_dphi) {

    return new G4Torus(a_name,a_rmin,a_rmax,a_rtor,a_phi,a_dphi);
  }
  virtual G4VSolid* create_elliptical_cone(const std::string& a_name,
                                           double a_dx,double a_dy,
                                           double a_zmax,double a_zcut){
    return new G4EllipticalCone(a_name,a_dx,a_dy,a_zmax,a_zcut);
  }
  virtual G4VSolid* create_hype(const std::string& a_name,
                                double a_rmin,double a_rmax,
                                double a_inst,double a_outst,
                                double a_z){
    return new G4Hype(a_name,a_rmin,a_rmax,a_inst,a_outst,a_z);
  }
  virtual G4VSolid* create_orb(const std::string& a_name,
                                double a_r){
    return new G4Orb(a_name,a_r);
  }
  virtual G4VSolid* create_para(const std::string& a_name,
                                double a_x,double a_y,double a_z,
                                double a_alpha,double a_theta,double a_phi) {
    return new G4Para(a_name,a_x,a_y,a_z,a_alpha,a_theta,a_phi);
  }
  virtual G4VSolid* create_paraboloid(const std::string& a_name,
                                      double a_dz,double a_rlo,double a_rhi) {
    return new G4Paraboloid(a_name,a_dz,a_rlo,a_rhi);
  }
  virtual G4VSolid* create_tet(const std::string& a_name,
                               const inlib::vec3d& a_anchor,
                               const inlib::vec3d& a_p2,
                               const inlib::vec3d& a_p3,
                               const inlib::vec3d& a_p4){
    return new G4Tet(a_name,
                     G4ThreeVector(a_anchor.x(),a_anchor.y(),a_anchor.z()),
                     G4ThreeVector(a_p2.x(),a_p2.y(),a_p2.z()),
                     G4ThreeVector(a_p3.x(),a_p3.y(),a_p3.z()),
                     G4ThreeVector(a_p4.x(),a_p4.y(),a_p4.z()));
  }
  virtual G4VSolid* create_generic_trap(const std::string& a_name,
                                        double a_dz,
                                        const double a_p[16]){
    std::vector<G4TwoVector> vertices;
    vertices.push_back(G4TwoVector(a_p[ 0],a_p[ 1]));
    vertices.push_back(G4TwoVector(a_p[ 2],a_p[ 3]));
    vertices.push_back(G4TwoVector(a_p[ 4],a_p[ 5]));
    vertices.push_back(G4TwoVector(a_p[ 6],a_p[ 7]));
    vertices.push_back(G4TwoVector(a_p[ 8],a_p[ 9]));
    vertices.push_back(G4TwoVector(a_p[10],a_p[11]));
    vertices.push_back(G4TwoVector(a_p[12],a_p[13]));
    vertices.push_back(G4TwoVector(a_p[14],a_p[15]));

    return new G4GenericTrap(a_name,a_dz,vertices);
  }
  virtual G4VSolid* create_trap(const std::string& a_name,
                                double a_z,
                                double a_theta,double a_phi,
                                double a_y1,double a_x1,double a_x2,
                                double a_alpha1,
                                double a_y2,double a_x3,double a_x4,
                                double a_alpha2){
    return new G4Trap(a_name,
                      a_z,a_theta,a_phi,
                      a_y1,a_x1,a_x2,
                      a_alpha1,
                      a_y2,a_x3,a_x4,
                      a_alpha2);
  }
  virtual G4VSolid* create_trd(const std::string& a_name,
                               double a_x1,double a_x2,
                               double a_y1,double a_y2,
                               double a_z){
    return new G4Trd(a_name,a_x1,a_x2,a_y1,a_y2,a_z);
  }
  virtual G4VSolid* create_twisted_box(const std::string& a_name,
                                       double a_phi_twist,
                                       double a_x,double a_y,double a_z){
    return new G4TwistedBox(a_name,a_phi_twist,a_x,a_y,a_z);
  }
  virtual G4VSolid* create_twisted_trap(const std::string& a_name,
                                        double a_phi_twist,
                                        double a_z,
                                        double a_theta,double a_phi,
                                        double a_y1,double a_x1,double a_x2,
                                        double a_y2,double a_x3,double a_x4,
                                        double a_alpha){
    return new G4TwistedTrap(a_name,a_phi_twist,
                             a_z,a_theta,a_phi,
                             a_y1,a_x1,a_x2,
                             a_y2,a_x3,a_x4,
                             a_alpha);
  }
  virtual G4VSolid* create_twisted_trd(const std::string& a_name,
                                       double a_x1,double a_x2,
                                       double a_y1,double a_y2,
                                       double a_z,
                                       double a_phi_twist){
    return new G4TwistedTrd(a_name,a_x1,a_x2,a_y1,a_y2,a_z,a_phi_twist);
  }
  virtual G4VSolid* create_twisted_tubs(const std::string& a_name,
                                        double a_twisted_angle,
                                        double a_end_inner_rad, 
                                        double a_end_outer_rad, 
                                        double a_zlen,
                                        double a_phi){
    return new G4TwistedTubs(a_name,
                             a_twisted_angle,a_end_inner_rad,
                             a_end_outer_rad,a_zlen,a_phi);
  }
  virtual G4VSolid* create_cut_tubs(const std::string& a_name,
                                    double a_rmin,double a_rmax,
                                    double a_z,
                                    double a_phi,double a_dphi,
                                double a_lowX,double a_lowY,double a_lowZ,
                                double a_highX,double a_highY,double a_highZ){
    G4ThreeVector lowNorm(0);
    lowNorm.setX(a_lowX);
    lowNorm.setY(a_lowY);
    lowNorm.setZ(a_lowZ);

    G4ThreeVector highNorm(0);
    highNorm.setX(a_highX);
    highNorm.setY(a_highY);
    highNorm.setZ(a_highZ);

    return new G4CutTubs(a_name,
                         a_rmin,a_rmax,a_z,
                         a_phi,a_dphi,
                         lowNorm,highNorm);
  }
  virtual G4VSolid* create_reflected_solid(const std::string& a_name,
                                           G4VSolid* a_solid,
                                       double a_rx,double a_ry,double a_rz,
                                       double a_dx,double a_dy,double a_dz,
                                       double a_sx,double a_sy,double a_sz){
    G4RotationMatrix rot;
    rot.rotateX(a_rx);
    rot.rotateY(a_ry);
    rot.rotateZ(a_rz);

    G4ThreeVector position;
    position.setX(a_dx);
    position.setY(a_dy);
    position.setZ(a_dz);

    G4Transform3D transform(rot,position);
    transform = transform*G4Scale3D(a_sx,a_sy,a_sz);
          
    return new G4ReflectedSolid(a_name,a_solid,transform);

  }

  virtual G4VSolid* create_polyhedra(const std::string& a_name,
                                     double a_phi,double a_dphi,
                            unsigned int a_numsides,unsigned int a_numZPlanes,
                            const double a_zPlane[],
                            const double a_rInner[],
                            const double a_rOuter[]){
    return new G4Polyhedra(a_name,a_phi,a_dphi,a_numsides,a_numZPlanes,
                           a_zPlane,a_rInner,a_rOuter);
  }
  virtual G4VSolid* create_polycone(const std::string& a_name,
                                    double a_phi,double a_dphi,
                            unsigned int a_numZPlanes,
                            const double a_zPlane[],
                            const double a_rInner[],
                            const double a_rOuter[]){
    return new G4Polycone(a_name,a_phi,a_dphi,a_numZPlanes,
                          a_zPlane,a_rInner,a_rOuter);
  }

  virtual G4VSolid* create_extruded_solid(const std::string& a_name,
                  const std::vector< std::pair<double,double> >& a_vs,
                  const std::vector<zsection>& a_zs){
    std::vector<G4TwoVector> vs;
   {std::vector< std::pair<double,double> >::const_iterator it;    
    for(it=a_vs.begin();it!=a_vs.end();++it){
      vs.push_back(G4TwoVector((*it).first,(*it).second));
    }}

    std::vector<G4ExtrudedSolid::ZSection> zs;
   {std::vector<zsection>::const_iterator it;    
    for(it=a_zs.begin();it!=a_zs.end();++it){
      zs.push_back(G4ExtrudedSolid::ZSection
        ((*it).m_Z,
         G4TwoVector((*it).m_offset_x,(*it).m_offset_x),
         (*it).m_scale));
    }}

    return new G4ExtrudedSolid(a_name,vs,zs);
  }

  virtual G4VSolid* create_boolean(const std::string& a_name,
                                   op_type a_op,
                                   G4VSolid* a_first,
                                   G4VSolid* a_second,
                                   const inlib::mat4d& a_transform){

    Transform3D tsf(a_transform);
    if(a_op==op_union) {
      return new G4UnionSolid(a_name,a_first,a_second,tsf);
    } else if(a_op==op_intersection) {
      return new G4IntersectionSolid(a_name,a_first,a_second,tsf);
    } else if(a_op==op_subtraction) {
      return new G4SubtractionSolid(a_name,a_first,a_second,tsf);
    } else {
      return 0;
    }
  }
  virtual G4VSolid* create_displaced(const std::string& a_name,
                                     G4VSolid* a_solid,
                                     const inlib::mat4d& a_transform){
    Transform3D tsf(a_transform);
    return new G4DisplacedSolid(a_name,a_solid,tsf);
  }
  virtual G4VSolid* create_tessellated(const std::string& a_name,
                        const std::vector<inlib::xml::triangular_facet>& a_tris,
                        const std::vector<inlib::xml::quadrangular_facet>& a_quads){
    G4TessellatedSolid* solid = new G4TessellatedSolid(a_name);
   {std::vector<inlib::xml::triangular_facet>::const_iterator it;
    for(it=a_tris.begin();it!=a_tris.end();++it){
      solid->AddFacet
        (new G4TriangularFacet
               (G4ThreeVector((*it).m_1.x(),(*it).m_1.y(),(*it).m_1.z()),
                G4ThreeVector((*it).m_2.x(),(*it).m_2.y(),(*it).m_2.z()),
                G4ThreeVector((*it).m_3.x(),(*it).m_3.y(),(*it).m_3.z()),
                (*it).m_type==inlib::xml::facet_vertex_absolute?ABSOLUTE:RELATIVE));
    }}
   {std::vector<inlib::xml::quadrangular_facet>::const_iterator it;
    for(it=a_quads.begin();it!=a_quads.end();++it){
      solid->AddFacet
        (new G4QuadrangularFacet
               (G4ThreeVector((*it).m_1.x(),(*it).m_1.y(),(*it).m_1.z()),
                G4ThreeVector((*it).m_2.x(),(*it).m_2.y(),(*it).m_2.z()),
                G4ThreeVector((*it).m_3.x(),(*it).m_3.y(),(*it).m_3.z()),
                G4ThreeVector((*it).m_4.x(),(*it).m_4.y(),(*it).m_4.z()),
                (*it).m_type==inlib::xml::facet_vertex_absolute?ABSOLUTE:RELATIVE));
    }}
    solid->SetSolidClosed(true);  
    return solid;
  }

  virtual G4SurfaceProperty* create_optical_surface(const std::string& a_name,
                              optical_surface_model a_model,
                              optical_surface_finish a_finish,
                              surface_type a_type,
                              double a_value) {
    return new G4OpticalSurface(a_name,
                 cvt_optical_surface_model(a_model),
                 cvt_optical_surface_finish(a_finish),
                 cvt_surface_type(a_type),
                 a_value);
  }

  virtual G4LogicalVolume* pv_lv(const G4VPhysicalVolume& a_pv) const { 
    return a_pv.GetLogicalVolume();
  }

  virtual void pv_set_name(G4VPhysicalVolume& a_pv,const std::string& a_name){
    a_pv.SetName(a_name);
  }

  virtual G4LogicalSurface*
    create_logical_border_surface(const std::string& a_name,
                                  G4VPhysicalVolume* a_pv1,
                                  G4VPhysicalVolume* a_pv2,
                                  G4SurfaceProperty* a_prop){
    return new G4LogicalBorderSurface(a_name,a_pv1,a_pv2,a_prop);
  }
  virtual G4LogicalSurface*
    create_logical_skin_surface(const std::string& a_name,
                                G4LogicalVolume* a_volume,
                                G4SurfaceProperty* a_prop){
    return new G4LogicalSkinSurface(a_name,a_volume,a_prop);
  }
  virtual G4LogicalVolume* create_logical_volume(const std::string& a_name,
                                                 G4VSolid* a_solid,
                                                 G4Material* a_material){
    return new G4LogicalVolume(a_solid,a_material,a_name,0,0,0);
  }

  virtual G4VPhysicalVolume* create_pv_placement(const std::string& a_name,
                                                 G4LogicalVolume* a_volume,
                                                 G4LogicalVolume* a_mother,
                                                 const inlib::vec3d& a_rot,
                                                 const inlib::vec3d& a_trs){
    G4RotationMatrix* rot = new G4RotationMatrix;
    rot->rotateX(a_rot.x());
    rot->rotateY(a_rot.y());
    rot->rotateZ(a_rot.z());
    return new G4PVPlacement(rot,
                             G4ThreeVector(a_trs.x(),a_trs.y(),a_trs.z()),
                             a_volume,a_name,a_mother,
                             false,0,false);
  }

  virtual G4AssemblyVolume* create_assembly(){
    return new G4AssemblyVolume();
  }

  virtual void place_assembly(G4AssemblyVolume& a_assembly,
                              G4LogicalVolume* a_mother,
                              const inlib::vec3d& a_rot,
                              const inlib::vec3d& a_trs,
                              const inlib::vec3d& a_sca){
    G4RotationMatrix rot;
    rot.rotateX(a_rot.x());
    rot.rotateY(a_rot.y());
    rot.rotateZ(a_rot.z());
    G4Transform3D transform(rot.inverse(),
                            G4ThreeVector(a_trs.x(),a_trs.y(),a_trs.z()));
    transform = transform*G4Scale3D(a_sca.x(),a_sca.y(),a_sca.z());
    bool check = false;
    a_assembly.MakeImprint(a_mother,transform,0,check);
  }

  virtual void assembly_add_volume(G4AssemblyVolume& a_assembly,
                                   G4LogicalVolume* a_volume,
                                   const inlib::vec3d& a_rot,
                                   const inlib::vec3d& a_trs,
                                   const inlib::vec3d& a_sca){
    G4RotationMatrix rot;
    rot.rotateX(a_rot.x());
    rot.rotateY(a_rot.y());
    rot.rotateZ(a_rot.z());
    G4Transform3D transform(rot.inverse(),
                            G4ThreeVector(a_trs.x(),a_trs.y(),a_trs.z()));
    transform = transform*G4Scale3D(a_sca.x(),a_sca.y(),a_sca.z());
    a_assembly.AddPlacedVolume(a_volume,transform);
  }


  virtual G4VPhysicalVolume* create_pv_replica(const std::string& a_name,
                                   G4LogicalVolume* a_volume,
                                   G4LogicalVolume* a_mother,
                                   axis_type a_axis,
                                   unsigned int a_number,
                                   double a_width,
                                   double a_offset){
    return new G4PVReplica(a_name,a_volume,a_mother,
                           cvt_axis_type(a_axis),a_number,a_width,a_offset);
  }

  virtual std::pair<G4VPhysicalVolume*,G4VPhysicalVolume*>
    divide_lv(const std::string& a_name,
              G4LogicalVolume* a_volume,
              G4LogicalVolume* a_mother,
              axis_type a_axis, 
              unsigned int a_number, 
              double a_width,double a_offset){
    //G4PVDivisionFactory::GetInstance();
    return G4ReflectionFactory::Instance()->Divide
            (a_name,a_volume,a_mother,cvt_axis_type(a_axis),
             int(a_number),a_width,a_offset);
  }
  virtual std::pair<G4VPhysicalVolume*,G4VPhysicalVolume*>
    divide_lv(const std::string& a_name,
              G4LogicalVolume* a_volume,
              G4LogicalVolume* a_mother,
              axis_type a_axis, 
              unsigned int a_number, 
              double a_offset){
    //G4PVDivisionFactory::GetInstance();
    return G4ReflectionFactory::Instance()->Divide
            (a_name,a_volume,a_mother,cvt_axis_type(a_axis),
             int(a_number),a_offset);
  }
  virtual std::pair<G4VPhysicalVolume*,G4VPhysicalVolume*>
    divide_lv(const std::string& a_name,
              G4LogicalVolume* a_volume,
              G4LogicalVolume* a_mother,
              axis_type a_axis, 
              double a_width,double a_offset){
    //G4PVDivisionFactory::GetInstance();
    return G4ReflectionFactory::Instance()->Divide
            (a_name,a_volume,a_mother,cvt_axis_type(a_axis),
             a_width,a_offset);
  }

protected:
  class parameterisation : public G4VPVParameterisation {
  public:
    parameterisation(std::ostream& a_out)
    :G4VPVParameterisation()
    ,m_out(a_out)
    {}
    virtual ~parameterisation(){}
  protected:
    parameterisation(const parameterisation& a_from)
    :G4VPVParameterisation(a_from)
    ,m_out(a_from.m_out)
    {}
    parameterisation& operator=(const parameterisation&){return *this;}
  protected:
    virtual void ComputeTransformation(const G4int index,
                                       G4VPhysicalVolume* physvol) const {
      const inlib::vec3d& p = m_params[index].m_pos;
      physvol->SetTranslation(G4ThreeVector(p.x(),p.y(),p.z()));

      const inlib::vec3d& r = m_params[index].m_rot;
      G4RotationMatrix* rot = new G4RotationMatrix;
      rot->rotateX(r.x());
      rot->rotateY(r.y());
      rot->rotateZ(r.z());
      physvol->SetRotation(rot);
    }

    virtual void ComputeDimensions(G4Box& box,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      box.SetXHalfLength(m_params[index].m_dim[0]);
      box.SetYHalfLength(m_params[index].m_dim[1]);
      box.SetZHalfLength(m_params[index].m_dim[2]);
    }

    virtual void ComputeDimensions(G4Trd& trd,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      trd.SetXHalfLength1(m_params[index].m_dim[0]);
      trd.SetXHalfLength2(m_params[index].m_dim[1]);
      trd.SetYHalfLength1(m_params[index].m_dim[2]);
      trd.SetYHalfLength2(m_params[index].m_dim[3]);
      trd.SetZHalfLength(m_params[index].m_dim[4]);
    }

    virtual void ComputeDimensions(G4Trap& trap,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      trap.SetAllParameters(m_params[index].m_dim[0], // Dz
                            m_params[index].m_dim[1], // Theta
                            m_params[index].m_dim[2], // Phi
                            m_params[index].m_dim[3], // Dy1
                            m_params[index].m_dim[4], // Dx1
                            m_params[index].m_dim[5], // Dx2
                            m_params[index].m_dim[6], // pAlp1,
                            m_params[index].m_dim[7], // pDy2,
                            m_params[index].m_dim[8], // pDx3,
                            m_params[index].m_dim[9], // pDx4,
                            m_params[index].m_dim[10]); // pAlp2
    }

    virtual void ComputeDimensions(G4Tubs& tubs,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      tubs.SetInnerRadius(m_params[index].m_dim[0]);
      tubs.SetOuterRadius(m_params[index].m_dim[1]);
      tubs.SetZHalfLength(m_params[index].m_dim[2]);
      tubs.SetStartPhiAngle(m_params[index].m_dim[3]);
      tubs.SetDeltaPhiAngle(m_params[index].m_dim[4]);
    }

    virtual void ComputeDimensions(G4Cons& cons,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      cons.SetInnerRadiusMinusZ(m_params[index].m_dim[0]);
      cons.SetOuterRadiusMinusZ(m_params[index].m_dim[1]);
      cons.SetInnerRadiusPlusZ(m_params[index].m_dim[2]);
      cons.SetOuterRadiusPlusZ(m_params[index].m_dim[3]);
      cons.SetZHalfLength(m_params[index].m_dim[4]);
      cons.SetStartPhiAngle(m_params[index].m_dim[5]);
      cons.SetDeltaPhiAngle(m_params[index].m_dim[6]);
    }
   
    virtual void ComputeDimensions(G4Sphere& sphere,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      sphere.SetInsideRadius(m_params[index].m_dim[0]);
      sphere.SetOuterRadius(m_params[index].m_dim[1]);
      sphere.SetStartPhiAngle(m_params[index].m_dim[2]);
      sphere.SetDeltaPhiAngle(m_params[index].m_dim[3]);
      sphere.SetStartThetaAngle(m_params[index].m_dim[4]);
      sphere.SetDeltaThetaAngle(m_params[index].m_dim[5]);
    }

    virtual void ComputeDimensions(G4Orb& orb,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      orb.SetRadius(m_params[index].m_dim[0]);
    }

    virtual void ComputeDimensions(G4Torus& torus,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      torus.SetAllParameters(m_params[index].m_dim[0], // pRmin
                             m_params[index].m_dim[1], // pRmax
                             m_params[index].m_dim[2], // pRtor
                             m_params[index].m_dim[3], // pSPhi
                             m_params[index].m_dim[4]); // pDPhi
    }

    virtual void ComputeDimensions(G4Para& para,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      para.SetXHalfLength(m_params[index].m_dim[0]);
      para.SetYHalfLength(m_params[index].m_dim[1]);
      para.SetZHalfLength(m_params[index].m_dim[2]);
      para.SetAlpha(m_params[index].m_dim[3]);
      para.SetTanAlpha(std::tan(m_params[index].m_dim[3]));
      para.SetThetaAndPhi(m_params[index].m_dim[4],m_params[index].m_dim[5]);
    }

    virtual void ComputeDimensions(G4Hype& hype,
                                   const G4int index,
                                   const G4VPhysicalVolume*) const {
      hype.SetInnerRadius(m_params[index].m_dim[0]);
      hype.SetOuterRadius(m_params[index].m_dim[1]);
      hype.SetZHalfLength(m_params[index].m_dim[4]);
      hype.SetInnerStereo(m_params[index].m_dim[2]);
      hype.SetOuterStereo(m_params[index].m_dim[3]);
    }

    virtual void ComputeDimensions(G4Polycone&,
                                   const G4int,
                                   const G4VPhysicalVolume*) const {
      m_out << "parameterisation::ComputeDimensions :"
            << " parameterisation of G4Polycone not implemented yet."
            << std::endl;
    }

    virtual void ComputeDimensions(G4Polyhedra&,
                                   const G4int,
                                   const G4VPhysicalVolume*) const {
      m_out << "parameterisation::ComputeDimensions :"
            << " parameterisation of G4Polyhedra not implemented yet."
            << std::endl;
    }
  public:
    std::ostream& m_out;
    std::vector<inlib::xml::PARAMETER> m_params;
  };

public:
  virtual G4VPhysicalVolume* create_pv_parameterised(const std::string& a_name,
                                G4LogicalVolume* a_volume,
                                G4LogicalVolume* a_mother,
                                const std::vector<inlib::xml::PARAMETER>& a_params){
    parameterisation* params = new parameterisation(m_out);
    params->m_params = a_params;
    return new G4PVParameterised(a_name,a_volume,a_mother,
                                 kUndefined,
                                 a_params.size(),
                                 params,false);
  }
  //xxxxxxx
public:
  rgdml(inlib::xml::factory& a_fac,std::ostream& a_out,bool a_verbose = false)
  :parent(a_fac,a_out,a_verbose)
  {}
  virtual ~rgdml(){}
public:
  rgdml(const rgdml& a_from)
  :parent(a_from)
  {}
  rgdml& operator=(const rgdml& a_from){
    parent::operator=(a_from);
    return *this;
  }
};

}}

#endif

//exlib_build_use inlib expat geant4

