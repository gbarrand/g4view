// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_exas
#define exlib_geant4_exas

#ifdef _WIN32
#include <windows.h>
#undef pascal
#undef min
#undef max
#undef ABSOLUTE
#undef RELATIVE
#endif

#include "viewer"

#include "calorimeter"
#include "A01"

#include <G4Version.hh> //exa_H_ZZ_4mu

#ifdef EXLIB_HAS_PYTHIA8
#include "opener"
#include <inlib/cbk/scenario>
#include "../xml/xml_sno"
#endif

namespace exlib {
namespace geant4 {

INLIB_GLOBAL_STRING(default)
INLIB_GLOBAL_STRING(color)
INLIB_GLOBAL_STRING(show_name)
INLIB_GLOBAL_STRING(text_scale)
INLIB_GLOBAL_STRING(at_end)
INLIB_GLOBAL_STRING(true)
INLIB_GLOBAL_STRING(false)

inline inlib::sg::return_action exa_calorimeter(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data&) {
  viewer* _viewer = inlib::safe_cast<inlib::sg::viewer,viewer>(a_gv);
  if(!_viewer) return inlib::sg::return_none;
  
  a_gv.stop_event_anim();

  calorimeter::stepping_action* csa = 0;
  calorimeter::construct(a_gv,csa);

  //////////////////////////////////////////////////////
  /// sg ///////////////////////////////////////////////
  //////////////////////////////////////////////////////
  a_gv.clear_scene();
  _viewer->clear_plots();

  if(!_viewer->is_evd()) _viewer->create_sg_evd();

 {inlib::sg::separator& dsep = _viewer->detector_sg();

  inlib::sg::separator* sep = new inlib::sg::separator;
  dsep.add(sep);

  inlib::sg::infos* infos = new inlib::sg::infos;
  infos->add_title("Geant4/EM calorimeter");
  sep->add(infos);

  inlib::sg::matrix* mtx = new inlib::sg::matrix;
  mtx->set_translate(float(-0.5*calorimeter::calor_size_xy()),
                     float(-0.5*calorimeter::calor_size_xy()*1.05),
                     float(-0.5*calorimeter::calor_thickness()));
  mtx->mul_rotate(0,1,0,-inlib::fhalf_pi()); //applied first.
  sep->add(mtx);    

  inlib::sg::axis* _axis = new inlib::sg::axis(a_gv.ttf());
  _axis->width = 150;        
  _axis->minimum_value = 0;
  _axis->maximum_value = 15;
  _axis->modeling = inlib::sg::tick_modeling_hplot();
  _axis->divisions = 15;
  _axis->title = "cm";
  _axis->tick_up = false;
  _axis->tick_length = 2.0f;
  _axis->label_height = 4.0f;
  _axis->title_height = 5.0f;
  _axis->label_to_axis = 7.0f;

  inlib::colorf acol = inlib::colorf_yellow();

  _axis->line_style().color = acol;
  _axis->ticks_style().color = acol;
  _axis->labels_style().color = acol;
  _axis->title_style().color = acol;
  _axis->mag_style().color = acol;

  _axis->labels_style().hjust = inlib::sg::center;

  sep->add(_axis);}

  //wall : have the geom after the axis because the below 
  //       does a send_sg(dsep).
  viewer::action_geom(a_gv);

 {inlib::sg::ortho* camera = new inlib::sg::ortho();
  camera->height = float(4*calorimeter::world_size_xy());
  float z = float(10*calorimeter::world_size_z());
  camera->znear = 0.01f*z;
  camera->zfar = 100*z;
  camera->position = inlib::vec3f(0,0,z);
  camera->focal = z;
  camera->dx = z*0.003f;
  camera->da = camera->da.value()/2;

  camera->position = inlib::vec3f(-z,0,0);
  camera->orientation = inlib::rotf(inlib::vec3f(0,1,0),-inlib::fhalf_pi());

  _viewer->replace_camera(camera);} //it takes ownership of camera.

  a_gv.set_scene_clear_color(inlib::colorf_black());

  //////////////////////////////////////////////////////
  /// styles ///////////////////////////////////////////
  //////////////////////////////////////////////////////
  typedef inlib::xml::styles::style_item_t item_t;

  // primaries :
  a_gv.styles().remove_styles(s_primary()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_white()));
  sty.push_back(item_t(s_show_name(),s_true()));
  //10*5 pixels in height.
  sty.push_back(item_t(s_text_scale(),"5"));
  sty.push_back(item_t(s_at_end(),s_false()));
  a_gv.styles().add_style(s_primary()+inlib::res_sep()+s_default(),sty);}

  // trajectories :
  a_gv.styles().remove_styles(s_trajectory()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_red()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_default(),sty);}

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_yellow()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_e_minus(),sty);}
 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_yellow()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_e_plus(),sty);}
 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_blue()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_gamma(),sty);}

  //////////////////////////////////////////////////////
  /// plots ////////////////////////////////////////////
  //////////////////////////////////////////////////////
  if(!csa) {
    a_gv.warn("stepping action not found.");
    return inlib::sg::return_to_render;
  }

 {//_viewer->set_layout_factors(0.28f,-0.32f,0.4f,0.3f);
  _viewer->set_layout_factors(0.3f,0.35f,0.3f,0.2f); //before the below.
  _viewer->add_plots_to_scene(); //because of the upper clear_scene().
  _viewer->show_plots();
  inlib::sg::plots& plots = _viewer->get_plots();
  plots.set_regions(1,1);
 {plots.set_current_plotter(0);
  inlib::sg::plotter& plotter = plots.current_plotter();
  plotter.background_style().visible = true;
  plotter.add_plottable(new inlib::sg::h1d2plot(csa->histo_z_de()));}}

/*
 {plots->set_current_plotter(1);
  inlib::sg::plotter& plotter = plots->current_plotter();
  plotter.background_style().visible = true;
  plotter.add_plottable(new inlib::sg::h1d2plot(csa->histo_de()));}
*/

 {inlib::sg::separator& dsep = _viewer->detector_sg();
  dsep.add(_viewer->create_plots_clearer_holder());
  dsep.add(_viewer->create_to_stop_event_anim_holder());}

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action exa_icon(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data&) {
  viewer* _viewer = inlib::safe_cast<inlib::sg::viewer,viewer>(a_gv);
  if(!_viewer) return inlib::sg::return_none;

  a_gv.stop_event_anim();

  calorimeter::stepping_action* csa = 0;
  calorimeter::construct(a_gv,csa,true);

  //////////////////////////////////////////////////////
  /// sg ///////////////////////////////////////////////
  //////////////////////////////////////////////////////
  a_gv.clear_scene();
  _viewer->clear_plots();
  _viewer->hide_plots();

  if(!_viewer->is_evd()) _viewer->create_sg_evd();
  
  viewer::action_geom(a_gv);

 {inlib::sg::ortho* camera = new inlib::sg::ortho();
  camera->height = float(3*calorimeter::world_size_xy());
  float z = float(10*calorimeter::world_size_z());
  camera->znear = 0.01f*z;
  camera->zfar = 100*z;
  camera->position = inlib::vec3f(0,0,z);
  camera->focal = z;
  camera->dx = z*0.003f;
  camera->da = camera->da.value()/2;

  camera->position = inlib::vec3f(-z,0,0);
  camera->orientation = inlib::rotf(inlib::vec3f(0,1,0),-inlib::fhalf_pi());

  _viewer->replace_camera(camera);} //it takes ownership of camera.

  a_gv.set_scene_clear_color(inlib::colorf_white());

  //////////////////////////////////////////////////////
  /// styles ///////////////////////////////////////////
  //////////////////////////////////////////////////////
  typedef inlib::xml::styles::style_item_t item_t;

  // primaries :
  a_gv.styles().remove_styles(s_primary()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_black()));
  sty.push_back(item_t(s_show_name(),s_true()));
  //10*5 pixels in height.
  sty.push_back(item_t(s_text_scale(),"5"));
  sty.push_back(item_t(s_at_end(),s_false()));
  a_gv.styles().add_style(s_primary()+inlib::res_sep()+s_default(),sty);}

  // trajectories :
  a_gv.styles().remove_styles(s_trajectory()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_red()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_default(),sty);}

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action exa_A01(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data&) {
  viewer* _viewer = inlib::safe_cast<inlib::sg::viewer,viewer>(a_gv);
  if(!_viewer) return inlib::sg::return_none;

  a_gv.stop_event_anim();

  A01* _A01 = new A01(a_gv);

  //////////////////////////////////////////////////////
  /// sg ///////////////////////////////////////////////
  //////////////////////////////////////////////////////
  a_gv.clear_scene();
  _viewer->clear_plots();

  if(!_viewer->is_evd()) _viewer->create_sg_evd();
  
  viewer::action_geom(a_gv);

 {inlib::sg::ortho* camera = new inlib::sg::ortho();
  camera->height = float(15*CLHEP::m);
  float z = float(10*CLHEP::m);
  camera->znear = 0.01f*z;
  camera->zfar = 100*z;
  camera->position = inlib::vec3f(0,0,z);
  camera->focal = z;
  camera->dx = z*0.003f;
  camera->da = camera->da.value()/2;

  _viewer->replace_camera(camera);} //it takes ownership of camera.

  _viewer->layout().set_rotate(1,0,0,inlib::fhalf_pi());
  _viewer->layout().mul_scale(0.7f);

  a_gv.set_scene_clear_color(inlib::colorf_black());

  //////////////////////////////////////////////////////
  /// styles ///////////////////////////////////////////
  //////////////////////////////////////////////////////

  typedef inlib::xml::styles::style_item_t item_t;

  // primaries :
  a_gv.styles().remove_styles(s_primary()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_yellow()));
  sty.push_back(item_t(s_show_name(),s_true()));
  //10*5 pixels in height.
  sty.push_back(item_t(s_text_scale(),"5"));
  sty.push_back(item_t(s_at_end(),s_false()));
  a_gv.styles().add_style(s_primary()+inlib::res_sep()+s_default(),sty);}

  // trajectories :
  a_gv.styles().remove_styles(s_trajectory()+inlib::res_sep()+"*");

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(s_color(),inlib::s_red()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_default(),sty);}

 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_yellow()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_e_minus(),sty);}
 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_yellow()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_e_plus(),sty);}
 {inlib::xml::styles::style_t sty;
  sty.push_back(item_t(inlib::s_color(),inlib::s_blue()));
  a_gv.styles().add_style(s_trajectory()+inlib::res_sep()+s_gamma(),sty);}

  //////////////////////////////////////////////////////
  /// plots ////////////////////////////////////////////
  //////////////////////////////////////////////////////
  A01::stepping_action* csa = _A01->get_stepping_action();
  if(!csa) {
    a_gv.warn("stepping action not found.");
    return inlib::sg::return_to_render;
  }

//_viewer->set_layout_factors(0.28f,-0.32f,0.4f,0.3f);
  _viewer->set_layout_factors(0.3f,0.35f,0.3f,0.2f); //before the below.
  _viewer->add_plots_to_scene(); //because of the upper clear_scene().
  _viewer->show_plots();
  inlib::sg::plots& plots = _viewer->get_plots();

  plots.set_regions(1,1);

/*
 {plots->set_current_plotter(0);
  inlib::sg::plotter& plotter = plots->current_plotter();
  plotter.background_style().visible = true;

  plotter.x_axis_automated = false;
  plotter.x_axis_min = -100;
  plotter.x_axis_max = 100;

  plotter.y_axis_automated = false;
  plotter.y_axis_min = -100;
  plotter.y_axis_max = 100;

  inlib::histo::c2d& cloud = csa->dc1XY();
  //NOTE : we should find a way to automatically switch the rep
  //       when the c2d is auto converted to an histogram.
  if(cloud.is_converted()) {
    plotter.add_plottable(new inlib::sg::h2d2plot(cloud.histogram()));
  } else {
    plotter.add_plottable(new inlib::sg::c2d2plot(cloud));
  }}

 {plots->set_current_plotter(0);
  inlib::sg::plotter& plotter = plots->current_plotter();
  plotter.background_style().visible = true;

  inlib::histo::h1d& h = csa->ecal_edep();
  plotter.add_plottable(new inlib::sg::h1d2plot(h));}
*/

 {plots.set_current_plotter(0);
  inlib::sg::plotter& plotter = plots.current_plotter();
  plotter.background_style().visible = true;

  inlib::histo::h1d& h = csa->ecal_hcal_edep();
  plotter.add_plottable(new inlib::sg::h1d2plot(h));}

  inlib::sg::separator& dsep = _viewer->detector_sg();
  dsep.add(_viewer->create_plots_clearer_holder());
  dsep.add(_viewer->create_to_stop_event_anim_holder());
  dsep.add(new inlib::sg::holder<A01>(_A01));

  return inlib::sg::return_to_render;
}

#ifdef EXLIB_HAS_PYTHIA8
INLIB_GLOBAL_STRING(H_ZZ_4mu)

inline inlib::sg::return_action exa_H_ZZ_4mu(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data&) {
  viewer* _viewer = inlib::safe_cast<inlib::sg::viewer,viewer>(a_gv);
  if(!_viewer) return inlib::sg::return_none;

  a_gv.stop_event_anim();

  a_gv.clear_scene();
  _viewer->clear_plots();
  _viewer->hide_plots();
  
  if(!_viewer->is_evd()) _viewer->create_sg_evd();

  std::string path = a_gv.res_dir();
  path += inlib::sep();
  path += "g4view.scenarios";

  typedef inlib::xml::scenarios snos_t;
  snos_t* snos = new snos_t();
  if(!xml::load_file(a_gv.out(),path,*snos)) {
    a_gv.map_warn("load of scenarios file failed");
    delete snos;
    return inlib::sg::return_to_render;
  }

  inlib::xml::scenario* sno = 0;
 {inlib_vforit(inlib::xml::scenario*,*snos,it) {
    if((*it)->m_name==s_H_ZZ_4mu()) {
      sno = *it;
      break;
    }
  }}
  if(!sno) {
    a_gv.map_warn("scenario not found");
    delete snos;
    return inlib::sg::return_to_render;
  }

 {typedef std::pair<std::string,inlib::iopener*> named_opener_t;
  std::vector<named_opener_t> ops;
  inlib::iopener* op = new exlib::geant4::opener(_viewer->get_run_manager());
  ops.push_back(named_opener_t(inlib::file::s_format_gdml(),op));
  inlib::cbk::scenario_cp _cbk(a_gv,ops,inlib::args(),*sno);
  delete snos;
  _cbk.action();
  delete op;}

 {inlib::sg::separator& dsep = _viewer->detector_sg();
  dsep.add(_viewer->create_to_stop_event_anim_holder());}

  return inlib::sg::return_to_render;
}

INLIB_GLOBAL_STRING(H_gamma_gamma)

inline inlib::sg::return_action exa_H_gamma_gamma(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data&) {
  viewer* _viewer = inlib::safe_cast<inlib::sg::viewer,viewer>(a_gv);
  if(!_viewer) return inlib::sg::return_none;

  a_gv.stop_event_anim();

  a_gv.clear_scene();
  _viewer->clear_plots();
  _viewer->hide_plots();
  
  if(!_viewer->is_evd()) _viewer->create_sg_evd();
  
  std::string path = a_gv.res_dir();
  path += inlib::sep();
  path += "g4view.scenarios";

  typedef inlib::xml::scenarios snos_t;
  snos_t* snos = new snos_t();
  if(!xml::load_file(a_gv.out(),path,*snos)) {
    a_gv.map_warn("load of scenarios file failed");
    delete snos;
    return inlib::sg::return_to_render;
  }

  inlib::xml::scenario* sno = 0;
 {inlib_vforit(inlib::xml::scenario*,*snos,it) {
    if((*it)->m_name==s_H_gamma_gamma()) {
      sno = *it;
      break;
    }
  }}
  if(!sno) {
    a_gv.map_warn("scenario not found");
    delete snos;
    return inlib::sg::return_to_render;
  }

 {typedef std::pair<std::string,inlib::iopener*> named_opener_t;
  std::vector<named_opener_t> ops;
  inlib::iopener* op = new exlib::geant4::opener(_viewer->get_run_manager());
  ops.push_back(named_opener_t(inlib::file::s_format_gdml(),op));
  inlib::cbk::scenario_cp _cbk(a_gv,ops,inlib::args(),*sno);
  delete snos;
  _cbk.action();
  delete op;}

 {inlib::sg::separator& dsep = _viewer->detector_sg();
  dsep.add(_viewer->create_to_stop_event_anim_holder());}

  return inlib::sg::return_to_render;
}

#endif

inline inlib::sg::return_action exa_head(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data& a_data) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  inlib::sg::add_item(a_gv,*list,"calorimeter",exa_calorimeter,a_data);
  inlib::sg::add_item(a_gv,*list,"A01",exa_A01,a_data);

#ifdef EXLIB_HAS_PYTHIA8
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER<1031
  inlib::sg::add_item(a_gv,*list,s_H_ZZ_4mu(),exa_H_ZZ_4mu,a_data); //it crashes with geant4.10.03.p01.
#endif  
  inlib::sg::add_item(a_gv,*list,s_H_gamma_gamma(),exa_H_gamma_gamma,a_data);
#endif
  inlib::sg::add_item(a_gv,*list,"icon",exa_icon,a_data);
  
  a_gv.push_list(list);

  return inlib::sg::return_to_render;
}

}}

//exlib_build_use geant4 inlib expat png gl2ps zip inlib_glutess freetype zlib jpeg kernel

#endif
