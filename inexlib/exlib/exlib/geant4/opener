// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_opener
#define exlib_geant4_opener

#include "utils"
#include "rgdml"
#include "geo"

#include <G4GeometryManager.hh>
#include <G4UImanager.hh>

#include <inlib/sg/iopener>

#include <inlib/sg/view_evd>

#include "../gzip"

namespace exlib {
namespace geant4 {

class opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::geant4::opener)
public:
  virtual parent* copy() const {return new opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    return gzip_is_gdml(a_path,a_is);
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_viewer);
    if(!_evd) return false;
    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

    G4RunManager* rmgr = G4RunManager::GetRunManager();
    if(!rmgr) {
      a_gv.map_warn("No G4RunManager found.");
      return false;
    }
    
    G4GeometryManager::GetInstance()->OpenGeometry();

    clean_geom_stores();

    G4VPhysicalVolume* world = 0;
   {inlib::xml::default_factory fac;
    bool verbose = false;
    rgdml ml(fac,a_gv.out(),verbose);

   {bool _is = false;
    if(inlib::file::is_gzip(a_path,_is)) {
      if(_is) {
        ml.set_compressed_reader(new gzip_reader());//ml takes ownership
      }
    }}

    if(!ml.load_file(a_path,false,world)) {
      a_gv.map_warn_failed();
      return false;
    }}
    if(!world) {
      a_gv.map_warn("No physical volume found");
      return false;
    }

   {G4LogicalVolume* vol = world->GetLogicalVolume();
    if(vol && vol->GetNoDaughters()) {
      //NOTE : there is a G4VisAttributes leaking...
      //vol->SetVisAttributes(G4VisAttributes::Invisible);
      G4VisAttributes* atb = new G4VisAttributes(false);
      vol->SetVisAttributes(atb);
    }}

    rmgr->DefineWorldVolume(world);

  //a_gv.map_warn("gdml file opened.",false);

    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    if(!_evd->is_evd()) _evd->create_sg_evd(2000);

    inlib::sg::separator& dsep = _evd->static_sg();

    geant4::geo* geo = new geant4::geo(*world);
    geo->volume = world->GetName();
    geo->volume_depth = 0;

    geo->min_depth = 1;   //included
    geo->max_depth = 4;   //excluded
    geo->solid_depth = 4; //all wire-frame.

    inlib::sg::style_colormap cmap;
    cmap.add(inlib::sg::style_color("yellow",inlib::colorf_yellow()));
    cmap.add(inlib::sg::style_color("cyan",inlib::colorf_cyan()));
    cmap.add(inlib::sg::style_color("magenta",inlib::colorf_magenta()));

    geo->atb = inlib::sg::atb_by_depth;
    geo->set_cmap(cmap);

    geo->max_time = 10;  //seconds
    geo->max_shapes = 5000;

    //force an update now :
    geo->update_sg(a_gv.out());
    geo->reset_touched(); //avoid another update_sg at first render().

    std::string swarn;
    if(geo->stopped_by_max_time())   {
      swarn = "stopped by max time.";
    } else if(geo->stopped_by_max_shapes()) {
      swarn = "stopped by max shapes.";
    } else if(geo->volume_not_found()) {
      swarn = "volume not found.";
    }

    if(geo->volume_not_found()) {
      delete geo;
    } else {
      inlib::sg::separator* sep = new inlib::sg::separator;
      dsep.add(sep);

      sep->add(new inlib::sg::matrix()); //for manip.
      sep->add(geo);

      a_gv.adapt_camera(*sep);
    }

    if(swarn.size()) {
      a_gv.map_warn(swarn);
    } else {
      a_gv.hide_main_menu();
    }

    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  opener() {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  opener(const opener& a_from)
  :parent(a_from)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  opener& operator=(const opener&){return *this;}
};

class mac_opener : public virtual inlib::iopener {
  typedef inlib::iopener parent;
  INLIB_SCLASS(exlib::geant4::mac_opener)
public:
  virtual parent* copy() const {return new mac_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {
    a_is = (inlib::suffix(a_path)=="mac"?true:false);
    return true;
  }
  virtual bool open(const std::string& a_path,
                    inlib::sg::viewer& a_viewer,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;

    inlib::sg::gui_viewer* _gv = inlib::sg::cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    inlib::sg::gui_viewer& a_gv = *_gv;

// {std::string serr;
//  if(!set_store_trajectory(serr)) {
//    a_gv.warn(serr);
//    return false;
//  }}

    G4UImanager* UI = G4UImanager::GetUIpointer();
    if(!UI) {
      a_gv.map_warn("G4UImanager not found.");
      return false;
    }
    UI->ExecuteMacroFile(a_path.c_str());

//  a_gv.hide_main_menu();
//  a_gv.win_render();

    a_done = true;
    return true;
  }

  virtual bool is(inlib::uint64,const char*,bool& a_is) const {
    a_is = false;
    return true;
  }
  virtual bool open(inlib::uint64,const char*,
                    inlib::sg::viewer&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }

  virtual bool open(const std::string&,
                    inlib::sg::viewer&,
                    const inlib::xml::scenario&,
                    inlib::sg::cmaps_t&,
                    const inlib::args&,
                    bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  mac_opener(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~mac_opener(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
public:
  mac_opener(const mac_opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  mac_opener& operator=(const mac_opener&){return *this;}
};

}}

//exlib_build_use inlib expat geant4 inlib_glutess zlib kernel

#endif

