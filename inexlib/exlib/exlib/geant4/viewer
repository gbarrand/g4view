// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_viewer
#define exlib_geant4_viewer

#include "../app/main"
#include "utils"

#include <G4StateManager.hh>

#include <inlib/sg/plotarea>
#include <inlib/sg/item_insh>
#include <inlib/cbk/plots_popup>
#include <inlib/sg/ishell_fundata_cbk>
#include <inlib/hep/load_pdg_table>

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

namespace exlib {
namespace geant4 {

INLIB_GLOBAL_STRING(G4LEDATA)
INLIB_GLOBAL_STRING(G4NEUTRONHPDATA)
INLIB_GLOBAL_STRING(G4LEVELGAMMADATA)
INLIB_GLOBAL_STRING(G4RADIOACTIVEDATA)
INLIB_GLOBAL_STRING(G4ENSDFSTATEDATA)
INLIB_GLOBAL_STRING(G4PIIDATA)
INLIB_GLOBAL_STRING(G4NEUTRONXSDATA)
INLIB_GLOBAL_STRING(G4REALSURFACEDATA)
INLIB_GLOBAL_STRING(G4SAIDXSDATA)
INLIB_GLOBAL_STRING(G4ABLADATA)
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER<=820
INLIB_GLOBAL_STRING(NeutronHPCrossSections)
#endif
#ifdef EXLIB_HAS_PYTHIA8
INLIB_GLOBAL_STRING(PYTHIA8DATA)
#endif

class viewer
:public app::main
,public inlib::sg::view_evd
,public inlib::sg::plotarea
{
  typedef app::main parent;
  typedef inlib::sg::view_evd parent_evd;
  typedef inlib::sg::plotarea parent_plotarea;
#ifdef EXLIB_METAL_DRAW_WHEN_NEEDED
#else
public:
  virtual void set_to_render() {}
#endif
public:
  virtual inlib::sg::node* create_main_menu() {
    insh().exec_line_reset_to_stop("gui_main.insh");
    return pop_list(false); //important: have false to not delete the popped item.
  }
public:
  INLIB_SCLASS(exlib::geant4::viewer)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<viewer>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<inlib::sg::view_evd>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_plotarea>(this,a_class)) return p;
    return parent::cast(a_class);
  }
protected:
  virtual void create_camenu_items(unsigned int a_nb,float a_wcw,float a_wch,float a_wb,float a_hb) {
    parent::create_camenu_items(a_nb,a_wcw,a_wch,a_wb,a_hb);
    INLIB_VIEW_EVD_ADD_CAMENU_ITEMS
    create_main_button_insh(*this,a_wcw,a_wch,a_wb,a_hb,0,2,0,"next","","event.jpg",insh(),"g4_beam_on");
  }
public:
  viewer(const std::string& a_app_name,
         const std::string& a_app_version,
         std::ostream& a_out,
         inlib::sg::render_manager& a_gl_mgr,
         const inlib::sg::base_freetype& a_ttf,
         const inlib::sg::selection& a_selection,
         const std::string& a_doc_dir,
         const std::string& a_res_dir,
         const std::string& a_out_dir,
         const std::string& a_tmp_dir,
         bool a_verbose,
         unsigned int a_mem_limit)
  :parent(a_app_name,a_app_version,
          a_out,a_gl_mgr,a_ttf,a_selection,
	  a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,
	  a_verbose,a_mem_limit)
  ,parent_evd(parent::get_me())
  ,parent_plotarea(parent::get_me())

  ,m_state(0)
  ,m_pdgs(a_out)
  {
    if(!inlib::hep::load_default_pdg_table(m_pdgs)) {}
    m_popup_cbks.add(new inlib::cbk::plots_popup(*this));
    m_state = new state(*this); //the G4StateManager is owner.
  }

  virtual ~viewer() {
    //m_state indirectly deleted by the run manager.
  }
protected:
  viewer(const viewer& a_from)
  :ui(a_from)
  ,parent(a_from)
  ,parent_evd(a_from)
  ,parent_plotarea(a_from)

  ,m_ftps(a_from.m_ftps)
  ,m_state(0)
  ,m_pdgs(a_from.m_pdgs)
  ,m_tmp_dirs(a_from.m_tmp_dirs)
  {}
  viewer& operator=(const viewer& a_from){
    parent::operator=(a_from);
    parent_evd::operator=(a_from);
    parent_plotarea::operator=(a_from);

    m_ftps = a_from.m_ftps;
    m_pdgs = a_from.m_pdgs;

    m_tmp_dirs = a_from.m_tmp_dirs;

    return *this;
  }
public:
  void clear_tmp() {
    inlib_vforcit(std::string,m_tmp_dirs,it){
      if(!inlib::dir::rmdir(*it)){
        viewer::m_out << "exlib::geant4::viewer::clear_tmp :"
                      << " can't remove directory "
                      << inlib::sout(*it)
                      << std::endl;
      } /*else {
        viewer::m_out << "exlib::geant4::viewer::clear_tmp :"
                      << " remove directory "
                      << inlib::sout(*it)
                      << std::endl;
      }*/
    }
    m_tmp_dirs.clear();
  }

  bool beam_on(unsigned int a_nevent,unsigned int a_sleep,std::string& a_err){
    G4RunManager* rmgr = G4RunManager::GetRunManager();
    if(!rmgr) {
      a_err = "no run manager";
      return false;
    }
    if(!inlib::check_env_dir(s_G4LEDATA())){
      a_err = "g4 data not found";
      return false;
    }
#ifdef EXLIB_HAS_PYTHIA8
    if(!inlib::check_env_dir(s_PYTHIA8DATA())){
      a_err = "pythia8 data not found";
      return false;
    }
#endif
    if(!set_store_trajectory(a_err)) return false;
    m_state->m_sleep = a_sleep;
    rmgr->BeamOn(a_nevent);
    m_state->m_sleep = 0; //IMPORTANT.
    a_err.clear();
    return true;
  }
protected:
  class state : public G4VStateDependent {
    INLIB_SCLASS(exlib::geant4::viewer::state)
  public: //G4VStateDependent
    virtual G4bool Notify(G4ApplicationState aRequestedState) {
      G4StateManager* statM = G4StateManager::GetStateManager();
      G4ApplicationState previousState = statM->GetPreviousState();
      if(previousState==G4State_Idle && aRequestedState==G4State_GeomClosed) {
        //exec run begin.
        //::printf("debug : run begin ++++++++++++++++++++\n");
      } else if(previousState==G4State_GeomClosed && aRequestedState==G4State_Idle) {
        //exec run end.
        //::printf("debug : run end ++++++++++++++++++++++\n");
      } else if(previousState==G4State_GeomClosed && aRequestedState==G4State_EventProc) {
        //exec event begin.
        //::printf("debug : event begin ===================\n");
      } else if(previousState==G4State_EventProc && aRequestedState==G4State_GeomClosed) {
        //exec event end.
        //::printf("debug : event end ===================\n");
	
        m_gv.insh().exec_line_reset_to_stop("event.insh");
        if(m_gv.insh().to_stop()) {}
	
	/*
       {inlib::sg::plots* plots = m_gv.get_plots();
        if(plots && plots->has_data()) {
          plots->touch_plotters();

          view_sg_client* _wc = inlib::sg::cast_view_sg_client(m_gv);
          if(_wc && _wc->is_connected()) { //have to send plots and trajectories.

            inlib::args opts;
            opts.add(inlib::sg::s_send_placement(),inlib::sg::s_placement_screen());

           {std::string scol;
            if(!inlib::num2s(m_gv.m_params.m_plot_col,scol)){}
            opts.add(inlib::sg::s_col(),scol);}

           {std::string srow;
            if(!inlib::num2s(m_gv.m_params.m_plot_row,srow)){}
            opts.add(inlib::sg::s_row(),srow);}

           {float scale = 1;
            std::string stmp;
            if(m_gv.m_sg_client.get_sg_serv_params(stmp)) {
              unsigned int ww,wh,bw,bh,cols,rows;
              if(inlib::sg::s2params(stmp,ww,wh,bw,bh,cols,rows) && cols) {
                scale = m_gv.gui_camera_height()/float(cols);
              }
            }
            if(!inlib::num2s(scale,stmp)){}
            opts.add(inlib::sg::s_send_scale(),stmp);}

            opts.add(inlib::sg::s_send_clear(),inlib::sg::s_placement_screen()); //IMPORTANT

            if(!_wc->send_sg(*plots,opts)){
              m_gv.out() << "exlib::geant4::viewer::state::Notify : send_sg() plots failed." << std::endl;
            }

          }
        }}
	*/

        m_gv.win_render();

      //if(scan_mode) m_gv.steer();

        if(m_sleep) inlib::sleep_milli_secs(m_sleep);
      }
      return true;
    }
  public:
    state(viewer& a_gv):m_gv(a_gv),m_sleep(0){
#ifdef INLIB_MEM
      inlib::mem::increment(s_class().c_str());
#endif
    }
    virtual ~state(){
#ifdef INLIB_MEM
      inlib::mem::decrement(s_class().c_str());
#endif
    }
  protected:
    state(const state& a_from)
    :G4VStateDependent()
    ,m_gv(a_from.m_gv)
    ,m_sleep(a_from.m_sleep)
    {
#ifdef INLIB_MEM
      inlib::mem::increment(s_class().c_str());
#endif
    }
    state& operator=(const state& a_from){
      //G4VStateDependent::operator=(a_from);
      m_sleep = a_from.m_sleep;
      return *this;
    }
  protected:
    viewer& m_gv;
  public:
    unsigned int m_sleep;
  };
protected:
  inlib::ftp::ftps m_ftps;
  state* m_state;

  inlib::hep::pdgs m_pdgs;
  
  std::vector<std::string> m_tmp_dirs;
};

}}

//exlib_build_use geant4 inlib expat zlib png jpeg

//exlib_build_use pythia8
//exlib_build_cppflags -DEXLIB_HAS_PYTHIA8

#endif

