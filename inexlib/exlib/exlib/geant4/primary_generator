// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_primary_generator
#define exlib_geant4_primary_generator

// default shoot positrons of 1Gev with delta of 50Mev
// alogn z with delta angle of two degree in x/z plane.
// vertex is at z -8m.

#include <G4VUserPrimaryGeneratorAction.hh>

#include <G4Event.hh>
#include <G4ParticleGun.hh>
#include <G4ParticleTable.hh>
#include <G4ParticleDefinition.hh>
#include <G4Version.hh>
#include <Randomize.hh>

#include <inlib/rotd>
#include <inlib/vec3d>
#include <inlib/vec4d>
#include <inlib/mathd>
#include <inlib/sout>
#include <cstdlib>

#include "strings"

#ifdef EXLIB_HAS_PYTHIA8
#include <inlib/forit>
#include <pythia/Pythia.h>
#include "../yacc/cexpr_eval.h"
#endif

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

namespace exlib {
namespace geant4 {

class primary_generator : public G4VUserPrimaryGeneratorAction {
#ifdef INLIB_MEM
  static const std::string& s_class() {
    static const std::string s_v("exlib::geant4::primary_generator");
    return s_v;
  }
#endif
  INLIB_CLASS_STRING(id)
  INLIB_CLASS_STRING(final)
  INLIB_CLASS_STRING(pT)
  INLIB_CLASS_STRING(eta)
  INLIB_CLASS_STRING(px)
  INLIB_CLASS_STRING(py)
  INLIB_CLASS_STRING(pz)
  INLIB_CLASS_STRING(e)
  INLIB_CLASS_STRING(charge)
  INLIB_CLASS_STRING(number_selected)
public:
  virtual void GeneratePrimaries(G4Event* a_event){

#ifdef EXLIB_HAS_PYTHIA8
    if(m_pythia8) {
      if(!m_pythia8->next()) {
        m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
              << " pythia8.next() failed."
              << std::endl;
        return;        
      }

      bool good_event = false;
      if(m_select_particle.size() && m_accept_event.size()) {
        unsigned int number_selected = 0;
       {exlib::yacc::cexpr_eval proc(m_out,m_select_particle);
        std::vector<std::string> vars;
        if(!proc.find_variables(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.find_variable() failed for "
                << inlib::sout(m_select_particle)
                << std::endl;
          return;
        }
      //inlib::dump(vars,std::cout);
        if(!proc.compile(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.compile() failed for "
                << inlib::sout(m_select_particle)
                << std::endl;
          return;
        }
        for(int j=0;j<m_pythia8->event.size();++j) {
          const Pythia8::Particle& pp = m_pythia8->event[j];
          std::vector<inlib::value> vs;
          if(!fill_values(pp,vars,vs)) {}
          std::string serror;
          bool res;
          if(!proc.cut(vs,res,serror)){
            m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                  << " cexpr_eval.cut() failed for "
                  << inlib::sout(m_select_particle)
                  << std::endl;
            return;
          }
          if(res) number_selected++;
        }}
  
       {exlib::yacc::cexpr_eval proc(m_out,m_accept_event);
        std::vector<std::string> vars;
        if(!proc.find_variables(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.find_variable() failed for "
                << inlib::sout(m_accept_event)
                << std::endl;
          return;
        }
      //inlib::dump(vars,std::cout);
        if(!proc.compile(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.compile() failed for "
                << inlib::sout(m_accept_event)
                << std::endl;
          return;
        }
        if((vars.size()!=1)||(vars[0]!=s_number_selected())) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " unexpected variable for "
                << inlib::sout(m_accept_event)
                << std::endl;
          return;
        }
        std::vector<inlib::value> vs;
        vs.push_back(inlib::value(number_selected));
        std::string serror;
        bool res;
        if(!proc.cut(vs,res,serror)){
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.cut() failed for "
                << inlib::sout(m_accept_event)
                << std::endl;
          return;
        }
        if(res) {
          good_event = true;
        }}
      } else {
        good_event = true;
      }
  
      if(!good_event) return;

      G4PrimaryVertex* vertex =
        new G4PrimaryVertex(G4ThreeVector(m_pos.x(),m_pos.y(),m_pos.z()),0);
  
      if(m_primary_particle.size()){
        exlib::yacc::cexpr_eval proc(m_out,m_primary_particle);
        std::vector<std::string> vars;
        if(!proc.find_variables(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.find_variable() failed for "
                << inlib::sout(m_primary_particle)
                << std::endl;     
          delete vertex;
          return;
        }
      //inlib::dump(vars,std::cout);
        if(!proc.compile(vars)) {
          m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                << " cexpr_eval.compile() failed for "
                << inlib::sout(m_primary_particle)
                << std::endl;
          delete vertex;
          return;
        }
  
        for(int j=0;j<m_pythia8->event.size();++j) {
          const Pythia8::Particle& pp = m_pythia8->event[j];
          std::vector<inlib::value> vs;
          if(!fill_values(pp,vars,vs)) {}
          std::string serror;
          bool res;
          if(!proc.cut(vs,res,serror)){
            m_out << "exlib::geant4::primary_generator::GeneratePrimaries :"
                  << " cexpr_eval.cut() failed for "
                  << inlib::sout(m_primary_particle)
                  << std::endl;
            delete vertex;
            return;
          }
          if(res) {
            G4PrimaryParticle* pparticle =
              new G4PrimaryParticle(pp.id(),pp.px(),pp.py(),pp.pz(),pp.e());
            vertex->SetPrimary(pparticle);
          }
        }
  
      } else { //take all particles.
        for(int j=0;j<m_pythia8->event.size();++j) {
          const Pythia8::Particle& pp = m_pythia8->event[j];
          if(pp.isFinal()) {
            G4PrimaryParticle* pparticle =
              new G4PrimaryParticle(pp.id(),pp.px(),pp.py(),pp.pz(),pp.e());
            vertex->SetPrimary(pparticle);
          }
        }
      }

      if(vertex->GetNumberOfParticle()) {
        a_event->AddPrimaryVertex(vertex);
      } else {
        delete vertex;
      }

      return;
    }
#endif

    if(m_parts.size()) {
      int i = ::rand()%m_parts.size();
      m_gun.SetParticleDefinition(m_parts[i]);
    }

    m_gun.SetParticlePosition(G4ThreeVector(m_pos.x(),m_pos.y(),m_pos.z()));

   {double pp = m_momentum + (G4UniformRand()-0.5)*m_sigma_momentum;
    double mass = m_gun.GetParticleDefinition()->GetPDGMass();
    double Ekin = std::sqrt(pp*pp+mass*mass)-mass;
    m_gun.SetParticleEnergy(Ekin);}

    // theta around zero, phi in [0,2*pi] :
    double theta = (G4UniformRand()-0.5)*m_sigma_angle;
    double phi = G4UniformRand()*inlib::two_pi();

    // random axis around z :
    double z = std::cos(theta);
    double sin_theta = std::sin(theta);
    double x = sin_theta*std::cos(phi);
    double y = sin_theta*std::sin(phi);

    m_rot.mul_3(x,y,z);
   
    m_gun.SetParticleMomentumDirection(G4ThreeVector(x,y,z));
  
    m_gun.GeneratePrimaryVertex(a_event);
  }

public:
  primary_generator(std::ostream& a_out)
  :m_out(a_out)
  ,m_gun(1)
  ,m_momentum(1*CLHEP::GeV)
  ,m_sigma_momentum(0 /*50*CLHEP::MeV*/ )
  ,m_sigma_angle(0 /*2*CLHEP::deg*/ )
#ifdef EXLIB_HAS_PYTHIA8
  ,m_pythia8(0) 
#endif
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
    set_momentum_direction(inlib::vec3d(0,0,1));
    set_position(0,0,0);
    set_particle(s_e_minus());
  }
  virtual ~primary_generator(){
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  }
protected:
  primary_generator(const primary_generator& a_from)
  :G4VUserPrimaryGeneratorAction(a_from)
  ,m_out(a_from.m_out)
  {
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  primary_generator& operator=(const primary_generator&){return *this;}
public:
  //const G4ParticleGun& gun() const {return m_gun;}
  //G4ParticleGun& gun() {return m_gun;}

  void reset() {
    m_gun.SetNumberOfParticles(1);
    m_pos.set_value(0,0,0);
    m_momentum = 1*CLHEP::GeV;
    m_sigma_momentum = 0;
    m_sigma_angle = 0;
#ifdef EXLIB_HAS_PYTHIA8
    delete m_pythia8;
    m_pythia8 = 0;
    m_cmnd.clear();
#endif
    set_momentum_direction(inlib::vec3d(0,0,1));
    set_position(0,0,0);
    set_particle(s_e_minus());
  }

  bool set_particle(const std::string& a_name) {
#ifdef EXLIB_HAS_PYTHIA8
    delete m_pythia8;
    m_pythia8 = 0;
#endif

    if(a_name==s_random()) {
      if(m_parts.empty()) {
        G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
        if(!particleTable) return false;
        add_part(*particleTable,s_e_minus());
        add_part(*particleTable,s_e_plus());
        add_part(*particleTable,s_proton());
        add_part(*particleTable,s_mu_minus());
        add_part(*particleTable,s_mu_plus());
        add_part(*particleTable,s_gamma());
        add_part(*particleTable,s_kaon_minus());
        add_part(*particleTable,s_kaon_plus());
        add_part(*particleTable,s_pi_minus());
        add_part(*particleTable,s_pi_plus());
        add_part(*particleTable,s_pi0());
      }
      return true;

#ifdef EXLIB_HAS_PYTHIA8
    } else if(a_name==s_pythia8()) {
      m_parts.clear();

      if(m_cmnd.empty()) {
        m_out << "exlib::geant4::primary_generator::set_particle :"
              << " no pythia8 cmnd file given."
              << std::endl;
        return false;
      }

      m_pythia8 = new Pythia8::Pythia();

      m_pythia8->readFile(m_cmnd);    

      if(!m_pythia8->init()) {
        m_out << "exlib::geant4::primary_generator::set_particle :"
              << " pythia8.init() failed."
              << std::endl;
        return false;
      }
#endif

    } else {
      m_parts.clear();

      G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
      if(!particleTable) return false;

      G4ParticleDefinition* _particle = particleTable->FindParticle(a_name);
      if(!_particle) return false;
      m_gun.SetParticleDefinition(_particle);
    }
    return true;
  }

  bool particle(std::string& a_name) const {
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER<=820
    G4ParticleDefinition* _particle = const_cast<G4ParticleGun&>(m_gun).GetParticleDefinition();
#else   
    G4ParticleDefinition* _particle = m_gun.GetParticleDefinition();
#endif
    if(!_particle) {a_name.clear();return false;}
    a_name = _particle->GetParticleName();
    return true;
  }

  void set_position(double a_x,double a_y,double a_z){
    m_pos.set_value(a_x,a_y,a_z);
  }

  G4ThreeVector position() /*const*/ {return m_gun.GetParticlePosition();}

  void set_momentum(double a_v) {m_momentum = a_v;}
  double momentum() const {return m_momentum;}

  void set_momentum_direction(const inlib::vec3d& a_v) { 
    m_direction = a_v;
    m_rot.set_value(inlib::vec3d(0,0,1),m_direction);
  }
  void set_momentum_direction(double a_x,double a_y,double a_z){
    m_direction.set_value(a_x,a_y,a_z);
    m_rot.set_value(inlib::vec3d(0,0,1),m_direction);
  }
  const inlib::vec3d& momentum_direction() const {return m_direction;}

  void set_sigma_momentum(double val) {m_sigma_momentum = val;}
  double sigma_momentum() const {return m_sigma_momentum;}

  void set_sigma_angle(double val) {m_sigma_angle = val;}
  double sigma_angle() const {return m_sigma_angle;}

#ifdef EXLIB_HAS_PYTHIA8
  void set_cmnd(const std::string& a_s){m_cmnd = a_s;}
  void set_select_particle(const std::string& a_s){m_select_particle = a_s;}
  void set_accept_event(const std::string& a_s){m_accept_event = a_s;}
  void set_primary_particle(const std::string& a_s){m_primary_particle = a_s;}
  void reset_select_particle(){m_select_particle.clear();}
  void reset_accept_event(){m_accept_event.clear();}
  void reset_primary_particle(){m_primary_particle.clear();}
#endif

protected:
  void add_part(G4ParticleTable& a_table,const std::string& a_s) {
    G4ParticleDefinition* _particle = a_table.FindParticle(a_s);
    if(!_particle) return;
    m_parts.push_back(_particle);
  }

#ifdef EXLIB_HAS_PYTHIA8
  bool fill_values(const Pythia8::Particle& a_pp,
                   const std::vector<std::string>& a_vars,
                   std::vector<inlib::value>& a_vs){
    a_vs.clear();
    inlib_vforcit(std::string,a_vars,it) {
      if(*it==s_id()) {
        a_vs.push_back(a_pp.id());
      } else if(*it==s_final()) {
        a_vs.push_back(a_pp.isFinal());
      } else if(*it==s_pT()) {
        a_vs.push_back(a_pp.pT());
      } else if(*it==s_eta()) {
        a_vs.push_back(a_pp.eta());
      } else if(*it==s_px()) {
        a_vs.push_back(a_pp.px());
      } else if(*it==s_py()) {
        a_vs.push_back(a_pp.py());
      } else if(*it==s_pz()) {
        a_vs.push_back(a_pp.pz());
      } else if(*it==s_e()) {
        a_vs.push_back(a_pp.e());
      } else if(*it==s_charge()) {
        a_vs.push_back(a_pp.charge());
      }
    }
    if(a_vs.size()!=a_vars.size()) {
      m_out << "exlib::geant4::primary_generator::fill_values :"
            << " bad number of values."
            << std::endl;
      return false;
    }
    return true;
  }
#endif

protected:
  std::ostream& m_out;
  G4ParticleGun m_gun;

  inlib::vec3d m_pos;
  double m_momentum;
  double m_sigma_momentum;
  double m_sigma_angle;

  inlib::vec3d m_direction;
  inlib::rotd m_rot;

  std::vector<G4ParticleDefinition*> m_parts;

#ifdef EXLIB_HAS_PYTHIA8
  Pythia8::Pythia* m_pythia8;  
  std::string m_cmnd;
  std::string m_select_particle;
  std::string m_accept_event;
  std::string m_primary_particle;
#endif
};

}}

#include "utils"

namespace exlib {
namespace geant4 {

inline primary_generator* our_primary_generator(G4RunManager& a_run_manager,inlib::sg::alert& a_gv) {
  G4VUserPrimaryGeneratorAction* pga = get_primary_generator(a_run_manager,a_gv);
  if(!pga) return 0;
  primary_generator* pg = dynamic_cast<primary_generator*>(pga);
  if(!pg) {a_gv.warn("primary generator not our");return 0;}
  return pg;
}    

}}

#endif

//exlib_build_use geant4 inlib
