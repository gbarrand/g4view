// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_visited_volume
#define exlib_geant4_visited_volume

#include <G4VPhysicalVolume.hh>
#include <G4LogicalVolume.hh>
#include <G4VSolid.hh>
#include <G4Version.hh>

#include "polyhedron"

#include <G4VisAttributes.hh>

#include "ivisited_volume"

#include <inlib/sg/separator>
#include <inlib/sg/matrix>
#include <inlib/sg/rgba>
#include <inlib/sg/draw_style>
#include <inlib/mat4d>
#include <inlib/sg/polyhedron>

namespace exlib {
namespace geant4 {

class visited_volume : public virtual ivisited_volume {
public: //visited_volume
  virtual bool begin_volume(G4VPhysicalVolume& a_pv,
                            G4VSolid* a_solid,G4Material*,
                            const inlib::mat4d& a_g4,
                            bool& a_do_daughters){
  //::printf("debug : exlib::geant4::visited_volume::begin_volume : %s %lu\n",
  //         a_pv.GetName().c_str(),a_solid);

    a_do_daughters = true;

    if(a_solid) {

      bool visible = true;
      bool solid = m_solid;
      bool rwf = m_reduced_wire_frame;
 
      inlib::colorf rgba(m_color);

      if(a_pv.GetLogicalVolume()) {
        const G4VisAttributes* visAtbs = a_pv.GetLogicalVolume()->GetVisAttributes();
        if(visAtbs) {
          visible = visAtbs->IsVisible();
          a_do_daughters = visAtbs->IsDaughtersInvisible()?false:true;
  
          const G4Color& color = visAtbs->GetColor();
          float r = (float)color.GetRed();
          float g = (float)color.GetGreen();
          float b = (float)color.GetBlue();
          float a = (float)color.GetAlpha();
          rgba.set_value(r,g,b,a);

          if(visAtbs->IsForceDrawingStyle()) {
            solid = (visAtbs->GetForcedDrawingStyle()==G4VisAttributes::solid?true:false);
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=1031 //G.Barrand.
            rwf = visAtbs->IsForcedAuxEdgeVisible()?false:true; //Forced and not Force!
#else
            rwf = visAtbs->IsForceAuxEdgeVisible()?false:true;
#endif
          }
        }
      }
  
      if(visible) {

        if(rgba.a()!=1.0f) { 
          if(m_do_transparents!=1) {
            if(rgba.a()!=m_do_transparents) return true;
          } else {
            inlib::push_back_unique(m_as,rgba.a());
            return true;
          }
        }

        G4Polyhedron* g4Polyhedron = a_solid->CreatePolyhedron();
        if(!g4Polyhedron) {
          m_out << "exlib::geant4::visited_volume::begin_volume :"
                << " Can't create polyhedron for PV " << a_pv.GetName()
                << std::endl;
          return false;
        }     

        inlib::sg::separator* separator = new inlib::sg::separator;

        inlib::sg::rgba* color = new inlib::sg::rgba();
        color->color = rgba;
        separator->add(color);

/*
*/
        //NOTE : the transform could be for manip.
        inlib::sg::matrix* transform = new inlib::sg::matrix;
        transform->mtx.value().set_matrix(
          float(a_g4(0,0)),float(a_g4(0,1)),float(a_g4(0,2)),float(a_g4(0,3)),
          float(a_g4(1,0)),float(a_g4(1,1)),float(a_g4(1,2)),float(a_g4(1,3)),
          float(a_g4(2,0)),float(a_g4(2,1)),float(a_g4(2,2)),float(a_g4(2,3)),
                         0,               0,               0,              1);
        separator->add(transform);
              
        //exlib::geant4::polyhedron* phd = new exlib::geant4::polyhedron();
        // NOTE : there is a bug in G4Visible::operator!=()
        // which does not verify that fpVisAttributes
        // pointers are valids. Then we use "value_no_cmp"
        // to set the field.
        // phd->ph.value_no_cmp(g4p);

        inlib::sg::polyhedron* phd = new inlib::sg::polyhedron();
        //The below is costly, but needed since G4Facet::edge is private.
        polyhedron g4p(*g4Polyhedron); //costly
        phd->ph = g4p;

/*
        inlib::hep::polyhedron& ph = phd->ph.value();
        inlib::mat4f mtx(
          float(a_g4(0,0)),float(a_g4(0,1)),float(a_g4(0,2)),float(a_g4(0,3)),
          float(a_g4(1,0)),float(a_g4(1,1)),float(a_g4(1,2)),float(a_g4(1,3)),
          float(a_g4(2,0)),float(a_g4(2,1)),float(a_g4(2,2)),float(a_g4(2,3)),
                         0,               0,               0,              1);
        inlib::hep::tsf_polyhedron(ph,mtx);
*/

        delete g4Polyhedron;

        phd->solid = solid;
        phd->reduced_wire_frame = rwf;
        separator->add(phd);

        m_group.add(separator);

      } //end visible

    }
   
    return true;
  }
public:
  visited_volume(std::ostream& a_out,inlib::sg::group& a_group)
  :m_out(a_out)
  ,m_group(a_group)
  ,m_color(inlib::colorf_default())
  ,m_solid(false)
  ,m_reduced_wire_frame(true) //=same as in inlib::sg::polyhedron.
  ,m_do_transparents(1)
  {}
  virtual ~visited_volume(){}
public:
  visited_volume(const visited_volume& a_from)
  :ivisited_volume(a_from)
  ,m_out(a_from.m_out)
  ,m_group(a_from.m_group)
  ,m_color(a_from.m_color)
  ,m_solid(a_from.m_solid)
  ,m_reduced_wire_frame(a_from.m_reduced_wire_frame)
  ,m_do_transparents(a_from.m_do_transparents)
  ,m_as(a_from.m_as)
  {}
  visited_volume& operator=(const visited_volume& a_from){
    m_color = a_from.m_color;
    m_solid = a_from.m_solid;
    m_reduced_wire_frame = a_from.m_reduced_wire_frame;
    m_do_transparents = a_from.m_do_transparents;
    m_as = a_from.m_as;
    return *this;
  }

protected:
  std::ostream& m_out;
  inlib::sg::group& m_group;
public:
  inlib::colorf m_color;
  bool m_solid;
  bool m_reduced_wire_frame;
  float m_do_transparents;
  std::vector<float> m_as;
};

}}

#endif

//exlib_build_use geant4 inlib inlib_glutess
