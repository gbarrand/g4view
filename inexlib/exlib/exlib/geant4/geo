// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_geo
#define exlib_geant4_geo

#include <G4VisAttributes.hh> //Have G4 first to quiet VisualC++.

#include <inlib/sg/geo>

#include "geom_visitor"
#include "add_shape"

namespace exlib {
namespace geant4 {

class geo : public inlib::sg::geo<G4VPhysicalVolume,inlib::mat4d> {
  typedef inlib::sg::geo<G4VPhysicalVolume,inlib::mat4d> parent;
public:
  INLIB_SCLASS(exlib::geant4::geo)
public:
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<geo>(this,a_class)) return p;
    return parent::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new geo(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  geo(const G4VPhysicalVolume& a_vol)
  :parent()
  ,m_vol(a_vol)
  {}
  virtual ~geo(){}
public:
  geo(const geo& a_from)
  :parent(a_from)
  ,m_vol(a_from.m_vol)
  {}
  geo& operator=(const geo& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
  virtual void update_sg(std::ostream& a_out) {
    begin_update_sg(a_out);
    inlib::mat4d identity;
    identity.set_identity();
    _vis_volume(a_out,m_vol,identity,0);
    end_update_sg(a_out);
  }

  virtual const std::string& volume_name(const G4VPhysicalVolume& a_vol) const {
    return a_vol.GetName();
  }

  virtual bool volume_material_color(std::ostream&,const G4VPhysicalVolume& a_vol,inlib::colorf& a_color) {
    if(a_vol.GetLogicalVolume()) {
      const G4VisAttributes* vatbs = a_vol.GetLogicalVolume()->GetVisAttributes();
      if(vatbs) {
        const G4Color& _color = vatbs->GetColor();
        float r = (float)_color.GetRed();
        float g = (float)_color.GetGreen();
        float b = (float)_color.GetBlue();
        float a = 1 - (float)_color.GetAlpha();
        a_color.set_value(r,g,b,a);
	return true;
      }
    }
    a_color = color.value();
    return false;
  }

  virtual bool add_shape(std::ostream& a_out,
                         const G4VPhysicalVolume& a_vol,
                         const inlib::mat4d& a_matrix,
                         inlib::sg::separator& a_sep,
                         bool a_solid) {
    get_pvs gs;
    geom_visitor gv(a_out);
    gv.visit(const_cast<G4VPhysicalVolume&>(a_vol),a_matrix,gs,0);

   {inlib_vforcit(pv_t,gs.m_pvs,it){
      const pv_t& _pv = *it;
      G4VSolid* vsolid = _pv.second.first;
      if(vsolid) {
        if(!geant4::add_shape(a_out,a_sep,*vsolid,_pv.second.second,a_solid)) {
          a_out << "exlib::geant4::geo::add_shape :" 
                << " sep_add_shape failed."
                << " vol " << a_vol.GetName()
                << std::endl;
          //not fatal.
        } else {
          m_shape_count++;
        }
      }
    }}
    return true;
  }

  virtual bool vis_children(std::ostream& a_out,
                            const G4VPhysicalVolume& a_vol,
                            const inlib::mat4d& a_matrix,
                            unsigned int a_depth) {  

    get_pvs gs;
    geom_visitor gv(a_out);
    gv.visit(const_cast<G4VPhysicalVolume&>(a_vol),a_matrix,gs,0);

   {inlib_vforcit(pv_t,gs.m_pvs,it){
      const pv_t& _pv = *it;
      G4VPhysicalVolume& pv = *(_pv.first);

      const inlib::mat4d& newTransform = _pv.second.second;

      int nDaughters = pv.GetLogicalVolume()->GetNoDaughters();
      for (int iDaughter = 0; iDaughter < nDaughters; iDaughter++) {
        if(!_vis_volume(a_out,
                       *(pv.GetLogicalVolume()->GetDaughter(iDaughter)),
                       newTransform,a_depth+1)) {
          return false;
        }
      }                   
    }}

    return true;
  }

protected:
  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////
  typedef std::pair<G4VSolid*,inlib::mat4d> soltsf_t;
  typedef std::pair<G4VPhysicalVolume*,soltsf_t> pv_t;

  class get_pvs : public virtual ivisited_volume {
  public: //visited_volume
    virtual bool begin_volume(G4VPhysicalVolume& a_pv,
                              G4VSolid* a_solid,G4Material*,
                              const inlib::mat4d& a_matrix,
                              bool& a_do_daughters){

      a_do_daughters = false;
      m_pvs.push_back(pv_t(&a_pv,soltsf_t(a_solid,a_matrix)));                
      return true;
    }
  public:
    get_pvs(){}
    virtual ~get_pvs(){}
  protected:  
    get_pvs(const get_pvs& a_from):ivisited_volume(a_from){}
    get_pvs& operator=(const get_pvs& a_from){
      if(&a_from==this) return *this;
      m_pvs.clear();
      return *this;
    }  
  public:
    std::vector<pv_t> m_pvs;
  };

  bool sep_add_shape(std::ostream& a_out,
                     inlib::sg::separator& a_sep,
                     G4VSolid& a_vsolid,
                     const inlib::mat4d& a_mtx,
                     bool a_solid) {

    G4Polyhedron* g4Polyhedron = a_vsolid.CreatePolyhedron();
    if(!g4Polyhedron) {
      a_out << "exlib::geant4::geo::sep_add_shape :"
            << " Can't create polyhedron for PV " << a_vsolid.GetName()
            << std::endl;
      return false;        
    }     

    inlib::sg::polyhedron* _node = new inlib::sg::polyhedron();
    _node->solid = a_solid;
    //_node->reduced_wire_frame = false;

    inlib::hep::polyhedron& ph = _node->ph.value();

    polyhedron g4p(*g4Polyhedron); //costly
    ph = g4p;

    delete g4Polyhedron;

    inlib::hep::tsf_polyhedron(ph,a_mtx);

    a_sep.add(_node);

    return true;
  }
protected:
  const G4VPhysicalVolume& m_vol;
};

}}

#endif

//exlib_build_use inlib geant4 inlib_glutess
