// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_geant4_run_manager
#define exlib_geant4_run_manager

#include <G4RunManager.hh>
#include <G4Version.hh>

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

namespace exlib {
namespace geant4 {

class run_manager : public G4RunManager {
  static const std::string& s_class() {
    static const std::string s_v("exlib::geant4::run_manager");
    return s_v;
  }
public:
  run_manager(){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  virtual ~run_manager() {
#ifdef INLIB_MEM
    inlib::mem::decrement(s_class().c_str());
#endif
  } 
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER<1031
protected:
  run_manager(const run_manager& a_from):G4RunManager(a_from){
#ifdef INLIB_MEM
    inlib::mem::increment(s_class().c_str());
#endif
  }
  run_manager& operator=(const run_manager& a_from){
    G4RunManager::operator=(a_from);
    return *this;
  }
#endif  
public:
  const run_manager& get_me() const {return *this;}
  run_manager& get_me() {return *this;}
  
  // split BeamOn in three methods.
  bool start_run(G4int n_event) {
    if(!ConfirmBeamOnCondition()) return false;
    numberOfEventToBeProcessed = n_event;
#if defined(G4VERSION_NUMBER) && G4VERSION_NUMBER>=950
    ConstructScoringWorlds();
#endif    
    RunInitialization();
    return true;
  }
  void do_one_event() {DoEventLoop(1,0,-1);}
  void end_run() {RunTermination();}
};

}}

//exlib_build_use geant4
#ifdef INLIB_MEM
//exlib_build_use inlib
#endif

#endif

