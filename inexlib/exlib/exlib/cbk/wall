// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_cbk_wall
#define exlib_cbk_wall

#include <inlib/sg/plots>
#include <inlib/sg/view_evd>
#include <inlib/wall/args>

#include "../sg/view_wall"

namespace exlib {
namespace wall {

inline inlib::sg::return_action action_send_to_screen(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_node,
                                                      const inlib::args& a_data) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) {
    a_gv.map_warn("viewer is not a wall client");
    return inlib::sg::return_none;
  }

  const std::string& what = a_node.values[0];  

  inlib::args opts(a_data);
  opts.add(inlib::wall::s_scale(),a_node.values[1]);  

  //if(a_grid.back_selected())

  bool status = false;
  if(what==inlib::wall::s_plots()) {
    inlib::sg::plots* _plots = inlib::sg::search_selectable<inlib::sg::plots>(a_gv.out(),a_gv.scene());
    if(!_plots) {
      a_gv.map_warn("no plots given");
      return inlib::sg::return_none;
    }
    status = wc->send_sg(*_plots,opts);
  } else if(what==inlib::wall::s_static()) {
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
    if(!_evd) return inlib::sg::return_none;
    status = wc->send_sg(_evd->static_sg(),opts);
  } else if(what==inlib::wall::s_dynamic()) {
    inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
    if(!_evd) return inlib::sg::return_none;
    status = wc->send_sg(_evd->dynamic_sg(),opts);
  }

  if(!status) a_gv.map_warn_failed();
  else        a_gv.map_warn_done();

  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_what(inlib::sg::gui_viewer& a_gv,
                                            inlib::sg::button_grid<inlib::sg::simple_button>& a_node) {
  inlib::args args;
  args.add(inlib::wall::s_placement(),inlib::wall::s_screen());
  args.add(inlib::sg::s_col(),inlib::tos((unsigned int)a_node.m_selected_col));
  args.add(inlib::sg::s_row(),inlib::tos((unsigned int)a_node.m_selected_row));

  inlib::sg::entries* entries = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);

 {std::vector<std::string> opts;
  opts.push_back(inlib::wall::s_static());
  opts.push_back(inlib::wall::s_dynamic());
  opts.push_back(inlib::wall::s_plots());
  entries->add_opts("what",opts[0],opts);}
  entries->add_float("scale",1);

  inlib::sg::add_callback(a_gv,*entries,action_send_to_screen,args);

  a_gv.push_list(entries);
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_placement(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }

  // ask wall cols rows :

  float wall_aspect = 1;
  unsigned int cols = 1;
  unsigned int rows = 1;

 {unsigned int ww,wh,bw,bh;
  std::string s;
  if(!wc->data_client().get_wall_params(s)){
    a_gv.map_warn_net_error();
    return inlib::sg::return_to_render;
  }
  if(!inlib::wall::s2params(s,ww,wh,bw,bh,cols,rows)) {
    a_gv.map_warn("can't get wall params");
    return inlib::sg::return_to_render;
  }
  unsigned int wall_ww = cols * (ww+2*bw);
  unsigned int wall_wh = rows * (wh+2*bh);
  wall_aspect = float(wall_ww-2*bw)/float(wall_wh-2*bh);}

  float wcw,wch;
 {float tx,ty,aspect;
  a_gv.get_gui_wcw_wch(wcw,wch,tx,ty,aspect);}

  inlib::sg::button_grid<inlib::sg::simple_button>* grid = new inlib::sg::button_grid<inlib::sg::simple_button>();
  a_gv.set_colors(*grid);

  grid->cols = cols;
  grid->rows = rows;
  grid->width = wcw*0.98f;
  grid->height = grid->width.value()/wall_aspect;

  grid->border_height = grid->height*0.1f; //border should be touchable.
  grid->border_width = grid->border_height;

  grid->auto_resize = true;

  inlib::sg::add_callback(a_gv,*grid,action_what);

  a_gv.push_list(grid);
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_connect(inlib::sg::gui_viewer& a_gv,inlib::sg::entries& a_node) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  const std::string& host = a_node.values[0];
  unsigned int port;
  if(!inlib::to<unsigned int>(a_node.values[1],port)) {
    a_gv.map_warn_nan();
    return inlib::sg::return_to_render;
  }
  if(!wc->data_client().initialize(host,port)) {
    std::string s("can't connect to ");
    s += host;
    s += " ";
    s += inlib::tos(port);
    a_gv.map_warn(s);
    return inlib::sg::return_to_render;
  }
  a_gv.map_warn("connected",false);
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_walls(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;

  //std::string host;
  //if(!inlib::net::host_name(a_gv.out(),host)){
  //  a_gv.map_warn("cannot get host name");
  //  return inlib::sg::return_to_render;
  //}

  //::printf("debug : \"%s\"\n",host.c_str());
  inlib::sg::entries* entries = new inlib::sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);
  inlib::sg::add_callback(a_gv,*entries,action_connect);
  entries->label = "connect";

 {std::vector<std::string> opts;
  //opts.push_back(host);
  const std::vector<inlib::xml::wall_host>& walls = wc->walls()._walls();
  inlib_vforcit(inlib::xml::wall_host,walls,it) opts.push_back((*it).host());
  entries->add_opts("wall front-end",
                    walls.size()?walls.front().host():"",
                    opts);}
  entries->add_uint("port",50800);

  a_gv.push_list(entries);
  return inlib::sg::return_to_render;
}


//////////////////////////////////////////////////
/// remote wall control //////////////////////////
//////////////////////////////////////////////////
/*
inline inlib::sg::return_action action_gui_wall(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  wc->show_wall_menu();
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_clear(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }
  if(!wc->send_string(inlib::wall::protocol::s_rwc_clear_scene())) {}
  return inlib::sg::return_none;
}

inline inlib::sg::return_action action_reset(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }
  if(!wc->send_string(inlib::wall::protocol::s_rwc_reset_camera())) {}
  return inlib::sg::return_none;
}

inline inlib::sg::return_action action_toggle_cursor(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }
  if(!wc->send_string(inlib::wall::protocol::s_rwc_toggle_cursor())) {}
  return inlib::sg::return_none;
}

inline inlib::sg::return_action action_toggle_menu(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }
  if(!wc->send_string(inlib::wall::protocol::s_rwc_toggle_menu())) {}
  return inlib::sg::return_none;
}
*/

inline inlib::sg::return_action action_send_static_sg(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  if(!wc->is_connected()) {
    a_gv.map_warn_not_connected();
    return inlib::sg::return_to_render;
  }
  //::printf("debug : scene_radius %g\n",scene_radius);
  inlib::args opts;
  opts.add(inlib::wall::s_placement(),inlib::wall::s_static());
//opts.add(inlib::wall::s_radius(),inlib::tos(a_gv.scene_camera_radius()));

  if(!wc->send_sg(_evd->static_sg(),opts)){
    a_gv.map_warn_failed();
    return inlib::sg::return_to_render;
  }
  return inlib::sg::return_none; 
}

inline inlib::sg::return_action action_disconnect(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;
  wc->disconnect_from_wall();
  return inlib::sg::return_none;
}

inline inlib::sg::return_action action_main(inlib::sg::gui_viewer& a_gv) {
  exlib::sg::view_wall* wc = exlib::sg::cast_view_wall(a_gv);
  if(!wc) return inlib::sg::return_none;

  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  //typedef exlib::app::wall_client wc_t;

  inlib::sg::add_item(a_gv,*list,"connect",action_walls);
  inlib::sg::add_item(a_gv,*list,"send static sg",action_send_static_sg);
  inlib::sg::add_item(a_gv,*list,"send to a screen",action_placement);
//inlib::sg::add_item(a_gv,*list,"clear",action_clear);
//inlib::sg::add_item(a_gv,*list,"reset",action_reset);
//inlib::sg::add_item(a_gv,*list,"toggle cursor",action_toggle_cursor);
//inlib::sg::add_item(a_gv,*list,"toggle menu",action_toggle_menu);
//inlib::sg::add_item(a_gv,*list,"gui wall",action_gui_wall);
  inlib::sg::add_item(a_gv,*list,"disconnect",action_disconnect);

  a_gv.push_list(list);
  return inlib::sg::return_to_render;
}

}}

#endif

//exlib_build_use inlib inlib_glutess freetype expat zlib png jpeg socket
