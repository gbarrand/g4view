// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_X11_main
#define exlib_app_X11_main

#include <inlib/sg/viewer>
#include <inlib/dirmanip>

#include "../../png"
#include "../../jpeg"

#include "../../sg/GL_VIEWER"
#include "../../sg/pv_holder"

#include <GL/glx.h>

#include <X11/cursorfont.h>

namespace app_X11 {

//IMPORTANT : pv_holder must come first.

template <class APP_MAIN>
class main : protected exlib::sg::pv_holder, public APP_MAIN {
  typedef exlib::sg::pv_holder parent_pv_holder;
  typedef APP_MAIN parent;
public:
  EXLIB_GL_VIEWER_METHODS
public: //exlib::sg::viewer
  virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {
    if(!parent::set_cursor_shape(a_shape)) return false;
    if(a_shape==inlib::sg::cursor_default) {
      ::XUndefineCursor(m_display,m_window);
      ::XSync(m_display,False);
      return true;
    } else if(a_shape==inlib::sg::cursor_target) {
      Cursor cursor = ::XCreateFontCursor(m_display,XC_X_cursor);
      if(!cursor) return false;
      ::XDefineCursor(m_display,m_window,cursor);
      ::XSync(m_display,False);
      return true;
    } else {
      return false;
    }
  }
public:
  virtual void win_render() {
    if(::glXMakeCurrent(m_display,m_window,m_ctx)==False){
      parent::m_out << "app_X11::main::win_render :"
            << " glXMakeCurrent failed."
            << std::endl;
      return;
    }
    render();
    ::glXSwapBuffers(m_display,m_window);
    if(::glXMakeCurrent(m_display,None,NULL)==False){
      parent::m_out << "app_X11::main::win_render :"
                    << " glXMakeCurrent(None,NULL) failed."
                    << std::endl;
    }
  }
public:
  main(std::ostream& a_out
       ,const std::string& a_app_name
       ,const std::string& a_data_dir
       ,const std::string& a_res_dir
       ,const std::string& a_out_dir
       ,const std::string& a_tmp_dir
       ,bool a_verbose
       ,Display* a_display
       ,Window a_window
       ,GLXContext a_ctx)
  :parent_pv_holder(a_out)
  ,parent(a_out,
          parent_pv_holder::gra_mgr(),parent_pv_holder::ttf(),parent_pv_holder::selection(),
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  ,m_display(a_display)
  ,m_window(a_window)
  ,m_ctx(a_ctx)
  ,m_win_x(0),m_win_y(0)
  ,m_app_name(a_app_name)
  {
    parent::push_home(); //NOTE : it can't call a potential push_home() done on an inheriting class.
  }
  virtual ~main(){}
protected:  
  main(const main& a_from)
  :parent_pv_holder(a_from)
  ,parent(a_from)
  {}
  main& operator=(const main& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
//  Display* display() const {return m_display;}
  Window window() const {return m_window;}
  void set_window(Window a_window) {
    m_mgr_gra.delete_gstos();
    m_window = a_window;
  }
  void set_position(int a_x,int a_y) {m_win_x = a_x;m_win_y = a_y;}
  void position(int& a_x,int& a_y) const {a_x = m_win_x;a_y = m_win_y;}
  //void set_app_name(const std::string& a_name) {m_app_name = a_name;}
  const std::string& app_name() const {return m_app_name;}
protected:
  Display* m_display;
  Window m_window;
  GLXContext m_ctx;
  int m_win_x;
  int m_win_y;
  std::string m_app_name;
};

}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat
//exlib_build_use GL GLX X11

#endif
