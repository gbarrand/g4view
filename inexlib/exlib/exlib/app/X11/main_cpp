// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_X11_main_cpp
#define exlib_app_X11_main_cpp

#ifdef EXLIB_NO_GL
#include "main_xgra"
#else
#include "main"
#endif

#include "../../X11/gui_dispatcher"

template <class APP_MAIN>
class rotate_dispatcher : public virtual exlib::X11::dispatcher {
  typedef exlib::X11::dispatcher parent;
public:
  virtual bool dispatch(XEvent& a_event) {
    if(!m_win) return false;
    if(a_event.xany.window!=m_win) return false;
    if(a_event.type==ConfigureNotify) {
      m_main.set_position(a_event.xconfigure.x,a_event.xconfigure.y);
      int width,height;
      m_x11.window_size(m_win,width,height);
      if( (width!=(int)m_main.width())   ||
          (height!=(int)m_main.height()) ){
        m_main.set_size(width,height);
        m_main.win_render();
      }
      return true;
    } else if(a_event.type==KeyPress) {
      KeySym keySym;
      ::XLookupString(&(a_event.xkey),NULL,0,&keySym,NULL);
      if(keySym==XK_F1)  {
        int width,height;
        if(!m_x11.window_size(m_win,width,height)) return true;
        if(width==height) return true;
        
        int x,y;
        m_main.position(x,y);
        //::printf("debug : location 001 : %d %d\n",x,y);

        m_x11.invalidate_dispatchers_with_window(m_win); //it invalidates (but not delete this dispatcher).

        m_x11.delete_window(m_win);
        m_win = m_x11.create_window(m_main.app_name().c_str(),x,y,height,width);
        m_x11.map_raise_window(m_win);

        m_x11.add_dispatcher(new rotate_dispatcher<APP_MAIN>(m_x11,m_win,m_main));
        m_x11.add_dispatcher(new exlib::X11::gui_dispatcher(m_x11,m_win,m_main));

        m_main.set_window(m_win);

        m_main.set_size(height,width);
        m_main.win_render();

        //m_x11.sync();
        return true;
      }
    }
    return false;
  }
  virtual Window window() const {return m_win;}
  virtual dispatcher* copy() const {return new rotate_dispatcher(*this);}
public:
  rotate_dispatcher(exlib::X11::base_session& a_x11,Window a_win,app_X11::main<APP_MAIN>& a_main)
  :parent()
  ,m_x11(a_x11)
  ,m_win(a_win)
  ,m_main(a_main)
  {}
  virtual ~rotate_dispatcher(){}
public:
  rotate_dispatcher(const rotate_dispatcher& a_from)
  :parent(a_from)
  ,m_x11(a_from.m_x11)
  ,m_win(a_from.m_win)
  ,m_main(a_from.m_main)
  {}
  rotate_dispatcher& operator=(const rotate_dispatcher& a_from) {
    m_win = a_from.m_win;
    return *this;
  }
protected:
  exlib::X11::base_session& m_x11;
  Window m_win;
  app_X11::main<APP_MAIN>& m_main;
};

//#define EXLIB_APP_HAS_TERM
//exlib_
//build_use Getline

#ifdef EXLIB_APP_HAS_TERM
#include <inlib/sys/base_timer>
#include <inlib/strip>
#include <Getline/ourex_Getline.h> //enforce ourex.

class term_timer : public inlib::base_timer {
  typedef inlib::base_timer parent;
public:
  virtual void action() {
    int is_stdin;
    if(!::ourex_Gl_is_there_stdin_input(&is_stdin)) {
      m_out << "term_timer::action : ourex_Gl_is_there_stdin_input() failed." << std::endl;
      return;
    }
    if(!is_stdin) return;
    char* p = ourex_Getlinem(1,0);
    if(!p) return;
    if(*p) {
      std::string cmd(p);
      inlib::strip(cmd,inlib::trailing,'\n');

      ::ourex_Gl_histadd((char*)cmd.c_str());

      if((cmd=="quit")||(cmd=="exit")) {
        m_ui.set_to_exit();
      } else {
        ::printf("dummy : \"%s\"\n",cmd.c_str());
      }

      ::ourex_Getlinem(-1,"term> ");
    } else { // ^D
      m_ui.set_to_exit();
      ::ourex_Getlinem(-1,"term> ");
    }
  }
public:
  INLIB_SCLASS(term_timer)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<term_timer>(this,a_class)) return p;
    return 0;
  }
public:
  term_timer(std::ostream& a_out,unsigned int a_interval,inlib::sg::ui& a_ui)
  :parent(a_interval)
  ,m_out(a_out)
  ,m_ui(a_ui)
  {
    ::ourex_Gl_histinit((char*)"term.hist");
    ::ourex_Getlinem(-1,"term> ");
//  return ourex_Gl_is_valid()?true:false;
  }
  virtual ~term_timer(){
    ::ourex_Gl_erase_line();
    //FIXME : have to reset the cursor to the begin of line and 
    //        erase the prompt. This would avoid to have in 
    //        OpenPAWFinalize an extra 
    //          out << std::endl;
    ::ourex_Getlinem(2,0);
  }
private:
  term_timer(const term_timer& a_from)
  :parent(a_from)
  ,m_out(a_from.m_out)
  ,m_ui(a_from.m_ui)
  {}
  term_timer& operator=(const term_timer&){return *this;}
private:
  std::ostream& m_out;
  inlib::sg::ui& m_ui;
};
#endif

#include "../../sg/view_wall"

#ifdef EXLIB_NO_GL
#else
#include "../../X11/session"
#endif

#include <iostream>

#ifdef INLIB_MEM
#include <inlib/mem>
#ifdef INLIB_MEM_ATEXIT
inline void at_exit() {std::cout << "exlib_main : at_exit..."<< std::endl;inlib::mem::balance(std::cout);}
#endif
#endif

#include <inlib/args>
#include <inlib/saui>
#include <inlib/sargs>

#include <cstdlib>

#include <inlib/app>

template <class APP_CONTEXT,class APP_MAIN>
int exlib_main(const std::string& a_app_name,int argc,char** argv,bool a_land = true) {
  //NOTE : we enforce landscape by default for desktop oapps.
  bool verbose = false;

#ifdef INLIB_MEM
  #ifdef INLIB_MEM_ATEXIT
  ::atexit(at_exit);
  #endif  
  inlib::mem::set_check_by_class(true);{
#endif

  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe directory." << std::endl;
    return EXIT_FAILURE;
  }

  inlib::args args(argc,argv);
  if(a_land) args.add(inlib::s_arg_land(),"");

  verbose = args.is_arg(inlib::s_arg_verbose());

  if(verbose) args.dump(std::cout,"main arguments :");

  std::string home_dir;
  inlib::dir::home(home_dir);
  if(home_dir.empty()) {
    std::cout << "exlib_main : can't get home directory." << std::endl;
    return EXIT_FAILURE;
  }  
  std::string doc_app_dir = "Documents";
  doc_app_dir += inlib::sep();
  doc_app_dir += a_app_name;

  std::string doc_dir = home_dir;
  doc_dir += inlib::sep();
  doc_dir += doc_app_dir;

  std::string res_dir;
  inlib::app_res_dir(exe_path,res_dir);

  std::string data_dir = doc_dir;
  std::string out_dir = doc_dir;
  std::string tmp_dir = "/tmp";

#ifdef EXLIB_NO_GL
  exlib::X11::base_session x11(std::cout);
#else
  exlib::X11::session x11(std::cout);
#endif
  if(!x11.display()) return EXIT_FAILURE;

  unsigned int ww,wh;
  inlib::window_size_from_args(args,ww,wh);

  Window win = x11.create_window(a_app_name.c_str(),0,0,ww,wh);
  if(win==0L) return EXIT_FAILURE;
  if(args.is_arg(inlib::s_arg_full_screen())){
    int dw = ::XDisplayWidth(x11.display(),::XDefaultScreen(x11.display()));
    int dh = ::XDisplayHeight(x11.display(),::XDefaultScreen(x11.display()));
    ::XMoveResizeWindow(x11.display(),win,0,0,dw,dh);
    x11.set_wm_no_decorations(win);
  } else if(args.is_arg(inlib::s_arg_no_decos())){
    x11.set_override_redirect(win);
  }

  x11.map_raise_window(win);
  //x11.show_window(win); //it waits a MapNotify.

  APP_CONTEXT app_context(res_dir);

 {app_X11::main<APP_MAIN> _main(std::cout,a_app_name,data_dir,res_dir,out_dir,tmp_dir,verbose,x11.display(),win
#ifdef EXLIB_NO_GL
#else
                                ,x11.context()
#endif
                                );
  _main.set_argcv(args);  
  if(args.is_arg(inlib::s_arg_black())) _main.m_params.m_scene_screen_color = inlib::colorf_black();

 {std::string DOCUMENT;
  args.files_at_end(); //take care of the upper -land.
  if(!args.file(DOCUMENT)) args.find(inlib::s_arg_document(),DOCUMENT);  
  if(verbose) {
    std::cout << "exlib_main :"
              << " document is " << inlib::sout(DOCUMENT) << "."
              << std::endl;
  }
  if(DOCUMENT.size()) {
    _main.create_gui();
    bool done;
    _main.opener().open(DOCUMENT,inlib::file::s_format_guessed(),inlib::args(),done);
  }}

  //////////////////////////////////////////////////////////////////
  /// steering /////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  x11.add_dispatcher(new rotate_dispatcher<APP_MAIN>(x11,win,_main));
  x11.add_dispatcher(new exlib::X11::gui_dispatcher(x11,win,_main));

  //Atom atom = ::XInternAtom(x11.display(),"WM_DELETE_WINDOW",False);

  exlib::sg::view_wall* _view_wall = exlib::sg::cast_view_wall(_main);
  if(_view_wall && _view_wall->walls()._walls().empty()) _view_wall = 0;

  if(_view_wall) { //APP_USE_WALL

  while(true) {
    XEvent xevent;
    ::XNextEvent(x11.display(),&xevent);
    if((xevent.type==Expose)&&(xevent.xany.window==win)) break;
    x11.dispatch(xevent);
  }

  int fd_X11 = ::XConnectionNumber(x11.display());
  std::vector<int> socks;
  socks.push_back(fd_X11);
  std::vector<bool> has_input;

#ifdef EXLIB_APP_HAS_TERM
  unsigned int term_timer_interval = 16; //millisecs.
  term_timer _term_timer(std::cout,term_timer_interval,_main);
  _term_timer.start();
#endif

  if(verbose) {
    std::cout << "exlib_main :"
              << " enter steering loop ..."
              << std::endl;
  }

  while(!_main.to_exit()) { 

#ifdef EXLIB_APP_HAS_TERM
    if(_main.num_cbks() || _term_timer.active()) {
      bool dc_connected = _view_wall->is_connected();
      if(_main.num_cbks()) _main.do_works();
      if(_term_timer.active()) _term_timer.check_time_out();
#else
    if(_main.num_cbks()) {
      bool dc_connected = _view_wall->is_connected();
      _main.do_works();
#endif

      if(!dc_connected && _view_wall->is_connected()) {
        //was not connected, but the do_works() did a connection.
        socks.clear();
        socks.push_back(fd_X11);
        socks.push_back(_view_wall->data_client().socket().socket());
      }

      if(dc_connected && !_view_wall->is_connected()) {
        //was connected, but the do_works() did a disconnection.
        socks.clear();
        socks.push_back(fd_X11);
      }

      //while(::XPending(x11.display())) { //why not that ?
      if(::XPending(x11.display())) {
        XEvent xevent;
        ::XNextEvent(x11.display(),&xevent);
        if(xevent.type==ClientMessage) {
          if(xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom()) break;
        }
        x11.dispatch(xevent);
      }
 
      if(_view_wall->is_connected()) {
        bool have_socks_input;
        if(!_view_wall->data_client().socket().is_there_input(have_socks_input)) {
          std::cout << "exlib_main :"
                    << " inlib::net::is_there_input failed."
                    << std::endl;
          break;
        }
        if(have_socks_input) {
          if(_view_wall->is_connected()) {
            if(!_view_wall->data_client().poll()) {}
            if(!_view_wall->is_connected()) {
              //we have received a inlib::wall::protocol::disconnect()
              _main.map_warn("disconnected");
              _main.win_render();
              socks.clear();
              socks.push_back(fd_X11);
            }
          }
        }
      }
  
#ifdef EXLIB_NO_GL
      _main.do_paint();
#endif
      continue;
    }

    if(verbose) {
      std::cout << "exlib_main :"
                << " inlib::net::wait_input() ..."
                << std::endl;
    }

    if(!inlib::net::wait_input(socks,has_input)) {
      std::cout << "exlib_main :"
                << " inlib::net::wait_input failed."
                << std::endl;
      break;
    }

    if(::XPending(x11.display())) {
      XEvent xevent;
      ::XNextEvent(x11.display(),&xevent);
      if(xevent.type==ClientMessage) {
        if(xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom())
          break;
      }
      x11.dispatch(xevent);

    } else { //from data client.

      if(_view_wall->is_connected()) {
        if(!_view_wall->data_client().poll()) {}
        if(!_view_wall->is_connected()) {
          //we have received a inlib::wall::protocol::disconnect()
          _main.map_warn("disconnected");
          _main.win_render();
          socks.clear();
          socks.push_back(fd_X11);
        }
      }

    }

#ifdef EXLIB_NO_GL
    _main.do_paint();
#endif

  }


  } else { //APP_USE_WALL

  while(!_main.to_exit()) { 

    //std::cout << "exlib_main : loop..." << std::endl;
    if(_main.num_cbks()) {
      _main.do_works();
      if(!::XPending(x11.display())) {
#ifdef EXLIB_NO_GL
        _main.do_paint();
#endif
        continue;
      }
    }

    XEvent xevent;
    ::XNextEvent(x11.display(),&xevent);
    if(xevent.type==ClientMessage) {
      if(xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom())
        break;
    }
    x11.dispatch(xevent);

#ifdef EXLIB_NO_GL
    _main.do_paint();
#endif

  }

  } //APP_USE_WALL

  } //_main

  x11.delete_window(win);

#ifdef INLIB_MEM
  }
  #ifndef INLIB_MEM_ATEXIT
  inlib::mem::balance(std::cout);
  #endif
  std::cout << a_app_name << "_X11 : exit(mem) ..." << std::endl;
#else  
  if(verbose) std::cout << a_app_name << "_X11 : exit ..." << std::endl;
#endif

  return EXIT_SUCCESS;
}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat
//exlib_build_use GL GLX X11

#endif

