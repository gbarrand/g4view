// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_X11_main_cpp
#define exlib_app_X11_main_cpp

#ifdef EXLIB_NO_GL
#include "main_xgra"
#else
#include "main"
#endif

#include "../../X11/gui_dispatcher"

template <class APP_MAIN>
class rotate_dispatcher : public virtual exlib::X11::dispatcher {
  typedef exlib::X11::dispatcher parent;
public:
  virtual bool dispatch(XEvent& a_event) {
    if(!m_win) return false;
    if(a_event.xany.window!=m_win) return false;
    if(a_event.type==ConfigureNotify) {
      m_main.set_position(a_event.xconfigure.x,a_event.xconfigure.y);
      int width,height;
      m_x11.window_size(m_win,width,height);
      if( (width!=(int)m_main.width())   ||
          (height!=(int)m_main.height()) ){
        m_main.set_size(width,height);
        m_main.win_render();
      }
      return true;
    } else if(a_event.type==KeyPress) {
      KeySym keySym;
      ::XLookupString(&(a_event.xkey),NULL,0,&keySym,NULL);
      if(keySym==XK_F1)  {
        int width,height;
        if(!m_x11.window_size(m_win,width,height)) return true;
        if(width==height) return true;

        int x,y;
        m_main.position(x,y);
        //::printf("debug : location 001 : %d %d\n",x,y);

        m_x11.invalidate_dispatchers_with_window(m_win); //it invalidates (but not delete this dispatcher).

        m_x11.delete_window(m_win);
        m_win = m_x11.create_window(m_main.app_name().c_str(),x,y,height,width);
        m_x11.map_raise_window(m_win);

        m_x11.add_dispatcher(new rotate_dispatcher<APP_MAIN>(m_x11,m_win,m_main));
        m_x11.add_dispatcher(new exlib::X11::gui_dispatcher(m_x11,m_win,m_main));

        m_main.set_window(m_win);

        m_main.set_size(height,width);
        m_main.win_render();

        //m_x11.sync();
        return true;
      }
    }
    return false;
  }
  virtual Window window() const {return m_win;}
  virtual dispatcher* copy() const {return new rotate_dispatcher(*this);}
public:
  rotate_dispatcher(exlib::X11::base_session& a_x11,Window a_win,app_X11::main<APP_MAIN>& a_main)
  :parent()
  ,m_x11(a_x11)
  ,m_win(a_win)
  ,m_main(a_main)
  {}
  virtual ~rotate_dispatcher(){}
public:
  rotate_dispatcher(const rotate_dispatcher& a_from)
  :parent(a_from)
  ,m_x11(a_from.m_x11)
  ,m_win(a_from.m_win)
  ,m_main(a_from.m_main)
  {}
  rotate_dispatcher& operator=(const rotate_dispatcher& a_from) {
    m_win = a_from.m_win;
    return *this;
  }
protected:
  exlib::X11::base_session& m_x11;
  Window m_win;
  app_X11::main<APP_MAIN>& m_main;
};

#include "sg_serv"
#include "../../zlib"

#ifdef EXLIB_NO_GL
#else
#include "../../X11/session"
#endif

#ifdef EXLIB_APP_HAS_TERM
#ifdef EXLIB_APP_TERM_INSH
#include "../../insh_term_timer"
#else
#include "../../dummy_term_timer"
#endif
#else
#include <inlib/sys/base_timer>
#endif

#include <inlib/sg/view_sg_client>

#include <inlib/sg/view_sg_serv>

#ifdef INLIB_MEM
#include <inlib/mem>
#ifdef INLIB_MEM_ATEXIT
inline void at_exit() {std::cout << "exlib_main : at_exit..."<< std::endl;inlib::mem::balance(std::cout);}
#endif
#endif

#include <inlib/args>
#include <inlib/saui>
#include <inlib/sargs>
#include <inlib/app>

#include <iostream>
#include <cstdlib>

template <class APP_MAIN>
inline int exlib_main(const std::string& a_app_name,int argc,char** argv) {
  bool verbose = false;

#ifdef INLIB_MEM
  #ifdef INLIB_MEM_ATEXIT
  ::atexit(at_exit);
  #endif
  inlib::mem::set_check_by_class(true);{
#endif

  inlib::args args(argc,argv);

  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  if(args.is_arg(inlib::s_arg_h())||args.is_arg(inlib::s_arg_help())) {
    std::cout << "\
usage :\n\
  OS> <exe> [options] <file>\n\
options are :\n\
-h, -help           : dump this message.\n\
-verbose            : verbose mode.\n\
-version            : dump the version of the application.\n\
-ww=<window width>  : if -wh is not given, wh is computed to have a A4 landscape ratio.\n\
-wh=<window height> : if -ww is not given, ww is computed to have a A4 landscape ratio.\n\
-portrait           : if needed, swap ww and wh to be in portrait mode.\n\
-land               : if needed, swap ww and wh to be in landscape mode.\n\
-full_screen        : to be full screen.\n\
-no_decos           : to remove window decorations.\n\
-black              : start with a black backgroud for the viewing area.\n\
-monitors           : dump the number of monitors known by the X11 server.\n\
-arg0               : print argv[0].\n\
";
#ifdef EXLIB_APP_HAS_TERM
#ifdef EXLIB_APP_TERM_INSH
    std::cout << "\
-terminal           : have an insh prompt in the terminal.\n\
";
#endif
#endif
    std::cout << APP_MAIN::s_args_help();
    return EXIT_FAILURE;
  }
  if(args.is_arg(inlib::s_arg_version())) {
    std::cout << APP_MAIN::s_version() << std::endl;
    return EXIT_FAILURE;
  }
  if(args.is_arg(inlib::s_arg_arg0())) {
    std::cout << (argc?argv[0]:"none") << std::endl;
    return EXIT_FAILURE;
  }
  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe directory." << std::endl;
    return EXIT_FAILURE;
  }

  verbose = args.is_arg(inlib::s_arg_verbose());

  if(verbose) args.dump(std::cout,"main arguments :");

  std::string home_dir;
  inlib::dir::home(home_dir);
  if(home_dir.empty()) {
    std::cout << "exlib_main : can't get home directory." << std::endl;
    return EXIT_FAILURE;
  }
  std::string doc_app_dir = "Documents";
  doc_app_dir += inlib::sep();
  doc_app_dir += a_app_name;

  std::string doc_dir = home_dir;
  doc_dir += inlib::sep();
  doc_dir += doc_app_dir;

  std::string res_dir;
  inlib::app_res_dir(exe_path,res_dir);

  std::string out_dir = doc_dir;
//if(!inlib::mkdirs(std::cout,out_dir)) { //for EsbRootView/setups.
//  std::cout << "exlib_main : can't create directory " << inlib::sout(out_dir) << "." << std::endl;
//  return EXIT_FAILURE;
//}

  std::string tmp_dir = "/tmp";

  if(XInitThreads()==False) { // for inlib::sg::view_sg_serv.
    std::cout << "exlib_main : XInitThreads failed." << std::endl;
    return EXIT_FAILURE;
  }

  unsigned int monitor = 0;
  args.find<unsigned int>(inlib::s_arg_monitor(),monitor,0);

#ifdef EXLIB_NO_GL
  exlib::X11::base_session x11(std::cout,monitor);
#else
  exlib::X11::session x11(std::cout,monitor);
#endif
  if(!x11.display()) return EXIT_FAILURE;

  if(args.is_arg(inlib::s_arg_monitors())) {
    int monitors = ::XScreenCount(x11.display());
    std::cout << monitors << std::endl;
    return EXIT_FAILURE;
  }

  unsigned int ww,wh;
  inlib::window_size_from_args(args,ww,wh);

  Window win = x11.create_window(a_app_name.c_str(),0,0,ww,wh);
  if(win==0L) return EXIT_FAILURE;
  if(args.is_arg(inlib::s_arg_full_screen())){
    int dw = ::XDisplayWidth(x11.display(),monitor);
    int dh = ::XDisplayHeight(x11.display(),monitor);
    ::XMoveResizeWindow(x11.display(),win,0,0,dw,dh);
    x11.set_wm_no_decorations(win);
  } else if(args.is_arg(inlib::s_arg_no_decos())){
    x11.set_override_redirect(win);
  }

  x11.map_raise_window(win);
  //x11.show_window(win); //it waits a MapNotify.

 {app_X11::main<APP_MAIN> _main(std::cout,doc_dir,res_dir,out_dir,tmp_dir,verbose,x11.display()
#ifdef EXLIB_NO_GL
                                ,monitor,win
#else
                                ,win
                                ,x11.context()
#endif
                                );
  _main.set_argcv(args);
  if(args.is_arg(inlib::s_arg_black())) _main.m_params.m_scene_screen_color = inlib::colorf_black();

  //////////////////////////////////////////////////////////////////
  //// app as a scene graph server or client : /////////////////////
  //////////////////////////////////////////////////////////////////
  inlib::sg::view_sg_serv* _view_sg_serv = inlib::sg::cast_view_sg_serv(_main);
  if(_view_sg_serv)
    _view_sg_serv->set_params(0,exlib::sg_serv_connect_func,exlib::sg_serv_disconnect_func,0,
                              x11.display(),(void*)win);

  inlib::sg::view_sg_client* _view_sg_client = inlib::sg::cast_view_sg_client(_main);
  if(_view_sg_client && _view_sg_client->walls()._walls().empty()) _view_sg_client = 0;

  //////////////////////////////////////////////////////////////////
  /// insh default scripts : ///////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  _main.source_dot_insh();
  _main.exec_startup_insh();
  /*_main.exec_insh_startup();*/

  //////////////////////////////////////////////////////////////////
  /// document file : //////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
 {std::string DOCUMENT;
  args.files_at_end(); //take care of the upper -land.
  if(!args.file(DOCUMENT)) args.find(inlib::s_arg_document(),DOCUMENT);
  if(verbose) {
    std::cout << "exlib_main :"
              << " document is " << inlib::sout(DOCUMENT) << "."
              << std::endl;
  }
  if(DOCUMENT.size()) {
    _main.create_gui();
    bool done;
    _main.opener().open(DOCUMENT,inlib::file::s_format_guessed(),inlib::args(),done);
  }}

  //////////////////////////////////////////////////////////////////
  /// terminal : ///////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  std::ostream& _term_out = std::cout;
#include "../term.icc"  // have to delete _term_timer. Done below.

  //////////////////////////////////////////////////////////////////
  /// steering : ///////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  x11.add_dispatcher(new rotate_dispatcher<APP_MAIN>(x11,win,_main));
  x11.add_dispatcher(new exlib::X11::gui_dispatcher(x11,win,_main));

  //Atom atom = ::XInternAtom(x11.display(),"WM_DELETE_WINDOW",False);

  bool extra_sockets = false;
  extra_sockets = _view_sg_client?true:false;
  if(!extra_sockets) extra_sockets = _view_sg_serv?true:false;

  if(extra_sockets) {

  while(true) {
    XEvent xevent;
    ::XNextEvent(x11.display(),&xevent);
    if((xevent.type==Expose)&&(xevent.xany.window==win)) break;
    x11.dispatch(xevent);
  }

  int fd_X11 = ::XConnectionNumber(x11.display());

  std::vector<int> socks;
  std::vector<bool> has_input;

  if(verbose) {
    std::cout << "exlib_main :"
              << " enter steering loop (extra_sockets) ..."
              << std::endl;
  }

  while(!_main.to_exit()) {

    if(_main.num_cbks() || (_term_timer && _term_timer->active()) ) {
      if(_main.num_cbks()) _main.do_works();
      if(_term_timer && _term_timer->active()) _term_timer->check_time_out();

      while(::XPending(x11.display())) {
        XEvent xevent;
        ::XNextEvent(x11.display(),&xevent);
        if( (xevent.type==ClientMessage) && (xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom()) ) {
          _main.set_to_exit();
        } else {
          x11.dispatch(xevent);
        }
      }

      if(_view_sg_client && _view_sg_client->is_connected()) {
        bool have_sock_input;
        if(!_view_sg_client->is_there_input(have_sock_input)) {
          std::cout << "exlib_main : inlib::net::is_there_input failed." << std::endl;
          break;
        }
        if(have_sock_input) {
          if(!_view_sg_client->poll()) {}
          if(!_view_sg_client->is_connected()) {
            //we have received a inlib::wall::protocol::disconnect()
            _main.map_warn("disconnected");
            _main.win_render();
          }
        }
      }

      if(_view_sg_serv && _view_sg_serv->is_connected()) {
        bool have_sock_input;
        if(!_view_sg_serv->is_there_input(have_sock_input)) {
          std::cout << "exlib_main : inlib::net::is_there_input failed." << std::endl;
          break;
        }
        if(have_sock_input) {
          if(!_view_sg_serv->treat_event(exlib::decompress_buffer)) {
            std::cout  << "exlib_main : view_sg_serv::treat_event() failed." << std::endl;
          }
        }
      }

#ifdef EXLIB_NO_GL
      _main.do_paint();
#endif
      continue;
    }

//#define  EXLIB_APP_POLL
#ifdef EXLIB_APP_POLL
    while(::XPending(x11.display())) {
      XEvent xevent;
      ::XNextEvent(x11.display(),&xevent);
      if( (xevent.type==ClientMessage) && (xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom()) ) {
        _main.set_to_exit();
      } else {
        x11.dispatch(xevent);
      }
    }

    if(_view_sg_client && _view_sg_client->is_connected()) {
      bool have_sock_input;
      if(!_view_sg_client->is_there_input(have_sock_input)) {
        std::cout << "exlib_main : inlib::net::is_there_input failed." << std::endl;
        break;
      }
      if(have_sock_input) {
        if(verbose) std::cout << "exlib_main : poll : event on view_sg_client..." << std::endl;
        if(!_view_sg_client->poll()) {}
        if(!_view_sg_client->is_connected()) {
          //we have received a inlib::wall::protocol::disconnect()
          _main.map_warn("disconnected");
          _main.win_render();
        }
      }
    }

    if(_view_sg_serv && _view_sg_serv->is_connected()) {
      bool have_sock_input;
      if(!_view_sg_serv->is_there_input(have_sock_input)) {
        std::cout << "exlib_main : inlib::net::is_there_input failed." << std::endl;
        break;
      }
      if(have_sock_input) {
        if(verbose) std::cout << "exlib_main : poll : event on view_sg_serv..." << std::endl;
        if(!_view_sg_serv->treat_event(exlib::decompress_buffer)) {
          std::cout  << "exlib_main : view_sg_serv::treat_event() failed." << std::endl;
        }
      }
    }

#else //not EXLIB_APP_POLL
    socks.clear();
    socks.push_back(fd_X11);
    // For the two below lines, we must provide something even if _view_sg_client, _view_sg_serv = 0.
    socks.push_back(_view_sg_client ? _view_sg_client->socket() : INVALID_SOCKET);
    socks.push_back(_view_sg_serv ? _view_sg_serv->socket() : INVALID_SOCKET);

    if(!inlib::net::wait_input(socks,has_input)) {
      std::cout << "exlib_main : inlib::net::wait_input failed." << std::endl;
      break;
    }

/*
    std::cout << "exlib_main : debug : some event ... (#input " << has_input.size() << ")." << std::endl;
    if(has_input.size()==3) {
      std::cout << "exlib_main : debug : 3 input : " << has_input[0] << " " << has_input[1] << " " << has_input[2] << std::endl;
    } else if(has_input.size()==2) {
      std::cout << "exlib_main : debug : 2 input : " << has_input[0] << " " << has_input[1] << std::endl;
    } else if(has_input.size()==1) {
      std::cout << "exlib_main : debug : 1 input : " << has_input[0] << std::endl;
    }
*/

    while(::XPending(x11.display())) {
      XEvent xevent;
      ::XNextEvent(x11.display(),&xevent);
      if( (xevent.type==ClientMessage) && (xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom()) ) {
        _main.set_to_exit();
      } else {
        x11.dispatch(xevent);
      }
    }

    if(has_input[1]) {  //from wall :
      if(verbose) std::cout << "exlib_main : event on view_sg_client..." << std::endl;
      if(!_view_sg_client->poll()) {}
      if(!_view_sg_client->is_connected()) {
        //we have received a inlib::wall::protocol::disconnect()
        _main.map_warn("disconnected");
        _main.win_render();
      }
    }

    if(has_input[2]) {  //from data client :
      if(verbose) std::cout << "exlib_main : event on view_sg_serv..." << std::endl;
      if(!_view_sg_serv->treat_event(exlib::decompress_buffer)) {
        std::cout  << "exlib_main : view_sg_serv::treat_event() failed." << std::endl;
      }
    }

#endif //end EXLIB_APP_POLL

#ifdef EXLIB_NO_GL
    _main.do_paint();
#endif

  }


  } else { //not extra_sockets

    if(verbose) {
      std::cout << "exlib_main : enter steering loop (pure X11) ..." << std::endl;
    }

    while(!_main.to_exit()) {

      //std::cout << "exlib_main : loop..." << std::endl;
      if(_main.num_cbks() || (_term_timer && _term_timer->active()) ) {
        if(_main.num_cbks()) _main.do_works();
        if(_term_timer && _term_timer->active()) _term_timer->check_time_out();

        if(!::XPending(x11.display())) {
#ifdef EXLIB_NO_GL
          _main.do_paint();
#endif
          continue;
        }
      }

      XEvent xevent;
      ::XNextEvent(x11.display(),&xevent);
      if( (xevent.type==ClientMessage) && (xevent.xclient.data.l[0]==(long)x11.SESSION_EXIT_STEER_atom()) ) {
        _main.set_to_exit();
      } else {
        x11.dispatch(xevent);
      }

#ifdef EXLIB_NO_GL
      _main.do_paint();
#endif

    }

  } //extra_sockets

  delete _term_timer;

  if(_view_sg_serv) _view_sg_serv->set_params(0,0,0,0,0,0);
  if(_view_sg_client) _view_sg_client->set_params(0,0,0,0);

  } //_main

  x11.delete_window(win);

#ifdef INLIB_MEM
  }
  #ifndef INLIB_MEM_ATEXIT
  inlib::mem::balance(std::cout);
  #endif
  std::cout << a_app_name << "_X11 : exit(mem) ..." << std::endl;
#else
  if(verbose) std::cout << a_app_name << "_X11 : exit ..." << std::endl;
#endif

  return EXIT_SUCCESS;
}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat
//exlib_build_use GLX X11

//exlib_build_cppflags -DEXLIB_APP_HAS_TERM -DEXLIB_APP_TERM_INSH
//exlib_build_use Getline

#endif

