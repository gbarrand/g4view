// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_offscreen_main
#define exlib_app_offscreen_main

#include "../../png"

//exlib_build_use inlib freetype png zlib

//#define EXLIB_BATCH_MAIN_USE_GL2PS
//ex_lib_build_use gl2ps

#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
#include "../../sg/pv_holder_gl2ps"
#else
#include "../../sg/pv_holder_zb"
#include <inlib/wps>
#endif

#include <inlib/sg/view_evd> //for insh_dispatch

namespace app_offscreen {

template <class APP_MAIN>
class main
#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
:protected exlib::sg::pv_holder_gl2ps
#else
:protected exlib::sg::pv_holder_zb
#endif
,public APP_MAIN { //IMPORTANT : pv_holder must come first.
#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
  typedef exlib::sg::pv_holder_gl2ps parent_pv_holder;
#else
  typedef exlib::sg::pv_holder_zb parent_pv_holder;
#endif
  typedef APP_MAIN parent;
public:
  virtual void render() {
    parent::check_gui_cursor();
    if(!parent::m_ww||!parent::m_wh) return;

    if(m_out_file.empty()) {
      parent::m_out << "app_offscreen::main::render() :"
                    << " no output file given."
                    << std::endl;
      return;
    }

#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
    parent_pv_holder::m_mgr_gra.begin_render(0,0,parent::m_ww,parent::m_wh,
                                parent::m_clear_color.r(),
                                parent::m_clear_color.g(),
                                parent::m_clear_color.b(),
                                parent::m_clear_color.a());

    exlib::sg::gl2ps_action action(parent::m_out,parent::m_ww,parent::m_wh);

   {const inlib::colorf& bg = parent::m_clear_color;
    action.set_background(bg[0],bg[1],bg[2]);} //must be before the below open().

    //parent::m_out << "debug : app_offscreen::main::render() : file " << inlib::sout(m_out_file) << "." << std::endl;

    if(!action.open(m_out_file)) {
      parent::m_out << "app_offscreen::main::render() :"
                    << " can't open " << inlib::sout(m_out_file) << "."
                    << std::endl;
      return;
    }

    action.state().m_use_gsto = parent::m_use_gsto;

    parent::m_sg.render(action);
    if(!action.end()) {
      parent::m_out << "app_offscreen::main::render() :"
                    << " bad exlib::X11::render::end() failed."
                    << std::endl;
    }

    action.close();

    parent_pv_holder::m_mgr_gra.end_render();
#else
    inlib::sg::zb_action action(parent_pv_holder::m_mgr_gra,parent::m_out,parent::m_ww,parent::m_wh);

    const inlib::colorf& bg = parent::m_clear_color;
    action.zbuffer().clear_color_buffer(0);
    action.add_color(bg.r(),bg.g(),bg.b());
    action.zbuffer().clear_depth_buffer();

    parent::m_sg.render(action);

    if(m_png) {
      size_t sz;
      unsigned char* buffer = action.get_rgbas(sz);
      if(!buffer) {
        parent::m_out << "app_offscreen::main::render() :"
              << " can't get rgba image."
              << std::endl;
        return;
      }
      unsigned int bpp = 4;
      exlib::png::write(parent::m_out,m_out_file,buffer,parent::m_ww,parent::m_wh,bpp);
      delete [] buffer;
    } else { //ps
      inlib::wps wps(parent::m_out);
      if(!wps.open_file(m_out_file)) {
        parent::m_out << "app_offscreen::main::render() :"
                      << " can't open " << m_out_file << std::endl;
        return;
      }
      wps.PS_BEGIN_PAGE();
      wps.PS_PAGE_SCALE(float(parent::m_ww),float(parent::m_wh));
      // put zbuffer in m_out_file. The get_rgb function is the bridge
      // between zb_action and wps.
      wps.PS_IMAGE(parent::m_ww,parent::m_wh,inlib::wps::rgb_4,inlib::sg::zb_action::get_rgb,&action);
      wps.PS_END_PAGE();
      wps.close_file();
    }
#endif
    //parent::after_render();

  }
public: //exlib::sg::viewer
  //virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {}
public:
  virtual void win_render() {
    m_to_render = true;
  }
  virtual bool insh_dispatch(const std::string& a_cmd,const std::vector<std::string>& a_args) {
    if(a_cmd=="do_paint") {
      if(a_args.size()==1) {
        //m_out_file = parent::out_dir()+inlib::sep()+a_file;
        m_out_file = a_args[0];
      } else {
        m_out_file = "out.ps";
      }
      win_render();
      do_paint();
      return true;      
    }

    if(a_cmd=="do_png") {
      if(a_args.size()==1) {
        //m_out_file = parent::out_dir()+inlib::sep()+a_file;
        m_out_file = a_args[0];
      } else {
        m_out_file = "out.png";
      }
      m_png = true;
      win_render();
      do_paint();
      m_png = false;
      return true;
    }
    
    if(a_cmd=="clear_static_scene"){
      inlib::sg::action_clear_static_sg(*this);
      return true;
    }
    
    if(a_cmd=="clear_dynamic_scene"){
      inlib::sg::action_clear_dynamic_sg(*this);
      return true;
    }

    return parent::insh_dispatch(a_cmd,a_args);
  }
public:
  main(std::ostream& a_out
       ,const std::string& a_data_dir
       ,const std::string& a_res_dir
       ,const std::string& a_out_dir
       ,const std::string& a_tmp_dir
       ,bool a_verbose
       )
  :parent_pv_holder(a_out)
  ,parent(a_out,parent_pv_holder::gra_mgr(),parent_pv_holder::ttf(),parent_pv_holder::selection(),
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  ,m_to_render(false)
  ,m_out_file()
  ,m_png(false)
  {
    //m_out_file = a_out_dir+inlib::sep()+"out.ps";
    parent::m_params.m_image_buttons = false;
    parent::push_home(); //NOTE : it can't call a potential push_home() done on an inheriting class.
  }
  virtual ~main(){}
protected:
  main(const main&){}
  main& operator=(const main&){return *this;}
public:
  void do_paint() {
    if(m_to_render) {
      //::printf("debug : app_offscreen::main::do_paint : render()\n");
      render();
      m_to_render = false;
    }
  }
  const std::string& out_file() const {return m_out_file;}
protected:
  bool m_to_render;
  std::string m_out_file;
  bool m_png;
};

}

#endif
