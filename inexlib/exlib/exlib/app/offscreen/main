// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_offscreen_main
#define exlib_app_offscreen_main

#include "../../sg/pv_holder_offscreen"

namespace app_offscreen {

template <class APP_MAIN>
class main : protected exlib::sg::pv_holder_offscreen, public APP_MAIN { //IMPORTANT : pv_holder must come first.
  typedef exlib::sg::pv_holder_offscreen parent_pv_holder;
  typedef APP_MAIN parent;
public: //exlib::app::main
  virtual bool windowing(std::string& a_value) const {a_value = "offscreen";return true;}
  virtual void render() {parent::check_gui_cursor();}
  virtual unsigned char* get_pixels(unsigned int,unsigned int,bool = true) {return 0;}
  virtual bool write_scene_to_paper(const std::string& a_path,const std::string& a_format,unsigned int a_w,unsigned int a_h) {
    win_render();  //it will trigger a create_gui().
    return parent::write_scene_to_paper(a_path,a_format,a_w,a_h);
  }
public: //exlib::sg::viewer
  //virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {}
public: //inlib::sg::ui.
  virtual void win_render() {render();}
public:
  main(std::ostream& a_out
       ,const std::string& a_doc_dir,const std::string& a_res_dir,const std::string& a_out_dir,const std::string& a_tmp_dir
       ,unsigned int a_width,unsigned int a_height
       ,bool a_verbose)
  :parent_pv_holder(a_out)
  ,parent(a_out,parent_pv_holder::m_zb_mgr,parent_pv_holder::ttf(),parent_pv_holder::selection(),
          a_doc_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  {
    parent::set_size(a_width,a_height);
 // parent::m_params.m_image_buttons = false;
    parent::push_home(); //NOTE : it can't call a potential push_home() done on an inheriting class.
  }
  virtual ~main(){}
protected:
  main(const main&){}
  main& operator=(const main&){return *this;}
};

}

//exlib_build_use inlib freetype

#endif
