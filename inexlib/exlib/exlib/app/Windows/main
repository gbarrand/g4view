// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_Windows_main
#define exlib_app_Windows_main

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include "../../Windows/window"
#include "../../Windows/glarea"

#include "../../sg/pv_holder"
#include "../../png"
#include "../../jpeg"
#include "../../sg/GL_VIEWER"

#include <inlib/sg/viewer> //for cursor_shape.
#include <inlib/sys/file>

namespace app_Windows {

template <class APP_MAIN>
class main 
:protected exlib::sg::pv_holder
,public APP_MAIN
,public exlib::Windows::window 
,public exlib::Windows::glarea
{
  typedef exlib::sg::pv_holder parent_pv_holder;
  typedef exlib::Windows::window parent_window;
  typedef exlib::Windows::glarea parent_glarea;
  typedef APP_MAIN parent;
public:
  EXLIB_GL_VIEWER_METHODS
public: //inlib::sg::gui_viewer
  virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {
    if(!parent::set_cursor_shape(a_shape)) return false;
    if(a_shape==inlib::sg::cursor_default) {
      HCURSOR r = ::LoadCursor(NULL,IDC_ARROW);   
      if(r==NULL) return false;
      ::SetCursor(r);
      ::SetClassLongPtr(glarea::m_hwnd,GCLP_HCURSOR,(LONG_PTR)r);
      return true;
    } else if(a_shape==inlib::sg::cursor_target) {
      HCURSOR r = ::LoadCursor(NULL,IDC_CROSS);   
      if(r==NULL) return false;
      ::SetCursor(r);
      ::SetClassLongPtr(glarea::m_hwnd,GCLP_HCURSOR,(LONG_PTR)r);
      return true;
    } else {
      return false;
    }
  }
public: //APP_MAIN
  virtual void win_render() {
    //send_paint();
    wm_paint();
  }
public: //exlib::Windows::window
  virtual void key_up(){
    if(do_key(inlib::sg::key_up,m_key_shift,m_key_ctrl)) win_render();
  }
  virtual void key_down(){
    if(do_key(inlib::sg::key_down,m_key_shift,m_key_ctrl)) win_render();
  }
  virtual void key_left(){
    if(do_key(inlib::sg::key_left,m_key_shift,m_key_ctrl)) win_render();
  }
  virtual void key_right(){
    if(do_key(inlib::sg::key_right,m_key_shift,m_key_ctrl)) win_render();
  }
  virtual void key_escape(){
    if(m_key_shift) {
      toggle_param_viewing();
    } else {
      do_escape();
    }
    win_render();
  }
  virtual void close(){
    set_to_exit();
  }
public: //exlib::Windows::glarea
  virtual void resize(unsigned int a_w,unsigned int a_h){
    //std::cout << "glarea::resize " << a_w << " " << a_h << std::endl;
    //NOTE : this is not called at startup.
    set_size(a_w,a_h);
  }
  virtual void paint(unsigned int a_w,unsigned int a_h) {
    //std::cout << "glarea::paint" << std::endl;
    if(!width() && !height()) set_size(a_w,a_h);
    render();
  }
  virtual void left_button_down(unsigned int a_x,unsigned int a_y) {
    touch_down(a_x,a_y);
  }
  virtual void left_button_up(unsigned int a_x,unsigned int a_y) {
    add_work_check_arm_buttons();
    touch_up(a_x,a_y);
  }
  virtual void mouse_move(unsigned int a_x,unsigned int a_y,bool a_ldown) {
    if(a_ldown) {
      // part of the touch gesture :
      if(touch_move(a_x,a_y)) win_render();
    } else {
      /* deprecated (moreover it slows down interactivity) :
      // notify the viewer. Needed in case of wall cursor remote control.
      if(mouse_motion(a_x,a_y)) win_render();
      */
    }
  }
public:
  main(std::ostream& a_out,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       unsigned int a_w,unsigned int a_h,
       bool a_verbose)
  :parent_pv_holder(a_out)
  ,parent(a_out,
          parent_pv_holder::m_mgr_gra,parent_pv_holder::m_ttf,parent_pv_holder::selection(),
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  ,parent_window(a_w,a_h)
  ,parent_glarea(parent_window::m_hwnd)
  {
    parent_window::set_client_area_size(a_w,a_h);
    push_home();
  }
  virtual ~main(){}
protected:  
  main(const main& a_from)
  :parent_pv_holder(a_from)
  ,parent_window(a_from)
  ,parent_glarea(a_from)
  ,parent(a_from)
  {}
  main& operator=(const main& a_from){
    parent::operator=(a_from);
    return *this;
  }
};

}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat
//exlib_build_use GL Windows kernel

#endif

