// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_Windows_main_cpp
#define exlib_app_Windows_main_cpp

#ifdef EXLIB_NO_GL
#include "main_DirectX"
#include <inlib/sys/file>
#else
#include "main"
#endif
#include "../../Windows/session"

#include "../../sg/view_wall"

#include <inlib/args>
#include <inlib/saui>
#include <inlib/sargs>
#include <inlib/app>
#include <iostream>
#include <cstdlib>

#ifdef INLIB_MEM_ATEXIT
inline void at_exit() {std::cout << "exlib_main : at_exit..."<< std::endl;inlib::mem::balance(std::cout);}
#endif

template <class APP_CONTEXT,class APP_MAIN>
int exlib_main(const std::string& a_app_name,int argc,char** argv,bool a_land = true) {
  bool verbose = false;

#ifdef INLIB_MEM
  #ifdef INLIB_MEM_ATEXIT
  ::atexit(at_exit);
  #endif  
  inlib::mem::set_check_by_class(true);{
#endif

  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe directory." << std::endl;
    return EXIT_FAILURE;
  }

  inlib::args args(argc,argv);
  if(a_land) args.add(inlib::s_arg_land(),"");

  verbose = args.is_arg(inlib::s_arg_verbose());

  std::string home_dir;
  inlib::dir::home(home_dir);
  if(home_dir.empty()) {
    std::cout << "exlib_main : can't get home directory." << std::endl;
    return EXIT_FAILURE;
  }  
  std::string doc_app_dir = "Documents";
  doc_app_dir += inlib::sep();
  doc_app_dir += a_app_name;

  std::string doc_dir = home_dir;
  doc_dir += inlib::sep();
  doc_dir += doc_app_dir;

  std::string res_dir;
  inlib::app_res_dir(exe_path,res_dir);

  std::string data_dir = doc_dir;
  std::string out_dir = doc_dir;

  std::string tmp_dir;
  if(!inlib::tmpdir(tmp_dir)) {
    std::cout << "exlib_main : inlib::tmpdir() failed." << std::endl;
    return EXIT_FAILURE;
  }

  unsigned int ww,wh;
  inlib::window_size_from_args(args,ww,wh);

  exlib::Windows::session wdoz(std::cout);

  APP_CONTEXT context(res_dir);

#ifdef EXLIB_NO_GL
  app_Windows::main<APP_MAIN> _main(std::cout,data_dir,res_dir,out_dir,tmp_dir,ww,wh,verbose);
#else
  app_Windows::main<APP_MAIN> _main(std::cout,data_dir,res_dir,out_dir,tmp_dir,ww,wh,verbose);
#endif

  _main.set_argcv(args);  
  if(args.is_arg(inlib::s_arg_black())) _main.m_params.m_scene_screen_color = inlib::colorf_black();

 {std::string DOCUMENT;
  args.files_at_end(); //take care of the upper -land.
  if(!args.file(DOCUMENT)) args.find(inlib::s_arg_document(),DOCUMENT);  
  if(verbose) {
    std::cout << "exlib_main :"
              << " document is " << inlib::sout(DOCUMENT) << "."
              << std::endl;
  }
  if(DOCUMENT.size()) {
    _main.create_gui();
    bool done;
    _main.opener().open(DOCUMENT,inlib::file::s_format_guessed(),inlib::args(),done);
  }}

  wdoz.show_window(_main.window::hwnd());

  exlib::sg::view_wall* _view_wall = exlib::sg::cast_view_wall(_main);
  if(_view_wall && _view_wall->walls()._walls().empty()) _view_wall = 0;

  if(_view_wall) { //APP_USE_WALL

  int fd_Windows = 0;
  std::vector<int> socks;
  socks.push_back(fd_Windows);
  //std::vector<bool> has_input;

  while(!_main.to_exit()) { 

    if(_main.num_cbks()) {

      bool dc_connected = _view_wall->is_connected();

      _main.do_works();

      if(!dc_connected && _view_wall->is_connected()) {
        //was not connected, but the do_works() did a connection.
        socks.clear();
        socks.push_back(fd_Windows);
        socks.push_back(_view_wall->data_client().socket().socket());
      }

      if(dc_connected && !_view_wall->is_connected()) {
        //was connected, but the do_works() did a disconnection.
        socks.clear();
        socks.push_back(fd_Windows);
      }

     {MSG event;
      if(::PeekMessage(&event,NULL,0,0,PM_REMOVE)) {
        ::TranslateMessage(&event);
        ::DispatchMessage(&event);
      }}
 
      if(_view_wall->is_connected()) {
        bool have_socks_input;
        if(!_view_wall->data_client().socket().is_there_input(have_socks_input)) {
          std::cout << "exlib_main :"
                    << " inlib::net::is_there_input failed."
                    << std::endl;
          break;
        }
        if(have_socks_input) {
          if(_view_wall->is_connected()) {
            if(!_view_wall->data_client().poll()) {}
            if(!_view_wall->is_connected()) {
              //we have received a inlib::wall::protocol::disconnect()
              _main.map_warn("disconnected");
              _main.win_render();
              socks.clear();
              socks.push_back(fd_Windows);
            }
          }
        }
      }
  
      continue;
    }

    if(verbose) {
      std::cout << "exlib_main : inlib::net::wait_input() ..." << std::endl;
    }

/*
    // How to wait on both Windows thread and data client socket ?
    if(!inlib::net::wait_input(socks,has_input)) {
      std::cout << "exlib_main : inlib::net::wait_input failed." << std::endl;
      break;
    }
*/

    // How to wait on both Windows thread and data client socket ?
    if(socks.size()==1) {
      while(true){
        MSG event;
        if(::PeekMessage(&event,NULL,0,0,PM_NOREMOVE)) break;
      }
    } else { //2
      bool status = true;
      while(true){
        MSG event;
        if(::PeekMessage(&event,NULL,0,0,PM_NOREMOVE)) break;
        bool have_socks_input;
        if(!_view_wall->data_client().socket().is_there_input(have_socks_input)) {
          std::cout << "exlib_main :"
                    << " inlib::net::is_there_input failed."
                    << std::endl;
          status = false;
          break;
        }
        if(have_socks_input) break;
      }
      if(!status) break;
    }

   {MSG event;
    if(::PeekMessage(&event,NULL,0,0,PM_REMOVE)) {
      ::TranslateMessage(&event);
      ::DispatchMessage(&event);

    } else { //from data client.

      if(_view_wall->is_connected()) {
        if(!_view_wall->data_client().poll()) {}
        if(!_view_wall->is_connected()) {
          //we have received a inlib::wall::protocol::disconnect()
          _main.map_warn("disconnected");
          _main.win_render();
          socks.clear();
          socks.push_back(fd_Windows);
        }
      }

    }}

  }

  } else { //APP_USE_WALL

  while(!_main.to_exit()) {

    if(_main.num_cbks()) {
      _main.do_works();

      MSG event;
      if(::PeekMessage(&event,NULL,0,0,PM_REMOVE)) {
        ::TranslateMessage(&event);
        ::DispatchMessage(&event);
      }
    } else {
      MSG event;
      BOOL status = ::GetMessage(&event,NULL,0,0);
      if(status == -1) { // This may happen (dixit Microsoft doc).
        std::cout << "exlib_main : GetMessage returned -1." << std::endl;
        break;
      } else if(status == 0) { //WM_QUIT
        //std::cout << "exlib_main : WM_QUIT." << std::endl;
        break;
      } else {
        ::TranslateMessage(&event);
        ::DispatchMessage(&event);
      }
    }

  }

  } //APP_USE_WALL

#ifdef INLIB_MEM
  }
  #ifndef INLIB_MEM_ATEXIT
  inlib::mem::balance(std::cout);
  #endif
  std::cout << a_app_name << "_Windows : exit(mem) ..." << std::endl;
#else  
  if(verbose) std::cout << a_app_name << "_Windows : exit ..." << std::endl;
#endif

  return EXIT_SUCCESS;
}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat
//exlib_build_use GL Windows kernel

#endif

