// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_WebGL_main_cpp
#define exlib_app_WebGL_main_cpp

#include "main"

#include <iostream>

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include <inlib/net/base_socket>

template <class APP_CONTEXT,class APP_MAIN>
int exlib_main(const std::string& a_app_name,int argc,char** argv,bool a_land = true) {//enforce landscape by default for Web apps.

  bool verbose = false;

#ifdef INLIB_MEM
  inlib::mem::set_check_by_class(true);{
#endif

  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe path." << std::endl;
    return EXIT_FAILURE;
  }

  inlib::args args(argc,argv);
  if(a_land) args.add(inlib::s_arg_land(),"");

  if(args.is_arg(inlib::s_arg_help())) {
    std::cout << "args :" << std::endl
              << inlib::s_arg_help() << std::endl
              << inlib::s_arg_verbose() << std::endl
              << inlib::s_arg_host() << std::endl
              << inlib::s_arg_port() << std::endl
              << inlib::s_arg_can_shutdown() << std::endl
              << inlib::s_arg_land() << std::endl
              << inlib::s_arg_document() << std::endl
              << s_arg_bgcolor() << std::endl
              << s_arg_compression() << std::endl
              << s_arg_reply_compression() << std::endl
              << std::endl;
    return EXIT_SUCCESS;
  }

  verbose = args.is_arg(inlib::s_arg_verbose());

  std::string host;
  if(args.is_arg(inlib::s_arg_host())) {
    args.find(inlib::s_arg_host(),host,"0.0.0.0");
  } else {
    if(!inlib::net::host_name(std::cout,host)) host = "0.0.0.0";
  }

  unsigned int port;
  args.find<unsigned int>(inlib::s_arg_port(),port,8000);
  if(verbose) {
    std::cout << "host " << host << std::endl;
    std::cout << "port " << port << std::endl;
  }

  args.remove(inlib::s_arg_host());
  args.remove(inlib::s_arg_port());
  args.add(s_arg_app_name(),a_app_name);

 {std::string res_dir;
  inlib::app_res_dir(exe_path,res_dir);
  APP_CONTEXT app_context(res_dir);}

  app_WebGL::main<APP_MAIN> svr(std::cout,args,verbose);
  if(!svr.initialize(host,port)) {
    std::cout << "main.initialize() failed." << std::endl;
    return EXIT_FAILURE;
  }
  svr.steer();

#ifdef INLIB_MEM
  }inlib::mem::balance(std::cout);
  if(verbose) std::cout << a_app_name << "_WebGL : exit(mem) ..." << std::endl;
#else
  if(verbose) std::cout << a_app_name << "_WebGL : exit ..." << std::endl;
#endif

  return EXIT_SUCCESS;
}

//exlib_build_use inlib inlib_glutess freetype png jpeg zlib expat kernel

#endif
